<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2022 CCPC Mianyang</title>
    <url>/2023/04/19/2022-CCPC-Mianyang/</url>
    <content><![CDATA[<h1 id="2022-CCPC-Mianyang-Onsite"><a href="#2022-CCPC-Mianyang-Onsite" class="headerlink" title="2022 CCPC Mianyang Onsite"></a><a href="https://codeforces.com/gym/104065">2022 CCPC Mianyang Onsite</a></h1><h2 id="A-Ban-or-Pick-What’s-the-Trick"><a href="#A-Ban-or-Pick-What’s-the-Trick" class="headerlink" title="A. Ban or Pick, What’s the Trick"></a>A. Ban or Pick, What’s the Trick</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>两个队伍分别有$n$个英雄可以选择，价值分别为$a_1, \cdots, a_n$和$b_1, \cdots, b_n$<br>两队轮流操作，每次可以选己方英雄池内$1$个英雄或者禁用对方英雄池内$1$个英雄<br>最终每方得分为选取英雄价值前$k$大的价值和，对于一方来说，得分差越大方案越优，求双方在最优策略下，两队得分差<br><span id="more"></span></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>两个显然的贪心：<br>$1.$选英雄一定选己方英雄池价值最大的，禁英雄一定禁对方英雄池价值最大的<br>$2.$当一方选满$k$个英雄后肯定不会再选英雄，只会禁英雄<br>由贪心性质可知状态数只有$O(nk^2)$个，所以可以记忆化搜索$dp(x,i,j)$表示当前双方共操作$x$轮，分别已选取$i$，$j$个英雄时的答案<br>一个重要的点是确定$(x,i,j)$后，双方已经被选/禁的英雄个数$p$，$q$是可以确定的<br>$p=\lfloor\frac{x}{2}\rfloor+i-j$<br>$q=\lfloor\frac{x+1}{2}\rfloor-i+j$</p>
<h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PII = std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">15</span>;</span><br><span class="line"><span class="type">const</span> ll INF = <span class="number">0x7f7f7f7f7f7f7f7f</span>;</span><br><span class="line">ll a[N], b[N];</span><br><span class="line">ll dp[N][M][M];</span><br><span class="line">ll n, k;</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="type">int</span> round, <span class="type">int</span> cura, <span class="type">int</span> curb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (round == <span class="number">2</span> * n)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (dp[round][cura][curb] != <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> dp[round][cura][curb];</span><br><span class="line">    <span class="type">int</span> nowa = round / <span class="number">2</span> - curb + cura; </span><br><span class="line">    <span class="type">int</span> nowb = (round + <span class="number">1</span>) / <span class="number">2</span> - cura + curb;</span><br><span class="line">    <span class="keyword">if</span> (round % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ll ans = -INF;</span><br><span class="line">        <span class="keyword">if</span> (cura != k &amp;&amp; nowa != n)</span><br><span class="line">            ans = std::<span class="built_in">max</span>(ans, <span class="built_in">dfs</span>(round + <span class="number">1</span>, cura + <span class="number">1</span>, curb) + a[nowa + <span class="number">1</span>]);</span><br><span class="line">        ans = std::<span class="built_in">max</span>(ans, <span class="built_in">dfs</span>(round + <span class="number">1</span>, cura, curb));</span><br><span class="line">        <span class="keyword">return</span> dp[round][cura][curb] = ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ll ans = INF;</span><br><span class="line">        <span class="keyword">if</span> (curb != k &amp;&amp; nowb != n)</span><br><span class="line">            ans = std::<span class="built_in">min</span>(ans, <span class="built_in">dfs</span>(round + <span class="number">1</span>, cura, curb + <span class="number">1</span>) - b[nowb + <span class="number">1</span>]);</span><br><span class="line">        ans = std::<span class="built_in">min</span>(ans, <span class="built_in">dfs</span>(round + <span class="number">1</span>, cura, curb));</span><br><span class="line">        <span class="keyword">return</span> dp[round][cura][curb] = ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        std::cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        std::cin &gt;&gt; b[i];</span><br><span class="line">    std::<span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>, std::<span class="built_in">greater</span>&lt;ll&gt;());</span><br><span class="line">    std::<span class="built_in">sort</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>, std::<span class="built_in">greater</span>&lt;ll&gt;());</span><br><span class="line">    ll ans = <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    std::cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// std::cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-Catch-You-Catch-Me"><a href="#C-Catch-You-Catch-Me" class="headerlink" title="C. Catch You Catch Me"></a>C. Catch You Catch Me</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p>一颗树，根节点是$1$号，除了根节点以外每个节点上初始都有一个蝴蝶，根节点是出口，每一秒所有蝴蝶都会朝着根节点逃跑(跑到父亲节点)，问拦截所有蝴蝶的最少操作次数，每次操作可以瞬移到一个节点，抓住该节点上的所有蝴蝶</p>
<h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>容易注意到答案是$1$号节点的所有孩子的子树深度之和</p>
<h3 id="具体代码-1"><a href="#具体代码-1" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PII = std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> ll INF = <span class="number">0x7f7f7f7f7f7f7f7f</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa, <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e[u].<span class="built_in">size</span>() == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == fa)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        res = std::<span class="built_in">max</span>(<span class="built_in">dfs</span>(v, u, d + <span class="number">1</span>), res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        std::cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        e[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        e[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : e[<span class="number">1</span>])</span><br><span class="line">        ans += <span class="built_in">dfs</span>(v, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    std::cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// std::cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D-Gambler’s-Ruin"><a href="#D-Gambler’s-Ruin" class="headerlink" title="D. Gambler’s Ruin"></a>D. Gambler’s Ruin</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h3><p>曼联和曼城比赛，你作为开盘手要给两个队设置赔率<br>有$n$个赌怪，第$i$个赌怪对曼联的胜率预测是$p_i$<br>若你设曼联的赔率为$x$，曼城的赔率为$y$，那么对于第$i$个赌怪：<br>若$p_i\cdot x\gt 1$，这个人会押$c_i$的钱在曼联<br>否则，若$(1-p_i)\cdot y\gt 1$，这个人会押$c_i$的钱在曼城<br>记赌怪们在曼联上的下注总和是$s_x$，在曼城上的下注总和是$s_y$，如果曼联赢了，博彩公司要付$s_x\cdot x$这么多钱，如果曼城赢了要付$s_y\cdot y$这么多钱<br>最坏情况下，博彩公司的利润是$s_x+s_y-max(s_x\cdot x, s_y\cdot y)$<br>现在你要设置$x$，$y$最大化最坏情况下博彩公司的利润</p>
<h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>以$p_i$为关键字从大到小对赌怪排序，那么所有$p_i\geq \frac{1}{x}$的赌怪都会下注曼联，那么$s_x$是一个前缀和形式<br>同理，$s_y$会是一个后缀和形式<br>记排序后$c_i$的前缀和为$pre_i$，后缀和为$suf_i$<br>有一个贪心性质：<br>假设前缀与后缀已经固定，$i$为下注曼联的前缀的最后一个人的指针，$j$为下注曼城的后缀的第一个人的指针，也就是固定了$s_x$和$s_y$，同时有$\frac{1}{p_i}\leq x\lt \frac{1}{p_{i+1}}$，$\frac{1}{1-p_j}\leq y\lt \frac{1}{1-p_{j-1}}$<br>那么为了最大化$res=s_x+s_y-max(s_x\cdot x, s_y\cdot y)$，令$x=\frac{1}{p_i}$，$y=\frac{1}{1-p_j}$显然最优<br>此时，$res$可改写为$res=pre_i+suf_j-max(\frac{pre_i}{p_i},\frac{suf_j}{1-p_j})$<br>注意$max$中的两个值，前者随着$i$增大在增大，后者随着$j$减小在增大<br>若固定$i$，一定存在$p$，使得$j\leq p$时有$\frac{pre_i}{p_i}\leq\frac{suf_j}{1-p_j}$，且$res=pre_i+suf_j-\frac{suf_j}{1-p_j}$此时随$j$增大而增大<br>同时$j\geq p+1$时有$\frac{pre_i}{p_i}\gt\frac{suf_j}{1-p_j}$，且$res=pre_i+suf_j-\frac{pre_i}{p_i}$此时随$j$增大而减小<br>因此固定$i$时，最大的$res$出现在$j=p$或$j=p+1$处<br>因为随着$i$的增大，$p$的值会不断减小，所以可以双指针维护$p$<br>还有另外两个点<br>一个点是，对于$p_i$相同的人，可以去重当作一个人<br>另一个点是，前缀与后缀不应有重叠部分，否则重叠的赌怪两边都押，他赌赢钱的期望是正的，也就是要求$\frac{1}{x}+\frac{1}{y}\leq 1$，虽然这个不等式和代码没关系，但是不应重叠和代码有关系($break$处)</p>
<h3 id="具体代码-2"><a href="#具体代码-2" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PLL = std::pair&lt;ll, ll&gt;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">std::pair&lt;<span class="type">double</span>, ll&gt; g[N];</span><br><span class="line">ll pre[N], suf[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        std::cin &gt;&gt; g[i].first &gt;&gt; g[i].second;</span><br><span class="line">    std::<span class="built_in">sort</span>(g + <span class="number">1</span>, g + n + <span class="number">1</span>, std::greater&lt;std::pair&lt;<span class="type">double</span>, ll&gt;&gt;());</span><br><span class="line">    <span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span> || <span class="built_in">fabs</span>(g[i].first - g[i - <span class="number">1</span>].first) &gt; eps)</span><br><span class="line">            ++m, g[m] = g[i];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            g[m].second += g[i].second;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        pre[i] = pre[i - <span class="number">1</span>] + g[i].second;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = m; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">        suf[i] = suf[i + <span class="number">1</span>] + g[i].second;</span><br><span class="line">    <span class="type">double</span> ans = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, p = m; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (p &gt; i &amp;&amp; pre[i] / g[i].first &gt; suf[p] / (<span class="number">1</span> - g[p].first))</span><br><span class="line">            --p;</span><br><span class="line">        ans = std::<span class="built_in">max</span>(ans, pre[i] + suf[p + <span class="number">1</span>] - pre[i] / g[i].first);</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= p)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        ans = std::<span class="built_in">max</span>(ans, pre[i] + suf[p] - suf[p] / (<span class="number">1</span> - g[p].first));</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::fixed &lt;&lt; std::<span class="built_in">setprecision</span>(<span class="number">10</span>) &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// std::cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="E-Hammer-to-Fall"><a href="#E-Hammer-to-Fall" class="headerlink" title="E. Hammer to Fall"></a>E. Hammer to Fall</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h3><p>$n$个点$m$条边的无向有权图，每个点上有$a_i$个居民<br>这个图上会下$q$天锤子雨，第$i$天下锤子雨的地点是$b_i$<br>作为国王，每天前都可以将若干人从一个城市转移到相邻的城市，代价是转移人数和边权的乘积<br>问在无人受伤的情况下的最小代价</p>
<h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p>对于单个居民，他对最后答案的贡献只与初始所在点有关<br>令$dp_k(u)$表示一个居民在第$k$天处于点$u$时对答案的贡献<br>倒着对$k=q,q-1,\cdots,1$更新$dp$值<br>每次只有下锤子雨的地点$u$的$dp$值需要更新<br>容易写出如下朴素代码<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        std::cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w;</span><br><span class="line">        std::cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        e[u].<span class="built_in">push_back</span>(&#123;v, w&#125;);</span><br><span class="line">        e[v].<span class="built_in">push_back</span>(&#123;u, w&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; ++i)</span><br><span class="line">        std::cin &gt;&gt; b[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = q; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = b[i];</span><br><span class="line">        dp[u] = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> [v, w] : e[u])</span><br><span class="line">            dp[u] = std::<span class="built_in">min</span>(dp[u], dp[v] + w);</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        ans = (ans + a[i] * dp[i]) % MOD;</span><br><span class="line">    std::cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>上述时间复杂度瓶颈在于，如果每天下锤子雨的地方都是同一个度数很大的点，那么每次都要遍历很多边来更新这个点的$dp$值，最坏复杂度为$O(qm)$<br>考虑根号分治，令$deg_u$为$u$点的度数，$B$为根号分治的阈值<br>若$deg_x\leq B$，还是暴力更新即可<br>若$deg_x\leq B$，注意到这样的点不会超过$\frac{2m}{B}$个(所有点度数之和为$2m$)，也就是不会超过根号级别个<br>对于每一个这样的点，可以用一个$multiset$维护其相邻点的$dp_v+w$<br>在每一个小度数点$dp_v$更新后，找到$v$相邻的所有大度数点，把他们的$multiset$里原本的$dp_v+w$删除，换成新的值<br>而更新大度数点时，只需要直接取出这个点的$multiset$中最小的值，注意大度数点也可能连着若干个大度数点，所以更新完大度数点的$dp$值后，也需要找到其相邻的所有大度数点，把他们的$multiset$里的旧值换成新值</p>
<h3 id="具体代码-3"><a href="#具体代码-3" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PLL = std::pair&lt;ll, ll&gt;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> B = <span class="number">600</span>;</span><br><span class="line"><span class="type">const</span> ll MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> ll INF = LLONG_MAX;</span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line">ll a[N], b[N];</span><br><span class="line">ll dp[N];</span><br><span class="line"><span class="type">int</span> deg[N];</span><br><span class="line">std::multiset&lt;PLL&gt; ms[N];</span><br><span class="line">std::vector&lt;PLL&gt; e[N];</span><br><span class="line">std::vector&lt;PLL&gt; big[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        std::cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ll u, v, w;</span><br><span class="line">        std::cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        e[u].<span class="built_in">push_back</span>(&#123;v, w&#125;);</span><br><span class="line">        e[v].<span class="built_in">push_back</span>(&#123;u, w&#125;);</span><br><span class="line">        ++deg[u], ++deg[v];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; ++i)</span><br><span class="line">        std::cin &gt;&gt; b[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">1</span>; u &lt;= n; ++u)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> [v, w] : e[u])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (deg[v] &gt; B)</span><br><span class="line">            &#123;</span><br><span class="line">                big[u].<span class="built_in">push_back</span>(&#123;v, w&#125;);</span><br><span class="line">                ms[v].<span class="built_in">insert</span>(&#123;w, u&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = q; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = b[i];</span><br><span class="line">        ll backup = dp[u];</span><br><span class="line">        <span class="keyword">if</span> (deg[u] &lt;= B)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[u] = INF;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> [v, w] : e[u])</span><br><span class="line">                dp[u] = std::<span class="built_in">min</span>(dp[u], dp[v] + w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            dp[u] = (*ms[u].<span class="built_in">begin</span>()).first;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> [v, w] : big[u])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (deg[v] &gt; B)</span><br><span class="line">            &#123;</span><br><span class="line">                ms[v].<span class="built_in">erase</span>(&#123;backup + w, u&#125;);</span><br><span class="line">                ms[v].<span class="built_in">insert</span>(&#123;dp[u] + w, u&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        ans = (ans + a[i] * dp[i]) % MOD;</span><br><span class="line">    std::cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// std::cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="G-Let-Them-Eat-Cake"><a href="#G-Let-Them-Eat-Cake" class="headerlink" title="G. Let Them Eat Cake"></a>G. Let Them Eat Cake</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h3><p>$Bobo$给站成一排的$n$个人发蛋糕，第$i$个人有标签$a_i$，每个标签都两两不同，且值都在$1\sim n$间，现在按下列规则发蛋糕，问发蛋糕的轮数<br>规则$1$：只剩一个人时，给这个人蛋糕，到此结束(这不记作一轮)<br>规则$2$：找到每一个标签值比左边或右边的人小的人，让他们拿到蛋糕，然后同时退出队伍，然后队伍自动紧缩。这记作一轮</p>
<h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><p>因为标记值两两不同，所以每一轮队伍里都会少掉一半的人，所以最多进行$log$轮，所以每一轮内部直接$O(n)$模拟</p>
<h3 id="具体代码-4"><a href="#具体代码-4" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PLL = std::pair&lt;ll, ll&gt;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; a;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        std::cin &gt;&gt; x;</span><br><span class="line">        a.<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> round = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.<span class="built_in">size</span>() &lt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        ++round;</span><br><span class="line">        std::vector&lt;<span class="type">int</span>&gt; b;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">bool</span> get_cake = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (i - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; a[i] &lt; a[i - <span class="number">1</span>])</span><br><span class="line">                get_cake = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> &lt; a.<span class="built_in">size</span>() &amp;&amp; a[i] &lt; a[i + <span class="number">1</span>])</span><br><span class="line">                get_cake = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (!get_cake)</span><br><span class="line">                b.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        a.<span class="built_in">swap</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; round &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// std::cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="H-Life-is-Hard-and-Undecidable-but"><a href="#H-Life-is-Hard-and-Undecidable-but" class="headerlink" title="H. Life is Hard and Undecidable, but"></a>H. Life is Hard and Undecidable, but</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定$k$，构造一个$Life\ Game$的初始状态(视作第$0$代)，使得恰好在第$k$代没有存活的细胞<br>$Life\ Game$规则：<br>$1.$如果一个离世状态的点周围八格范围内恰好有$3$个存活的点，那么这个点在下一秒就会变成一个存活的点<br>$2.$如果一个存活状态的点周围八格内恰好有$2$或$3$个存活的点，那么这个点在下一秒仍然是存活的点，否则会变成离世的点</p>
<h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><p>对角线，每一代只有对角线两个端点死掉</p>
<h3 id="具体代码-5"><a href="#具体代码-5" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PLL = std::pair&lt;ll, ll&gt;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cin &gt;&gt; k;</span><br><span class="line">    std::cout &lt;&lt; <span class="number">2</span> * k - <span class="number">1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="type">int</span> posx = <span class="number">300</span>, posy = <span class="number">300</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * k - <span class="number">1</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; posx &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; posy &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        --posx, --posy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// std::cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="J-Middle-Race"><a href="#J-Middle-Race" class="headerlink" title="J. Middle Race"></a>J. Middle Race</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定三个正整数$A,B,C$<br>$BoBo,oBoB$和你三者进行$n$轮游戏，每轮游戏我先选择$A,B,C$中的一个数，然后$BoBo,oBoB$各自从剩下的数里选一个数<br>设$n$轮游戏结束后你，$BoBo,oBoB$选择的数的总和依次为$X,Y,Z$，求出一种方案使得$\min(Y,Z)\leq X\leq \max(Y,Z)$或者判断不存在</p>
<h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><p>设$S=n(A+B+C)$，结论是只要找到让$X$最接近$\frac{S}{3}$的方案即可，此时一定有$\min(Y,Z)\leq X\leq \min(Y,Z)$<br>结论的证明：<br>$(1)Y\leq Z\leq X$<br>因为$X$在三者中最大，肯定有$X\geq \frac{S}{3}$，所以只需证明$|S-3X|$和$|S-3Z|$的大小关系<br>$|S-3X|=|X+Y+Z-3X|=|Y+Z-2X|=2X-Y-Z$<br>$|S-3Z|=|X+Y+Z-3Z|=|X+Y-2Z|$<br>$|S-3X|-|S-3Z|$<br>$=\max(2X-Y-Z-(X+Y-2Z),2X-Y-Z+(X+Y-2Z))$<br>$=\max(X+Z-2Y,3X-3Z)\gt 0$<br>就是说在$Y\leq Z\lt X$的情况下，$Z$是最接近$\frac{S}{3}$的<br>$(2)X\leq Y\leq Z$<br>和$(1)$同理，对称地写式子，能推出$Y$是最接近$\frac{S}{3}$的<br>$(3)Y\leq X\leq Z$和$(4)Z\leq X\leq Y$<br>同理，推出$X$是最接近$\frac{S}{3}$的<br>证毕<br>有了结论只需考虑如何找到该方案<br>不妨令$A\gt B\gt C$，假设$X$由$a$个$A$，$b$个$B$，$c$个$C$组成，那么有<br>$X=aA+bB+(n-a-b)C=a(A-C)+b(B-C)+nC$<br>在数据允许的$O(nlogn)$的时间复杂度内，可以通过枚举来固定$a$的数量，然后二分$b$的个数找到使得$3X-S$的正负性改变的位置，从而找到最佳方案</p>
<h3 id="具体代码-6"><a href="#具体代码-6" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> ll MOD = <span class="number">998244353</span>;</span><br><span class="line">ll n, A, B, C;</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * (A - C) + b * (B - C) + n * C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; A &gt;&gt; B &gt;&gt; C;</span><br><span class="line">    <span class="keyword">if</span> (A &lt; B)</span><br><span class="line">        std::<span class="built_in">swap</span>(A, B);</span><br><span class="line">    <span class="keyword">if</span> (A &lt; C)</span><br><span class="line">        std::<span class="built_in">swap</span>(A, C);</span><br><span class="line">    <span class="keyword">if</span> (B &lt; C)</span><br><span class="line">        std::<span class="built_in">swap</span>(B, C);</span><br><span class="line">    ll s = n * (A + B + C);</span><br><span class="line">    ll min_gap = LLONG_MAX, cnta = <span class="number">-1</span>, cntb = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n - i;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">calc</span>(i, mid) * <span class="number">3</span> &gt;= s)</span><br><span class="line">                r = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= <span class="number">1</span> &amp;&amp; <span class="built_in">abs</span>(<span class="built_in">calc</span>(i, l) * <span class="number">3</span> - s) &gt; <span class="built_in">abs</span>(<span class="built_in">calc</span>(i, l - <span class="number">1</span>) * <span class="number">3</span> - s))</span><br><span class="line">            --l;</span><br><span class="line">        ll t = <span class="built_in">abs</span>(<span class="built_in">calc</span>(i, l) * <span class="number">3</span> - s);</span><br><span class="line">        <span class="keyword">if</span> (t &lt; min_gap)</span><br><span class="line">            min_gap = t, cnta = i, cntb = l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= cnta)</span><br><span class="line">            std::cout &lt;&lt; A &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i &lt;= cnta + cntb)</span><br><span class="line">            std::cout &lt;&lt; B &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            std::cout &lt;&lt; C &lt;&lt; std::endl;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        std::cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    std::cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="M-Rock-Paper-Scissors-Pyramid"><a href="#M-Rock-Paper-Scissors-Pyramid" class="headerlink" title="M. Rock-Paper-Scissors Pyramid"></a>M. Rock-Paper-Scissors Pyramid</h2><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a>题目大意</h3><p>有一个长度为$n$的石头剪刀布序列，每个元素是$RPS$(石头、布、剪刀)中的一个，我们需要用这个序列构造一个三角，三角的底层为这个序列，第<br>$i$层的第$j$个元素为下一层第$j$和第$j+1$个元素中不会失败的那一方<br>求三角的顶端是什么</p>
<h3 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h3><p>考虑已经有了前$n-1$位的序列生成的三角形，如何推出$n$位序列生成的三角$Q$<br>显然第$n$位的元素应该自底向上和$P$的每一层的最后一个元素一一比较，如果能战胜，就在上一层的末尾放上自己，直到遇到一个不能战胜的元素，再向上的每层最后一个元素和下一层之前的最后一个元素相同<br>这个过程里只有每层的最后一个元素有用，所以只维护每层最后一个元素即可<br>维护的序列$S$中连续相同位的比较结果一定相同，所以可以把连续的相同位视作一位<br>这样，由$P$得到$Q$的过程，等价于在$S$末尾删除所有可以被新元素战胜的元素，然后把新元素压入$S$末尾<br>这是一个栈结构，最后输出栈底即可</p>
<h3 id="具体代码-7"><a href="#具体代码-7" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PII = std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">3</span>;</span><br><span class="line"><span class="type">const</span> ll INF = <span class="number">0x7f7f7f7f7f7f7f7f</span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">win</span><span class="params">(<span class="type">char</span> s, <span class="type">char</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="string">&#x27;R&#x27;</span> &amp;&amp; t == <span class="string">&#x27;S&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="string">&#x27;S&#x27;</span> &amp;&amp; t == <span class="string">&#x27;P&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="string">&#x27;P&#x27;</span> &amp;&amp; t == <span class="string">&#x27;R&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::string str;</span><br><span class="line">    std::cin &gt;&gt; str;</span><br><span class="line">    std::stack&lt;<span class="type">int</span>&gt; sta;</span><br><span class="line">    <span class="type">int</span> n = str.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (!sta.<span class="built_in">empty</span>() &amp;&amp; !<span class="built_in">win</span>(str[sta.<span class="built_in">top</span>()], str[i]))</span><br><span class="line">            sta.<span class="built_in">pop</span>();</span><br><span class="line">        sta.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!sta.<span class="built_in">empty</span>())</span><br><span class="line">        ans = sta.<span class="built_in">top</span>(), sta.<span class="built_in">pop</span>();</span><br><span class="line">    std::cout &lt;&lt; str[ans] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    std::cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>XCPC</tag>
      </tags>
  </entry>
  <entry>
    <title>2023.02.08</title>
    <url>/2023/04/12/230208record/</url>
    <content><![CDATA[<h3 id="With-Bobo"><a href="#With-Bobo" class="headerlink" title="With Bobo"></a>With Bobo</h3><span id="more"></span>
<p><img src="https://i.postimg.cc/zDQ9vPjq/176ce83a0029ab967bade15b49609e0.jpg"></p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>2023.04.14</title>
    <url>/2023/04/15/230414record/</url>
    <content><![CDATA[<h3 id="Bobo’s-big-success"><a href="#Bobo’s-big-success" class="headerlink" title="Bobo’s big success"></a>Bobo’s big success</h3><span id="more"></span>
<p><img src="https://i.postimg.cc/YCCnNPj7/56dbfb058896a930902acaa79150300.jpg"></p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>2023.05.08</title>
    <url>/2023/05/08/230508record/</url>
    <content><![CDATA[<h3 id="Patience-is-everything"><a href="#Patience-is-everything" class="headerlink" title="Patience is everything"></a>Patience is everything</h3><span id="more"></span>
<p><img src="https://i.postimg.cc/zvKxbzpv/d4daec8d7d6182e00a4ba8f9cfb591e.jpg"><br><img src="https://i.postimg.cc/Y2YRxSfq/7dbbfb386964150780a4472a22b8eac.jpg"></p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>2023.05.13</title>
    <url>/2023/05/13/230513record/</url>
    <content><![CDATA[<h3 id="Bobo’s-birthday"><a href="#Bobo’s-birthday" class="headerlink" title="Bobo’s birthday"></a>Bobo’s birthday</h3><span id="more"></span>
<p><img src="https://i.postimg.cc/zDFHyt4d/71d4ce8853df24e2eda05cef38d26f2.jpg"></p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>2023.04.17</title>
    <url>/2023/04/17/230417record/</url>
    <content><![CDATA[<h3 id="Bad-ass-BoBo"><a href="#Bad-ass-BoBo" class="headerlink" title="Bad ass BoBo"></a>Bad ass BoBo</h3><span id="more"></span>
<p><img src="https://i.postimg.cc/Sx2xBDPV/61f092b904b5294cf2c56bac8db1f19.jpg"></p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>2023.04.23</title>
    <url>/2023/04/24/230423record/</url>
    <content><![CDATA[<h3 id="Meal-beside-toilets"><a href="#Meal-beside-toilets" class="headerlink" title="Meal beside toilets"></a>Meal beside toilets</h3><span id="more"></span>
<p><img src="https://i.postimg.cc/5tyF9N06/52e5560198cc3773e9573ba5f2a90e1.jpg"></p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>2023.07.01</title>
    <url>/2023/07/01/230701record/</url>
    <content><![CDATA[<h3 id="终于忙完期末，炫炫炫我疯狂地炫"><a href="#终于忙完期末，炫炫炫我疯狂地炫" class="headerlink" title="终于忙完期末，炫炫炫我疯狂地炫"></a>终于忙完期末，炫炫炫我疯狂地炫</h3><span id="more"></span>
<p><img src="https://s2.loli.net/2023/07/01/xuknd4tf2zcDbgZ.jpg"><br><img src="https://s2.loli.net/2023/07/01/PtezFLW4Xmw3Ys6.jpg"></p>
<h3 id="看门兽卡拉卡拉"><a href="#看门兽卡拉卡拉" class="headerlink" title="看门兽卡拉卡拉"></a>看门兽卡拉卡拉</h3><p><img src="https://s2.loli.net/2023/07/01/xZjzLJvMOI3oCtn.jpg"></p>
<h3 id="真的很喜欢这个小音响"><a href="#真的很喜欢这个小音响" class="headerlink" title="真的很喜欢这个小音响"></a>真的很喜欢这个小音响</h3><p><img src="https://s2.loli.net/2023/07/01/WSPk2hv9zNpC8OK.jpg"></p>
<h3 id="暑假还有好多活，一定最起码学完字符串和博弈论的科技-难蚌"><a href="#暑假还有好多活，一定最起码学完字符串和博弈论的科技-难蚌" class="headerlink" title="暑假还有好多活，一定最起码学完字符串和博弈论的科技(难蚌"></a>暑假还有好多活，一定最起码学完字符串和博弈论的科技(难蚌</h3>]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>2023.07.14</title>
    <url>/2023/07/14/230717record/</url>
    <content><![CDATA[<h3 id="Game-with-Game-King-BoBo"><a href="#Game-with-Game-King-BoBo" class="headerlink" title="Game with Game King BoBo"></a>Game with Game King BoBo</h3><span id="more"></span>
<p><img src="https://s2.loli.net/2023/07/14/umOYlHLsZxaTKAr.jpg" ><br><img src="https://s2.loli.net/2023/07/14/gZnKbHY1LpMe6jP.jpg" ></p>
<h3 id="逆天"><a href="#逆天" class="headerlink" title="逆天"></a>逆天</h3><p><img src="https://s2.loli.net/2023/07/14/tMBz6XIL9EK1vJP.jpg" ></p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>2023.09.10</title>
    <url>/2023/09/10/230910record/</url>
    <content><![CDATA[<h3 id="转瞬即逝的暑假"><a href="#转瞬即逝的暑假" class="headerlink" title="转瞬即逝的暑假"></a>转瞬即逝的暑假</h3><span id="more"></span>
<p><img src="https://s2.loli.net/2023/09/10/3JpM7TCNhAnkKsd.jpg" alt="缆车"></p>
<p><img src="https://s2.loli.net/2023/09/10/faPvOlZyTgBrSiA.jpg" alt="嘿嘿"></p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>记2023ICPC西安邀请赛</title>
    <url>/2023/05/15/23XianInvitationrecord/</url>
    <content><![CDATA[<h3 id="第一次线下赛，礼拜五晚上下飞机先炫一顿当地烧烤"><a href="#第一次线下赛，礼拜五晚上下飞机先炫一顿当地烧烤" class="headerlink" title="第一次线下赛，礼拜五晚上下飞机先炫一顿当地烧烤"></a>第一次线下赛，礼拜五晚上下飞机先炫一顿当地烧烤</h3><h3 id="评价是没有想象中那么好吃，也没有想象中那样离谱的便宜"><a href="#评价是没有想象中那么好吃，也没有想象中那样离谱的便宜" class="headerlink" title="评价是没有想象中那么好吃，也没有想象中那样离谱的便宜"></a>评价是没有想象中那么好吃，也没有想象中那样离谱的便宜</h3><span id="more"></span>
<p><img src="https://i.postimg.cc/0yKdcmSj/a2dbef6f374de8da26b3d3fc8f07ce8.jpg"></p>
<h3 id="十二点了才发现电脑落在接机的司机车上"><a href="#十二点了才发现电脑落在接机的司机车上" class="headerlink" title="十二点了才发现电脑落在接机的司机车上"></a>十二点了才发现电脑落在接机的司机车上</h3><h3 id="爆了-100-金币，等到凌晨三点，很抽象"><a href="#爆了-100-金币，等到凌晨三点，很抽象" class="headerlink" title="爆了$100$金币，等到凌晨三点，很抽象"></a>爆了$100$金币，等到凌晨三点，很抽象</h3><p><img src="https://i.postimg.cc/C1rz3rTg/45be5df39a734210735e0bfc910489e.jpg"></p>
<h3 id="礼拜六签到，到达-ICPC-最高城西工大，太美丽啦家人们"><a href="#礼拜六签到，到达-ICPC-最高城西工大，太美丽啦家人们" class="headerlink" title="礼拜六签到，到达$ICPC$最高城西工大，太美丽啦家人们"></a>礼拜六签到，到达$ICPC$最高城西工大，太美丽啦家人们</h3><p><img src="https://i.postimg.cc/RZCq0zSB/4d693ee6b4f11fc5149aac7146ef1df.jpg"></p>
<p><img src="https://i.postimg.cc/CL7LX6j6/75fb5f3070aaeb1c4defc25c1d838e1.jpg"></p>
<h3 id="图书馆爆杀中山北路某学校"><a href="#图书馆爆杀中山北路某学校" class="headerlink" title="图书馆爆杀中山北路某学校"></a>图书馆爆杀中山北路某学校</h3><p><img src="https://i.postimg.cc/SsbhJW6M/522598d73d4e696f667b64131ff6c38.jpg"></p>
<p><img src="https://i.postimg.cc/x8shyHzg/aac73b4006fe01f9fd05293bb970c08.jpg"></p>
<h3 id="路过老八面馆，有点想吃但最后还是狂炫旁边的火锅，导致礼拜天比赛前一泻千里"><a href="#路过老八面馆，有点想吃但最后还是狂炫旁边的火锅，导致礼拜天比赛前一泻千里" class="headerlink" title="路过老八面馆，有点想吃但最后还是狂炫旁边的火锅，导致礼拜天比赛前一泻千里"></a>路过老八面馆，有点想吃但最后还是狂炫旁边的火锅，导致礼拜天比赛前一泻千里</h3><p><img src="https://i.postimg.cc/hj2pHntt/ec777ea8c08dcfd20439ecde54d90f4.jpg"></p>
<h3 id="赛时最后五分钟很惊险地过了一题，不得不说线下赛的五个小时过得真的快，也没想到-XCPC-的第一块牌子是银的"><a href="#赛时最后五分钟很惊险地过了一题，不得不说线下赛的五个小时过得真的快，也没想到-XCPC-的第一块牌子是银的" class="headerlink" title="赛时最后五分钟很惊险地过了一题，不得不说线下赛的五个小时过得真的快，也没想到$XCPC$的第一块牌子是银的"></a>赛时最后五分钟很惊险地过了一题，不得不说线下赛的五个小时过得真的快，也没想到$XCPC$的第一块牌子是银的</h3><p><img src="https://i.postimg.cc/SNxJShNp/3e51f4c700c8e49c44a8c368bd5001d.jpg"></p>
<h3 id="送我们去西安机场的师傅的车上有个-R-星，所以我的-6-呢-cdots-，在机场炫麦麦狂炫两个甜筒结束了周末"><a href="#送我们去西安机场的师傅的车上有个-R-星，所以我的-6-呢-cdots-，在机场炫麦麦狂炫两个甜筒结束了周末" class="headerlink" title="送我们去西安机场的师傅的车上有个$R$星，所以我的$6$呢$\cdots$，在机场炫麦麦狂炫两个甜筒结束了周末"></a>送我们去西安机场的师傅的车上有个$R$星，所以我的$6$呢$\cdots$，在机场炫麦麦狂炫两个甜筒结束了周末</h3><p><img src="https://i.postimg.cc/dV8Mg7PQ/3388fc216edf2c4f41a080dc63cc7e9.jpg"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="由于西安物价不是很高，各种油辣食物炫得还是很开心的，线下赛的紧张刺激有趣程度也远超线上赛，遗憾是长安校区太偏僻了，远离市区又远离景点，有点想看阿旁宫来着"><a href="#由于西安物价不是很高，各种油辣食物炫得还是很开心的，线下赛的紧张刺激有趣程度也远超线上赛，遗憾是长安校区太偏僻了，远离市区又远离景点，有点想看阿旁宫来着" class="headerlink" title="由于西安物价不是很高，各种油辣食物炫得还是很开心的，线下赛的紧张刺激有趣程度也远超线上赛，遗憾是长安校区太偏僻了，远离市区又远离景点，有点想看阿旁宫来着"></a>由于西安物价不是很高，各种油辣食物炫得还是很开心的，线下赛的紧张刺激有趣程度也远超线上赛，遗憾是长安校区太偏僻了，远离市区又远离景点，有点想看阿旁宫来着</h3><h3 id="因为强队这次都去打-CCPC-Final-了，金牌线也就-6-题，差的-I-题有很多五题队都做出来了，如果前期运势好一点说不定能偷金，也有点可惜"><a href="#因为强队这次都去打-CCPC-Final-了，金牌线也就-6-题，差的-I-题有很多五题队都做出来了，如果前期运势好一点说不定能偷金，也有点可惜" class="headerlink" title="因为强队这次都去打$CCPC\ Final$了，金牌线也就$6$题，差的$I$题有很多五题队都做出来了，如果前期运势好一点说不定能偷金，也有点可惜"></a>因为强队这次都去打$CCPC\ Final$了，金牌线也就$6$题，差的$I$题有很多五题队都做出来了，如果前期运势好一点说不定能偷金，也有点可惜</h3>]]></content>
      <tags>
        <tag>XCPC</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Div2 821</title>
    <url>/2023/05/01/Codeforces-div2-821/</url>
    <content><![CDATA[<h1 id="Codeforces-Round-821-Div-2"><a href="#Codeforces-Round-821-Div-2" class="headerlink" title="Codeforces Round #821 (Div. 2)"></a><a href="https://codeforces.com/contest/1733">Codeforces Round #821 (Div. 2)</a></h1><h2 id="A-Consecutive-Sum"><a href="#A-Consecutive-Sum" class="headerlink" title="A.Consecutive Sum"></a>A.Consecutive Sum</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定一个长度为$n$的数组$a$，可做以下操作至多$k$次：<br>选择两个下标$i$和$j$，要求$i\ mod\ k=j\ mod\ k$，然后交换$a_i$和$a_j$<br>操作完后，任意选连续$k$个数，这些数的的和是你的分数，问分数最多是多少<br><span id="more"></span></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>签到题<br>相当于把数组中的所有元素按除以$k$得到的余数分组，在每个组中取最大值加起来就可以</p>
<h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> LL N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> LL MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line">LL a[N];</span><br><span class="line">LL c[N];</span><br><span class="line">LL ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    std::cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span> c);</span><br><span class="line">        ans = <span class="number">0LL</span>;</span><br><span class="line">        std::cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            std::cin &gt;&gt; a[i];</span><br><span class="line">            c[i % m] = std::<span class="built_in">max</span>(c[i % m], a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">            ans += c[i];</span><br><span class="line">        std::cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="B-Rule-of-League"><a href="#B-Rule-of-League" class="headerlink" title="B.Rule of League"></a>B.Rule of League</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p>有一场羽毛球比赛，$n$个玩家参与<br>比赛是这样进行的：先让玩家$1$和玩家$2$比，胜者和玩家$3$比，胜者和玩家$4$比，$\cdots$，一直这样比$n-1$轮<br>现在给出$x$和$y$，代表比赛结束后每名玩家的的胜场数要么是$x$要么是$y$<br>问比赛结果是否有可能满足$x$和$y$，如果能，输出可能的每轮的胜者</p>
<h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>$x$和$y$不能都大于$0$(考虑第一场比赛，玩家$1$和玩家$2$肯定有一个人以$0$胜场被淘汰)<br>同时显然$x$和$y$不能都等于$0$<br>那么就是说$x$和$y$中有一个是$0$，另一个大于$0$<br>若有$n$名玩家，比赛会进行$n-1$轮<br>那么只要$n-1$是$max(x,y)$的倍数就可以了</p>
<h3 id="具体代码-1"><a href="#具体代码-1" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> LL N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> LL MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n, m, q, x, y;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    std::cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cin &gt;&gt; n &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span> (!x &amp;&amp; !y)</span><br><span class="line">            std::cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x &amp;&amp; y)</span><br><span class="line">            std::cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> t = std::<span class="built_in">max</span>(x, y);</span><br><span class="line">            <span class="type">int</span> rounds = n - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (!(rounds % t))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i += t)</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= t; ++j)</span><br><span class="line">                        std::cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                std::cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                std::cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-Parity-Shuffle-Sorting"><a href="#C-Parity-Shuffle-Sorting" class="headerlink" title="C.Parity Shuffle Sorting"></a>C.Parity Shuffle Sorting</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定长度为$n$的非负数组$a$，可执行下述操作若干次：<br>第一步：选择两个下标$l$和$r$<br>第二步：若$a_l+a_r$是奇数，那么令$a_r=a_l$，若$a_l+a_r$是偶数，那么令$a_l=a_r$<br>找到一种不超过$n$次的操作序列并输出(可证明一定存在这样的操作序列)，让$a$数组变成严格不下降序列，注意没有必要让操作次数尽可能小</p>
<h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>题干里特意强调了限制操作次数不超过$n$次，并且没有必要让操作次数尽可能小<br>不禁令人想到是不是正解的操作次数就是差不多$n$次<br>事实也确实如此，只要将序列变成常数列就可以了<br>操作次数最坏$n-1$次并且一定可行<br>实现起来也很简单，此题唯一难点就是要想到把序列变成常数列</p>
<h3 id="具体代码-2"><a href="#具体代码-2" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> LL N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> LL MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">LL n, m, q, t;</span><br><span class="line">LL a[N];</span><br><span class="line">LL l[N], r[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    std::cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        m = <span class="number">0</span>;</span><br><span class="line">        std::cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            std::cin &gt;&gt; a[i];</span><br><span class="line">        <span class="comment">//变成常数列a[i]=t</span></span><br><span class="line">        <span class="keyword">if</span> ((a[<span class="number">1</span>] - a[n]) &amp; <span class="number">1</span>) <span class="comment">//异奇偶</span></span><br><span class="line">                               <span class="comment">// 1次</span></span><br><span class="line">            t = a[n] = a[<span class="number">1</span>], l[++m] = <span class="number">1</span>, r[m] = n;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            t = a[<span class="number">1</span>] = a[n], l[++m] = <span class="number">1</span>, r[m] = n;</span><br><span class="line">        <span class="keyword">if</span> (t &amp; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n - <span class="number">1</span>; ++i) <span class="comment">// n-2次</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i] &amp; <span class="number">1</span>)</span><br><span class="line">                    a[i] = a[n], l[++m] = i, r[m] = n;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    a[i] = a[<span class="number">1</span>], l[++m] = <span class="number">1</span>, r[m] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n - <span class="number">1</span>; ++i) <span class="comment">// n-2次</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i] &amp; <span class="number">1</span>)</span><br><span class="line">                    a[i] = a[<span class="number">1</span>], l[++m] = <span class="number">1</span>, r[m] = i;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    a[i] = a[n], l[++m] = i, r[m] = n;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            for (int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="comment">                std::cout &lt;&lt; a[i] &lt;&lt; &#x27; &#x27;;</span></span><br><span class="line"><span class="comment">            std::cout &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">            std::cout &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; m &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">                std::cout &lt;&lt; l[i] &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; r[i] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D1-Zero-One-Easy-Version"><a href="#D1-Zero-One-Easy-Version" class="headerlink" title="D1.Zero-One (Easy Version)"></a>D1.Zero-One (Easy Version)</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h3><p>给了两个长度为$n$的$01$串$a$和$b$，可做以下操作任意次：<br>第一步：选择两个下标$l$和$r$<br>第二步：$a_l=1-a_l$，$a_r=1-a_r$(即两个都翻转)<br>每次操作都是有代价的，如果$r-l=1$，代价为$x$，否则代价为$y$<br>$Easy\ Version$保证$x\geq y$<br>输出让$a$变得和$b$一样的最小代价，若变不成一样输出$-1$</p>
<h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p>先把$a$中需要翻转的下标都找出来，记$t$为需要翻转的个数<br>如果$t$为奇数，那么显然输出$-1$<br>下面考虑$t$为偶数：<br>因为保证了$x\geq y$，所以当$t\geq 4$时，肯定是都执行代价为$y$的操作(贪心)(这样的操作是一定存在的)<br>若$t=2$，如果需要翻转的下标不是连着的，还是执行$y$。如果是连着的，比较$x$和$y\times 2$(随便取第三个下标陪这两个下标执行两次)的大小，执行那个小的操作</p>
<h3 id="具体代码-3"><a href="#具体代码-3" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> LL N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> LL MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">LL n, m, q, x, y, t;</span><br><span class="line">std::string a, b;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    std::cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        t = <span class="number">0</span>;</span><br><span class="line">        std::cin &gt;&gt; n &gt;&gt; x &gt;&gt; y &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            st[i] = a[i - <span class="number">1</span>] != b[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (st[i] &amp;&amp; st[i - <span class="number">1</span>])</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            t += (LL)st[i];</span><br><span class="line">        <span class="keyword">if</span> (t % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag &amp;&amp; t == <span class="number">2</span>)</span><br><span class="line">                std::cout &lt;&lt; std::<span class="built_in">min</span>(y &lt;&lt; <span class="number">1</span>, x) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                std::cout &lt;&lt; (t * y &gt;&gt; <span class="number">1</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            std::cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="D2-Zero-One-Hard-Version"><a href="#D2-Zero-One-Hard-Version" class="headerlink" title="D2.Zero-One (Hard Version)"></a>D2.Zero-One (Hard Version)</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h3><p>$n$的数据范围从$3000$变成$5000$，$x$和$y$的大小关系不再有限制<br>别的和$Easy\ Version$一样</p>
<h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><p>当$x\lt y$时，不能再贪心了<br>于是自然想到动态规划<br>$dp[l][r]$表示处理第$l$个到第$r$个需要翻转的位置的最小代价</p>
<h3 id="具体代码-4"><a href="#具体代码-4" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> LL N = <span class="number">5010</span>;</span><br><span class="line"><span class="type">const</span> LL MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> LL INF = <span class="number">1e18</span>;</span><br><span class="line">LL n, m, q, x, y, t;</span><br><span class="line"><span class="type">char</span> a[N], b[N];</span><br><span class="line">LL dp[N][N];          <span class="comment">// dp[l][r]表示把从第l个到第r个需要翻转的位置全部翻转好所需的最小代价</span></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; pos; <span class="comment">//需要翻转的下标</span></span><br><span class="line"><span class="function">LL <span class="title">get</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l + <span class="number">1</span> == r)</span><br><span class="line">        <span class="keyword">return</span> std::<span class="built_in">min</span>(<span class="number">2</span> * y, x); <span class="comment">// min(找一个第三者执行两次y，直接执行x)</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> std::<span class="built_in">min</span>(y, x * (r - l)); <span class="comment">// min(直接执行y，一个邻居一个邻居这样翻过去)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">dfs</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (dp[l][r] != <span class="number">-1</span>) <span class="comment">//记忆化</span></span><br><span class="line">        <span class="keyword">return</span> dp[l][r];</span><br><span class="line">    LL res = INF;</span><br><span class="line">    res = std::<span class="built_in">min</span>(res, <span class="built_in">dfs</span>(l + <span class="number">1</span>, r - <span class="number">1</span>) + <span class="built_in">get</span>(pos[l], pos[r])); </span><br><span class="line">    res = std::<span class="built_in">min</span>(res, <span class="built_in">dfs</span>(l, r - <span class="number">2</span>) + <span class="built_in">get</span>(pos[r - <span class="number">1</span>], pos[r])); </span><br><span class="line">    res = std::<span class="built_in">min</span>(res, <span class="built_in">dfs</span>(l + <span class="number">2</span>, r) + <span class="built_in">get</span>(pos[l], pos[l + <span class="number">1</span>])); </span><br><span class="line">    <span class="keyword">return</span> dp[l][r] = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    std::cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cin &gt;&gt; n &gt;&gt; x &gt;&gt; y &gt;&gt; a + <span class="number">1</span> &gt;&gt; b + <span class="number">1</span>;</span><br><span class="line">        pos.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= n; ++j)</span><br><span class="line">                dp[i][j] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (a[i] != b[i])</span><br><span class="line">                pos.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">if</span> (pos.<span class="built_in">size</span>() &amp; <span class="number">1</span>)</span><br><span class="line">            std::cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pos.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">            std::cout &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pos.<span class="built_in">size</span>() == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (pos[<span class="number">1</span>] - pos[<span class="number">0</span>] == <span class="number">1</span>)</span><br><span class="line">                std::cout &lt;&lt; std::<span class="built_in">min</span>(y * <span class="number">2</span>, x) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                std::cout &lt;&lt; std::<span class="built_in">min</span>(y, x * (pos[<span class="number">1</span>] - pos[<span class="number">0</span>])) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (x &gt;= y)</span><br><span class="line">                std::cout &lt;&lt; pos.<span class="built_in">size</span>() / <span class="number">2</span> * y &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">// Hard Version(x &lt; y)</span></span><br><span class="line">                std::cout &lt;&lt; <span class="built_in">dfs</span>(<span class="number">0</span>, pos.<span class="built_in">size</span>() - <span class="number">1</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="E-Conveyor"><a href="#E-Conveyor" class="headerlink" title="E.Conveyor"></a>E.Conveyor</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a>题目大意</h3><p>有一个网格。每个格子上都有传送带(初始方向均为向右)，每一秒，都会往格子$(0,0)$上放一个箱子。每一秒，对于所有的格子，如果其上面有箱子的话，则会将箱子移动到相应的方向。并且传送带的方向会改变(向右-&gt;向下-&gt;向右$\cdots$)<br>现在给出$t,x,y$，问第$t$秒的时候$(x,y)$这个格子上是否有箱子(从第$0$秒开始，且第$0$秒$(0,0)$已经有箱子了)</p>
<h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><p>知道做法后没有想到那么简单，属实是思维题了<br>记$a[i][j]$为t秒下，$(i,j)$这个格子上途径了多少个箱子<br>对于一个位于$(i,j)$的箱子，会往$(i,j+1)$送去$a[i][j]/2$上取整个箱子，往$(i+1,j)$送去$a[i][j]/2$下取整个箱子<br>注意对$a[0][0]$赋初值时，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a[0][0] = std::max(t - (x + y) + 1LL, 0LL);</span><br></pre></td></tr></table></figure>
<p>这是因为一个箱子到$(x,y)$也需要时间，达不到这些时间的箱子对当前情况是没有用的</p>
<h3 id="具体代码-5"><a href="#具体代码-5" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> LL N = <span class="number">150</span>;</span><br><span class="line"><span class="type">const</span> LL MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> LL INF = <span class="number">0x7f7f7f7f7f7f7f7f</span>;</span><br><span class="line">LL n, m, q, x, y, t;</span><br><span class="line">LL a[N][N]; <span class="comment">// a[i][j]为t秒下，(i,j)这个格子上途径了多少个箱子</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cal</span><span class="params">(<span class="type">int</span> t, <span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">    a[<span class="number">0</span>][<span class="number">0</span>] = std::<span class="built_in">max</span>(t - (x + y) + <span class="number">1LL</span>, <span class="number">0LL</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= x; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= y; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i + <span class="number">1</span>][j] += a[i][j] / <span class="number">2</span>;</span><br><span class="line">            a[i][j + <span class="number">1</span>] += (a[i][j] + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> a[x][y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    std::cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cin &gt;&gt; t &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">cal</span>(t, x, y) &gt; <span class="built_in">cal</span>(t - <span class="number">1</span>, x, y))</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>XCPC</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Div2 864</title>
    <url>/2023/04/13/Codeforces-div2-864/</url>
    <content><![CDATA[<h1 id="Codeforces-Round-864-Div-2"><a href="#Codeforces-Round-864-Div-2" class="headerlink" title="Codeforces Round #864 (Div. 2)"></a><a href="https://codeforces.com/contest/1797">Codeforces Round #864 (Div. 2)</a></h1><h2 id="D-Li-Hua-and-Tree"><a href="#D-Li-Hua-and-Tree" class="headerlink" title="D. Li Hua and Tree"></a>D. Li Hua and Tree</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>李华有一棵$n$个节点的有根树，根节点为$1$，第$i$个节点有点权$a_i$<br>定义一个非叶子节点的重儿子为其所有儿子里子树大小最大的，若有多个大小相同的则取编号最小的<br>维护$m$次操作<br>操作一：求以$x$为根的子树的点权和<br>操作二：记$x$的父亲为$fa_x$，重儿子为$hs_x$，切断$(x, fa_x)$之间的边，新加一条$(hs_x, fa_x)$之间的边<br>操作二不保证$x$是叶子节点，若$x$是叶子，就忽略该操作<br><span id="more"></span></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>操作二是一个很局部的操作，改变的信息并不多</p>
<p>记$x$的父亲为$f$，重儿子为$v$<br>对于$f$，这些信息在操作二后可能改变：$hs_f，sons_f$<br>对于$v$，这些信息在操作二后可能改变：$hs_v，sons_v， sum_v，sz_v，fa_v$<br>对于$u$，这些信息在操作二后可能改变：$hs_u，sons_u， sum_u，sz_u，fa_u$</p>
<p>每个信息都能以$O(1)$或$O(log)$的复杂度修改<br>只要注意修改顺序即可</p>
<h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PII = std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> PLI = std::pair&lt;ll, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N], sz[N], fa[N], hs[N];</span><br><span class="line">ll sum[N];</span><br><span class="line">std::set&lt;PLI&gt; sons[N];</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz[u] = <span class="number">1</span>, sum[u] = a[u], fa[u] = f;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == f)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, u);</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">        sum[u] += sum[v];</span><br><span class="line">        sons[u].<span class="built_in">insert</span>(&#123;-sz[v], v&#125;);</span><br><span class="line">        <span class="keyword">if</span> (sz[v] &gt; sz[hs[u]] || sz[v] == sz[hs[u]] &amp;&amp; v &lt; hs[u])</span><br><span class="line">            hs[u] = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        std::cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        std::cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        e[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        e[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> op, u;</span><br><span class="line">        std::cin &gt;&gt; op &gt;&gt; u;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">            std::cout &lt;&lt; sum[u] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> f = fa[u];</span><br><span class="line">            <span class="keyword">auto</span> v = hs[u];</span><br><span class="line">            <span class="keyword">if</span> (!v)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            </span><br><span class="line">            sons[f].<span class="built_in">erase</span>(&#123;-sz[u], u&#125;);    </span><br><span class="line"> </span><br><span class="line">            sz[u] -= sz[v];</span><br><span class="line">            sum[u] -= sum[v];</span><br><span class="line">            sons[u].<span class="built_in">erase</span>(&#123;-sz[v], v&#125;);</span><br><span class="line">            hs[u] = sons[u].<span class="built_in">empty</span>() ? <span class="number">0</span> : std::<span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(*sons[u].<span class="built_in">begin</span>());</span><br><span class="line">            fa[u] = v;</span><br><span class="line"> </span><br><span class="line">            sz[v] += sz[u];</span><br><span class="line">            sum[v] += sum[u];</span><br><span class="line">            sons[v].<span class="built_in">insert</span>(&#123;-sz[u], u&#125;);</span><br><span class="line">            hs[v] = std::<span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(*sons[v].<span class="built_in">begin</span>());</span><br><span class="line">            fa[v] = f;</span><br><span class="line"> </span><br><span class="line">            sons[f].<span class="built_in">insert</span>(&#123;-sz[v], v&#125;);</span><br><span class="line">            hs[f] = std::<span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(*sons[f].<span class="built_in">begin</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="E-Li-Hua-and-Array"><a href="#E-Li-Hua-and-Array" class="headerlink" title="E. Li Hua and Array"></a>E. Li Hua and Array</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p>$\phi(n)$是$n$的欧拉函数，值为小于等于$n$的，且与$n$互质的正整数个数<br>李华有一个正整数序列$a$，维护$m$个操作<br>操作一：对区间$[l,r]$进行区间修改，每个$a_i$变成$\phi(a_i)$<br>操作二：对于区间$[l,r]$，回答最小修改几次能使得$a_l=a_{l+1}=\cdots=a_r$，每次修改能选中一个$x\in[l,r]$，把$a_x$变成$\phi(a_x)$，只需要回答最小修改次数，并不用真的修改序列</p>
<h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>考虑另一个类似的问题<br>操作一：对区间$[l,r]$进行区间修改，每个$a_i$变成$\lceil{\frac{a_i}{2}}\rceil$<br>操作二：对于区间$[l,r]$，回答最小修改几次能使得$a_l=a_{l+1}=\cdots=a_r$，每次修改能选中一个$x\in[l,r]$，把$a_x$变成$\lceil{\frac{a_x}{2}}\rceil$，只需要回答最小修改次数，并不用真的修改序列</p>
<p>可以发现一个数经过最多$log$次操作一，都会变成$1$并且之后不再改变<br>考虑建一棵树，对于每个$a_i$，在$a_i$和$\lceil{\frac{a_i}{2}}\rceil$之间建边，$\lceil{\frac{a_i}{2}}\rceil$作为$a_i$的父亲，类似地一层一层往上建，最后一定会变成一个根为$1$的树<br>此时再看操作二，答案是区间$[l,r]$内所有点跳到同一个点所需的最小次数，其实就是这些点到他们的$lca$的距离之和</p>
<p>首先$lca$先用倍增预处理好，然后考虑用线段树解决这个问题</p>
<p>对于操作一，线段树需要维护的有：区间深度之和$sum$<br>维护这个主要是因为当一个数变为$1$后，深度不能再变了<br>同时可以发现这里区间修改并没有使用懒标记，而是直接暴力递归到叶子修改，为什么这样可行呢$?$ 原因放在最后</p>
<p>对于操作二，线段树需要维护的有：区间$lca$，每个区间对操作二的答案$ans$，区间长度$len$<br>区间$lca$与区间$len$不用赘述<br>解释一下下面这个对$ans$的$pushup$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ans[id] = ans[id &lt;&lt; <span class="number">1</span>] + ans[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] + len[id &lt;&lt; <span class="number">1</span>] * (dep[lca[id &lt;&lt; <span class="number">1</span>]] - dep[lca[id]]) + len[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] * (dep[lca[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]] - dep[lca[id]]);</span><br></pre></td></tr></table></figure>
<p>当前答案由四部分组成，左儿子区间的答案，右儿子区间的答案，左儿子区间$lca$到当前区间$lca$的距离乘以左儿子区间$len$，右儿子区间$lca$到当前区间$lca$的距离乘以右儿子区间$len$<br>$query$本质上也是一个类似的$pushup$</p>
<p>由于欧拉函数与除以二再上取整是类似的<br>根据此题$a_i$的值域，一个数最多经历$23$次欧拉函数就会到$1$$($可以自己打表实验$)$<br>所以只要按照上述思路，再套个欧拉函数的壳子即可</p>
<p>为什么可以递归到叶子暴力修改：<br>考虑一个数最多经历$20$多次欧拉函数就会到$1$这个性质<br>再考虑即使每次操作一都修改$[1,n]$这个最长的区间<br>也最多执行$20n$次，<br>然后$sum$就会变成$0$，之后再操作一就会及时$return$回去<br>对于本题也就是$2e6$次，完全可以接受</p>
<h3 id="具体代码-1"><a href="#具体代码-1" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PII = std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">5e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> K = <span class="number">6</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">bool</span> is_prime[M];</span><br><span class="line"><span class="type">int</span> phi[M];</span><br><span class="line"><span class="type">int</span> prime[M];</span><br><span class="line"><span class="type">int</span> dep[M];</span><br><span class="line"><span class="type">int</span> fa[M][K];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_phi</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5e6</span>; i++)</span><br><span class="line">        is_prime[i] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    is_prime[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">5e6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_prime[i])</span><br><span class="line">        &#123;</span><br><span class="line">            prime[++len] = i;</span><br><span class="line">            phi[i] = i - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= len &amp;&amp; i * prime[j] &lt;= <span class="number">5e6</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            is_prime[i * prime[j]] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % prime[j])</span><br><span class="line">                phi[i * prime[j]] = phi[i] * phi[prime[j]];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                phi[i * prime[j]] = phi[i] * prime[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_lca</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">5</span>; ++j)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5e6</span>; ++i)</span><br><span class="line">            fa[i][j] = fa[fa[i][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_lca</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[u] &gt; dep[v])</span><br><span class="line">        std::<span class="built_in">swap</span>(u, v);</span><br><span class="line">    <span class="keyword">if</span> (u == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    <span class="keyword">if</span> (v == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">5</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">if</span> (dep[v] - dep[u] &gt;= (<span class="number">1</span> &lt;&lt; i))</span><br><span class="line">            v = fa[v][i];</span><br><span class="line">    <span class="keyword">if</span> (u == v)</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">5</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">if</span> (fa[u][i] != fa[v][i])</span><br><span class="line">            u = fa[u][i], v = fa[v][i];</span><br><span class="line">    <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Segment_Tree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> lca[N * <span class="number">4</span>], sum[N * <span class="number">4</span>], ans[N * <span class="number">4</span>], len[N * <span class="number">4</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sum[id] = sum[id &lt;&lt; <span class="number">1</span>] + sum[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">        lca[id] = <span class="built_in">get_lca</span>(lca[id &lt;&lt; <span class="number">1</span>], lca[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">        ans[id] = ans[id &lt;&lt; <span class="number">1</span>] + ans[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] + len[id &lt;&lt; <span class="number">1</span>] * (dep[lca[id &lt;&lt; <span class="number">1</span>]] - dep[lca[id]]) + len[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] * (dep[lca[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]] - dep[lca[id]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        len[id] = r - l + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">        &#123;</span><br><span class="line">            lca[id] = a[l];</span><br><span class="line">            sum[id] = dep[a[l]];</span><br><span class="line">            ans[id] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(id &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">        <span class="built_in">build</span>(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!sum[id])</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">        &#123;</span><br><span class="line">            --sum[id];</span><br><span class="line">            lca[id] = fa[lca[id]][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (qr &lt;= mid)</span><br><span class="line">            <span class="built_in">modify</span>(id &lt;&lt; <span class="number">1</span>, l, mid, ql, qr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt;= mid + <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">modify</span>(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">modify</span>(id &lt;&lt; <span class="number">1</span>, l, mid, ql, mid), <span class="built_in">modify</span>(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, qr);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> lca, len, ans;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">node <span class="title">query</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == ql &amp;&amp; r == qr)</span><br><span class="line">            <span class="keyword">return</span> &#123;lca[id], len[id], ans[id]&#125;;</span><br><span class="line">        node L = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, R = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, res = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (qr &lt;= mid)</span><br><span class="line">            L = <span class="built_in">query</span>(id &lt;&lt; <span class="number">1</span>, l, mid, ql, qr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt;= mid + <span class="number">1</span>)</span><br><span class="line">            R = <span class="built_in">query</span>(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            L = <span class="built_in">query</span>(id &lt;&lt; <span class="number">1</span>, l, mid, ql, mid), R = <span class="built_in">query</span>(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, qr);</span><br><span class="line">        res.lca = <span class="built_in">get_lca</span>(L.lca, R.lca);</span><br><span class="line">        res.len = L.len + R.len;</span><br><span class="line">        <span class="keyword">if</span> (L.lca)</span><br><span class="line">            res.ans += L.ans + L.len * (dep[L.lca] - dep[res.lca]);</span><br><span class="line">        <span class="keyword">if</span> (R.lca)</span><br><span class="line">            res.ans += R.ans + R.len * (dep[R.lca] - dep[res.lca]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Segment_Tree tr;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init_phi</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">5e6</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        fa[i][<span class="number">0</span>] = phi[i];</span><br><span class="line">        dep[i] = dep[phi[i]] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">init_lca</span>();</span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        std::cin &gt;&gt; a[i];</span><br><span class="line">    tr.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> op, l, r;</span><br><span class="line">        std::cin &gt;&gt; op &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">            tr.<span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">1</span>, n, l, r);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            std::cout &lt;&lt; tr.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, l, r).ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// std::cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>XCPC</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Div4 849</title>
    <url>/2023/04/10/Codeforces-div4-849/</url>
    <content><![CDATA[<h1 id="Codeforces-Round-849-Div-4"><a href="#Codeforces-Round-849-Div-4" class="headerlink" title="Codeforces Round #849 (Div. 4)"></a><a href="https://codeforces.com/contest/1791">Codeforces Round #849 (Div. 4)</a></h1><h2 id="E-Negatives-and-Positives"><a href="#E-Negatives-and-Positives" class="headerlink" title="E. Negatives and Positives"></a>E. Negatives and Positives</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定一个长度为$n$的数组$a$，问经历任意次下列操作后，数组中所有数之和的最大可能值是多少<br>每次操作可选定一个$i,1\leq i\leq n-1$，使得$a_i=-a_i,a_{i+1}=-a_{i+1}$<br><span id="more"></span></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>典中典的$dp$模型<br>$dp[i][j]$表示考虑前$i$个数，$j$为$1$时末尾两个数取反，$j$为$0$时末尾两个数没有取反<br>不过官方正解是思维解法，类似于奇偶位置考虑那种</p>
<h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">E</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="function">std::vector&lt;LL&gt; <span class="title">a</span><span class="params">(n + <span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        std::cin &gt;&gt; a[i];</span><br><span class="line">    std::vector&lt;std::vector&lt;LL&gt;&gt; <span class="built_in">dp</span>(n + <span class="number">10</span>, std::<span class="built_in">vector</span>&lt;LL&gt;(<span class="number">5</span>, <span class="number">0</span>));</span><br><span class="line">    dp[<span class="number">2</span>][<span class="number">0</span>] = a[<span class="number">1</span>] + a[<span class="number">2</span>];</span><br><span class="line">    dp[<span class="number">2</span>][<span class="number">1</span>] = -a[<span class="number">1</span>] - a[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = std::<span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">0</span>] + a[i], dp[i - <span class="number">1</span>][<span class="number">1</span>] + a[i]);</span><br><span class="line">        dp[i][<span class="number">1</span>] = std::<span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">0</span>] - a[i] - <span class="number">2</span> * a[i - <span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] - a[i] + <span class="number">2</span> * a[i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::<span class="built_in">max</span>(dp[n][<span class="number">0</span>], dp[n][<span class="number">1</span>]) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    std::cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">        <span class="built_in">E</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="F-Range-Update-Point-Query"><a href="#F-Range-Update-Point-Query" class="headerlink" title="F. Range Update Point Query"></a>F. Range Update Point Query</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定长度为$n$的数组$a$，处理$q$个询问<br>询问类型有两种<br>第一种操作是给定$l，r$使得所有$a_i，l\leq i\leq r$变成其本身的所有数位之和<br>第二种操作是给定$x$，输出$a_x$</p>
<h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>和前几天牛客寒假基础训练营的第一场的$G$题有异曲同工处<br>那道题是一个收敛到$100$的性质，而这道题可以发现<br>任何一个数字在经历几次第一种操作后都会快速变小，一直收敛到个位数然后不管怎么操作都不变<br>$a_i$最大才$10^9$，也会很快收敛到个位数<br>所以一个简单的想法就是利用树状数组或者线段树之类的东西去维护每个数执行操作一的次数<br>当遇到操作二时直接按照记录的次数来暴力执行操作一即可(前面已经说明暴力次数是常数级别)</p>
<h3 id="具体代码-1"><a href="#具体代码-1" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, q;</span><br><span class="line"><span class="type">int</span> a[N], c[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">digit_sum</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x)</span><br><span class="line">    &#123;</span><br><span class="line">        res += x % <span class="number">10</span>;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; x &lt;= n; x += x &amp; -x)</span><br><span class="line">        c[x] += k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; x; x -= x &amp; -x)</span><br><span class="line">        res += c[x];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">F</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        c[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        std::cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> op;</span><br><span class="line">        std::cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> l, r;</span><br><span class="line">            std::cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">            <span class="built_in">add</span>(l, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (r + <span class="number">1</span> &lt;= n)</span><br><span class="line">                <span class="built_in">add</span>(r + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            std::cin &gt;&gt; x;</span><br><span class="line">            <span class="type">int</span> times = <span class="built_in">query</span>(x);</span><br><span class="line">            <span class="type">int</span> val = a[x];</span><br><span class="line">            <span class="keyword">while</span> (times)</span><br><span class="line">            &#123;</span><br><span class="line">                val = <span class="built_in">digit_sum</span>(val);</span><br><span class="line">                --times;</span><br><span class="line">                <span class="keyword">if</span> (val &lt; <span class="number">10</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            std::cout &lt;&lt; val &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    std::cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">        <span class="built_in">F</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="G1-Teleporters-Easy-Version"><a href="#G1-Teleporters-Easy-Version" class="headerlink" title="G1. Teleporters (Easy Version)"></a>G1. Teleporters (Easy Version)</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h3><p>数轴上有$0，1，2，3，\cdots，n，n+1$这些点，初始你在$0$这个点，并且有$c$枚金币<br>除了$0$和$n+1$这两个点，每个点上都有一个传送门，使用传送门的花费是$a_i$枚金币，$1\leq i\leq n$<br>你可执行三种操作：<br>$1.$花费$1$金币，向右一格<br>$2.$花费$1$金币，向左一格<br>$3.$使用传送门，花费相应金币，回到$0$点，每个传送门最多用一次<br>问最多可以用多少次传送门</p>
<h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>每次使用传送门都会回到$0$点，所以使用任意一个传送门的代价是$a_i+i$(向右走$i$格+使用传送门)<br>那么排序，做个前缀和二分即可(其实$G1$排完序直接遍历用金币减就行，这里是为了和$G2$衔接)</p>
<h3 id="具体代码-2"><a href="#具体代码-2" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">G1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, c;</span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; c;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        std::cin &gt;&gt; a[i], a[i] = a[i] + i;</span><br><span class="line">    std::<span class="built_in">sort</span>(a.<span class="built_in">begin</span>() + <span class="number">1</span>, a.<span class="built_in">begin</span>() + n + <span class="number">1</span>);</span><br><span class="line">    <span class="function">std::vector&lt;LL&gt; <span class="title">s</span><span class="params">(n + <span class="number">10</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        s[i] = s[i - <span class="number">1</span>] + (LL)a[i];</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = n;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (s[mid] &lt;= c)</span><br><span class="line">            l = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; l &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    std::cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">        <span class="built_in">G1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="G2-Teleporters-Hard-Version"><a href="#G2-Teleporters-Hard-Version" class="headerlink" title="G2. Teleporters (Hard Version)"></a>G2. Teleporters (Hard Version)</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h3><p>数轴上有$0，1，2，3，\cdots，n，n+1$这些点，初始你在$0$这个点，并且有$c$枚金币<br>除了$0$和$n+1$这两个点，每个点上都有一个传送门，使用传送门的花费是$a_i$枚金币，$1\leq i\leq n$<br>你可执行三种操作：<br>$1.$花费$1$金币，向右一格<br>$2.$花费$1$金币，向左一格<br>$3.$使用传送门，花费相应金币，回到$0$点或$n+1$点，每个传送门最多用一次<br>问最多可以用多少次传送门</p>
<h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p>题意唯一的区别就是传送门可以传去$n+1$点<br>沿着$G1$的想法，容易错误地想成把处理$a_i$的地方改成</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">a[i] = std::<span class="built_in">min</span>(a[i] + i, a[i] + n + <span class="number">1</span> - i);</span><br></pre></td></tr></table></figure>
<p>然后一切照旧即可<br>这样的错误原因是由于初始在$0$号点，所以一定至少有一个点要取$a_i+i$<br>而上面那样粗暴的修改没有考虑到这种情况<br>但解决方法还是很简单，暴力地去枚举哪一个点作为第一次使用传送门的点<br>剩下的点就几乎是照旧，但由于第一次选择的点对前缀和可能有贡献，需要简单地分类讨论，见注释</p>
<h3 id="具体代码-3"><a href="#具体代码-3" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">G2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, c;</span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; c;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(n + <span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        std::cin &gt;&gt; a[i], b[i] = std::<span class="built_in">min</span>(a[i] + i, a[i] + n + <span class="number">1</span> - i);</span><br><span class="line">    std::<span class="built_in">sort</span>(b.<span class="built_in">begin</span>() + <span class="number">1</span>, b.<span class="built_in">begin</span>() + n + <span class="number">1</span>);</span><br><span class="line">    <span class="function">std::vector&lt;LL&gt; <span class="title">s</span><span class="params">(n + <span class="number">10</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        s[i] = s[i - <span class="number">1</span>] + (LL)b[i];</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="comment">// 这层循环枚举哪一个点作为第一次从左边出发用传送门的点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] + i &gt; c)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> t = std::<span class="built_in">min</span>(a[i] + i, a[i] + n + <span class="number">1</span> - i); <span class="comment">// t是枚举的这个点在前缀和中的贡献</span></span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (s[mid] &lt;= c - (a[i] + i))</span><br><span class="line">                l = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b[l] &lt; t) <span class="comment">// 说明枚举的这个点没有影响到二分分界</span></span><br><span class="line">            ans = std::<span class="built_in">max</span>(ans, l + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">// 否则补上这个点的贡献再二分一次</span></span><br><span class="line">        &#123;</span><br><span class="line">            l = <span class="number">0</span>, r = n;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (s[mid] &lt;= c - (a[i] + i) + t)</span><br><span class="line">                    l = mid;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = std::<span class="built_in">max</span>(ans, l); <span class="comment">//注意此时不用加一，因为枚举的这个点已经在二分的左半边</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    std::cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">        <span class="built_in">G2</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>XCPC</tag>
      </tags>
  </entry>
  <entry>
    <title>范式理论</title>
    <url>/2023/05/06/database-paradigm/</url>
    <content><![CDATA[<h2 id="求属性集闭包"><a href="#求属性集闭包" class="headerlink" title="求属性集闭包"></a>求属性集闭包</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">result = α</span><br><span class="line">repeat</span><br><span class="line">for each β → γ in F </span><br><span class="line">        if β ⊆ result then result = result ∪ γ</span><br><span class="line">until(result不再改变)</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="求函数依赖集的闭包"><a href="#求函数依赖集的闭包" class="headerlink" title="求函数依赖集的闭包"></a>求函数依赖集的闭包</h2><p>对于任意的$\gamma \in R$，找出闭包$\gamma ^+$，并且对于任意的$S\subseteq \gamma ^+$，输出一个函数依赖$\gamma \to S$</p>
<h2 id="求候选键"><a href="#求候选键" class="headerlink" title="求候选键"></a>求候选键</h2><p>给定关系模式$R(U,F)$，将$R$的所有属性分为$L,B,N$三类<br>$L$表示只在函数依赖左边出现<br>$B$表示在函数依赖两边都有出现<br>$N$表示未在函数依赖中出现<br>令$X=L\cup N$，若$X^+$包含$U$，则$X$是唯一候选键<br>否则，从$B$中任取一个属性$A$，若$XA^+$包含$U$，则$XA$是一个候选键，然后调换$B$中属性反复尝试<br>如果已经找到全部候选键，结束<br>否则，从$B$中任取两个属性，三个属性$\cdots$，反复尝试</p>
<h2 id="求正则覆盖-F-c"><a href="#求正则覆盖-F-c" class="headerlink" title="求正则覆盖$F_c$"></a>求正则覆盖$F_c$</h2><p>小$tips:$正则覆盖至少存在一个但不唯一<br>$(1)$右部最小化：用分解法则使$F$中的任何一个函数依赖的右边仅含一个属性<br>$(2)$除本求包：从第一个函数依赖$X\to Y$开始，先将其从$F$中去除，然后在剩下的函数依赖中求$X^+$，若$X^+$包含$Y$，就说明$X\to Y$确实冗余，否则保留$X\to Y$<br>$(3)$左部最小化：尝试去掉左侧无关属性，如$XY\to A$，若要判断$Y$是冗余属性，则计算$X^+$，若$X^+$包含$A$，说明$Y$是无关属性，去掉它<br>$(4)$如果第三步有修改，那要退回到第二步重新做<br>$(5)$把左部相同的函数依赖合并</p>
<h2 id="3NF-分解"><a href="#3NF-分解" class="headerlink" title="$3NF$分解"></a>$3NF$分解</h2><p>$(1)$求出$F_c$<br>$(2)$$F_c$中每个$X\to Y$构成一个模式$XY$<br>$(3)$如果每个模式都不包含$R$的候选键，那么把候选键作为一个模式放入模式集中<br>$(4)$如果分解完后，存在某个$R_i\subseteq R_j$，舍掉$R_i$</p>
<h2 id="判断分解是否保持函数依赖"><a href="#判断分解是否保持函数依赖" class="headerlink" title="判断分解是否保持函数依赖"></a>判断分解是否保持函数依赖</h2><p>对$F$中每个$\alpha \to \beta$做以下过程：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">result = α</span><br><span class="line">repeat</span><br><span class="line">for each 分解后的 Ri</span><br><span class="line">    t = (result ∩ Ri)的闭包 ∩ Ri</span><br><span class="line">    result = result ∪ t</span><br><span class="line">until(result不再改变)</span><br></pre></td></tr></table></figure>
<p>若$result$包含$\beta$所有属性，则该依赖被保持<br>若每个依赖都被保持，则该分解保持依赖</p>
<h2 id="求函数依赖-F-在某个属性子集上的投影"><a href="#求函数依赖-F-在某个属性子集上的投影" class="headerlink" title="求函数依赖$F$在某个属性子集上的投影"></a>求函数依赖$F$在某个属性子集上的投影</h2><p>列出属性子集(设属性子集里有$n$个属性)里单属性、任意组合双属性、任意组合三属性、$\cdots $、$直到任意组合(n-1)属性$在原$F$上的所有闭包<br>把右部的平凡属性、不在属性子集内的属性去掉<br>例：关系模型$R(A,B,C,D),F=\lbrace AB\to C, D\to B\rbrace$，那么$F$在模式$(ACD)$上的投影$\pi_{ACD}(F)$是什么<br>$A^+=A$<br>$C^+=C$<br>$D^+=DB$<br>$AC^+=AC$<br>$AD^+=ABCD$<br>$CD^+=BCD$<br>在草稿上先把$B$划掉<br>再把平凡属性划掉<br>最后划的只剩$AD^+=C$<br>那么投影$\pi_{ACD}(F)=\lbrace AD\to C\rbrace$</p>
<h2 id="BCNF-分解"><a href="#BCNF-分解" class="headerlink" title="$BCNF$分解"></a>$BCNF$分解</h2><p>如果某个$R_i$(原$F$在$R_i$上的投影)中存在一个非平凡函数依赖$\alpha \to \beta$的左部$\alpha$不是超键，则将$R_i$分解成$(\alpha \beta)$和$(R_i-\beta)$<br>一直这样找不符合的函数依赖，再分解<br>直到分解符合$BCNF$要求</p>
]]></content>
      <tags>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>2023年上海市大学生程序设计竞赛-四月赛</title>
    <url>/2023/04/29/monthly-2023-4/</url>
    <content><![CDATA[<h1 id="2023年上海市大学生程序设计竞赛-四月赛"><a href="#2023年上海市大学生程序设计竞赛-四月赛" class="headerlink" title="2023年上海市大学生程序设计竞赛-四月赛"></a><a href="https://acm.ecnu.edu.cn/contest/655/">2023年上海市大学生程序设计竞赛-四月赛</a></h1><h2 id="A-宝石划分"><a href="#A-宝石划分" class="headerlink" title="A. 宝石划分"></a>A. 宝石划分</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>海盗们获得了$n$颗相同的宝石(宝石无法切割)<br>船上共$m$个海盗，他们希望能够完美地瓜分这些宝石，即每个人获得的宝石数量相同，但是目前可能无法完美地瓜分<br>他们商量：如果在座的各位无法完美地瓜分这些宝石，就随机把一个人扔下船，直到可以让每个海盗分到的宝石一样多为止<br>求最终每个海盗获得的宝石数量<br><span id="more"></span></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>如果$n\leq m$，肯定是扔到人和宝石一样多，答案为$1$<br>否则，要扔到$n$的所有约数中最靠近$m$且小于等于$m$的那一个约数</p>
<h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> ll MOD = <span class="number">998244353</span>;</span><br><span class="line">std::vector&lt;ll&gt; res;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_divisors</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n / i; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (i != n / i)</span><br><span class="line">                res.<span class="built_in">push_back</span>(n / i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::<span class="built_in">sort</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n, m;</span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= m)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">get_divisors</span>(n);</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = res.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = (l + r + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (res[mid] &lt;= m)</span><br><span class="line">                l = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; n / res[l] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// std::cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-CHAO！OP！"><a href="#B-CHAO！OP！" class="headerlink" title="B. CHAO！OP！"></a>B. CHAO！OP！</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p>济云星这个星球上的语言是摩斯电码，对应$26$个大写字母<br>现在有一篇文章<br>已知文章是人写的，也是给人看的，那么它就不应该出现$OP$<br>现在将这篇文章的摩斯电码给你，请你算一算，这段电码有多少种划分方案，使得最后的文章不存在子串$OP$<br>请输出划分的方案数，对$10^9+7$取模<br>字符串中$1$代表$-$,$0$代表$\cdot$</p>
<h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>计数$dp$<br>考虑对状态进行划分，最后一个划分出的字符是否是$O$<br>$dp[n][0/1]$表示对于前$n$位，最后一个字符不是$/$是$O$的合法方案有多少种<br>转移式子很简单</p>
<h3 id="具体代码-1"><a href="#具体代码-1" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> ll MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">2</span>;</span><br><span class="line">std::map&lt;std::string, <span class="type">char</span>&gt; mp;</span><br><span class="line">ll dp[N][M];</span><br><span class="line"><span class="function">ll <span class="title">add</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = a + b;</span><br><span class="line">    <span class="keyword">if</span> (res &gt; MOD)</span><br><span class="line">        res -= MOD;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mp[<span class="string">&quot;01&quot;</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    mp[<span class="string">&quot;1000&quot;</span>] = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">    mp[<span class="string">&quot;1010&quot;</span>] = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">    mp[<span class="string">&quot;100&quot;</span>] = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">    mp[<span class="string">&quot;0&quot;</span>] = <span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">    mp[<span class="string">&quot;0010&quot;</span>] = <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">    mp[<span class="string">&quot;110&quot;</span>] = <span class="string">&#x27;G&#x27;</span>;</span><br><span class="line">    mp[<span class="string">&quot;0000&quot;</span>] = <span class="string">&#x27;H&#x27;</span>;</span><br><span class="line">    mp[<span class="string">&quot;00&quot;</span>] = <span class="string">&#x27;I&#x27;</span>;</span><br><span class="line">    mp[<span class="string">&quot;0111&quot;</span>] = <span class="string">&#x27;J&#x27;</span>;</span><br><span class="line">    mp[<span class="string">&quot;101&quot;</span>] = <span class="string">&#x27;K&#x27;</span>;</span><br><span class="line">    mp[<span class="string">&quot;0100&quot;</span>] = <span class="string">&#x27;L&#x27;</span>;</span><br><span class="line">    mp[<span class="string">&quot;11&quot;</span>] = <span class="string">&#x27;M&#x27;</span>;</span><br><span class="line">    mp[<span class="string">&quot;10&quot;</span>] = <span class="string">&#x27;N&#x27;</span>;</span><br><span class="line">    mp[<span class="string">&quot;111&quot;</span>] = <span class="string">&#x27;O&#x27;</span>;</span><br><span class="line">    mp[<span class="string">&quot;0110&quot;</span>] = <span class="string">&#x27;P&#x27;</span>;</span><br><span class="line">    mp[<span class="string">&quot;1101&quot;</span>] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">    mp[<span class="string">&quot;010&quot;</span>] = <span class="string">&#x27;R&#x27;</span>;</span><br><span class="line">    mp[<span class="string">&quot;000&quot;</span>] = <span class="string">&#x27;S&#x27;</span>;</span><br><span class="line">    mp[<span class="string">&quot;1&quot;</span>] = <span class="string">&#x27;T&#x27;</span>;</span><br><span class="line">    mp[<span class="string">&quot;001&quot;</span>] = <span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">    mp[<span class="string">&quot;0001&quot;</span>] = <span class="string">&#x27;V&#x27;</span>;</span><br><span class="line">    mp[<span class="string">&quot;011&quot;</span>] = <span class="string">&#x27;W&#x27;</span>;</span><br><span class="line">    mp[<span class="string">&quot;1001&quot;</span>] = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">    mp[<span class="string">&quot;1011&quot;</span>] = <span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line">    mp[<span class="string">&quot;1100&quot;</span>] = <span class="string">&#x27;Z&#x27;</span>;</span><br><span class="line">    std::string str;</span><br><span class="line">    std::cin &gt;&gt; str;</span><br><span class="line">    <span class="type">int</span> n = str.<span class="built_in">length</span>();</span><br><span class="line">    str = <span class="string">&quot;?&quot;</span> + str;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> len = <span class="number">1</span>; len &lt;= std::<span class="built_in">min</span>(i, <span class="number">4</span>); ++len)</span><br><span class="line">        &#123;</span><br><span class="line">            std::string tmp = std::<span class="built_in">string</span>(str.<span class="built_in">begin</span>() + <span class="number">1</span> + i - len, str.<span class="built_in">begin</span>() + <span class="number">1</span> + i);</span><br><span class="line">            <span class="keyword">if</span> (mp.<span class="built_in">count</span>(tmp))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">char</span> c = mp[tmp];</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">&#x27;O&#x27;</span>)</span><br><span class="line">                    dp[i][<span class="number">1</span>] = <span class="built_in">add</span>(dp[i][<span class="number">1</span>], <span class="built_in">add</span>(dp[i - len][<span class="number">0</span>], dp[i - len][<span class="number">1</span>]));</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;P&#x27;</span>)</span><br><span class="line">                    dp[i][<span class="number">0</span>] = <span class="built_in">add</span>(dp[i][<span class="number">0</span>], dp[i - len][<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i][<span class="number">0</span>] = <span class="built_in">add</span>(dp[i][<span class="number">0</span>], <span class="built_in">add</span>(dp[i - len][<span class="number">0</span>], dp[i - len][<span class="number">1</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">add</span>(dp[n][<span class="number">0</span>], dp[n][<span class="number">1</span>]) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// std::cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-dataHacker"><a href="#C-dataHacker" class="headerlink" title="C. dataHacker"></a>C. dataHacker</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h3><p>你是一名黑客，你的目标是破解一个神秘组织的数据库<br>你不能直接访问他们的数据，因为他们使用了一种特殊的加密算法<br>你只能询问指定两个位置的校验码，也就是得到两个不同位置的数据块的按位与运算的结果<br>总共$n$个数据块，每个数据块由$[0,1023]$范围内的整数构成<br>你需要在有限的$2\times n+220$次询问（包括回答）内，还原出他们的所有数据块<br>下面是交互流程<br>首先输入一个整数$n$<br>你的程序有两种输出询问的方式<br>第一种：<br>$0\ p1\ p2$<br>询问$p1,p2$两个位置的“与”的结果<br>其中$p1,p2$是编号从$0$开始的两个不同的位置<br>$p1\neq p2$并且$0\leq p1,p2\leq n-1$<br>第二种：<br>$1\ a0\ a1\ a2\cdots$<br>$1$后面连续$n$个整数，代表数组内容<br>如果数组内容正确，结果会返回AC<br>数组保证随机生成</p>
<h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>每个元素的值是所有和其有关的询问的结果的”或”<br>因为数据是随机生成，大概率有两个值的”或”结果是全$1$<br>利用$220$次询问找到这样的两个值<br>然后用剩下$2n$次询问去确定剩下的值</p>
<h3 id="具体代码-2"><a href="#具体代码-2" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> ans[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b)</span><br><span class="line">        std::<span class="built_in">swap</span>(a, b);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;0 &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line">    <span class="type">int</span> res;</span><br><span class="line">    std::cin &gt;&gt; res;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::mt19937 <span class="title">rng</span><span class="params">(std::random_device&#123;&#125;())</span></span>;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> o = <span class="number">220</span>;</span><br><span class="line">    <span class="keyword">while</span> (o)</span><br><span class="line">    &#123;</span><br><span class="line">        --o;</span><br><span class="line">        <span class="type">int</span> a = <span class="built_in">rng</span>() % n, b = <span class="built_in">rng</span>() % n;</span><br><span class="line">        <span class="keyword">if</span> (a == b)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">ask</span>(a, b);</span><br><span class="line">        ans[a] |= res;</span><br><span class="line">        ans[b] |= res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">-1</span>, b = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">            <span class="keyword">if</span> ((ans[i] | ans[j]) == <span class="number">1023</span>)</span><br><span class="line">                a = i, b = j;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != a &amp;&amp; i != b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> res = <span class="built_in">ask</span>(i, a);</span><br><span class="line">            ans[i] |= res;</span><br><span class="line">            ans[a] |= res;</span><br><span class="line">            res = <span class="built_in">ask</span>(i, b);</span><br><span class="line">            ans[i] |= res;</span><br><span class="line">            ans[b] |= res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; ans[i];</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// std::cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D-单词游戏"><a href="#D-单词游戏" class="headerlink" title="D. 单词游戏"></a>D. 单词游戏</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定$n$个字符串<br>现在要选至少一个字符串(可以重复选择同一个字符串)来拼接形成回文串<br>选择每个字符串$s_i$都有对应的代价$c_i$<br>问构造出回文串的最小代价</p>
<h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p>考虑最后构造出的回文串长什么样子<br>如果由单一串构成，那很简单<br>如果由多个不同串构成，那么选定第一个串，其实最后一个串的选择并不多<br>并且选了一个可能的最后一个串后，可以发现问题变成了一个子问题，要么已经回文，要么还是有一个串的部分没有匹配<br>考虑状态$dis[i][0/1][j]$表示未能完全匹配的串为第$i$个串，$0/1$表示前$/$后缀，长度为$j$，此时最小的$cost$为多少<br>然后跑最短路<br>结点数只有$100\times 2\times 60=12000$个<br>和蓝书上的《装满的油箱》有点像</p>
<h3 id="具体代码-3"><a href="#具体代码-3" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> ll N = <span class="number">105</span>;</span><br><span class="line"><span class="type">const</span> ll K = <span class="number">2</span>;</span><br><span class="line"><span class="type">const</span> ll M = <span class="number">65</span>;</span><br><span class="line">ll n;</span><br><span class="line">std::string s[N];</span><br><span class="line">ll c[N];</span><br><span class="line"><span class="type">bool</span> ed[N][K][M];</span><br><span class="line">ll dis[N][K][M];</span><br><span class="line"><span class="type">bool</span> vis[N][K][M];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(std::string t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">0</span>; i &lt; t.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        <span class="keyword">if</span> (t[i] != t[t.<span class="built_in">size</span>() - <span class="number">1</span> - i])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    ll i, k, j;</span><br><span class="line">    ll cost;</span><br><span class="line">    <span class="built_in">node</span> (ll a, ll b, ll c, ll d)</span><br><span class="line">    &#123;</span><br><span class="line">        i = a, k = b, j = c, cost = d;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span> &lt; (node a, node b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.cost &gt; b.cost;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">node <span class="title">calc</span><span class="params">(node u, ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::string t;</span><br><span class="line">    <span class="keyword">if</span> (u.k == <span class="number">0</span>)</span><br><span class="line">        t = std::<span class="built_in">string</span>(s[u.i].<span class="built_in">begin</span>(), s[u.i].<span class="built_in">begin</span>() + u.j);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        t = std::<span class="built_in">string</span>(s[u.i].<span class="built_in">end</span>() - u.j, s[u.i].<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">if</span> (u.k == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ll cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">0</span>, j = t.<span class="built_in">size</span>() - <span class="number">1</span>; i &lt; s[x].<span class="built_in">size</span>() &amp;&amp; j &gt;= <span class="number">0</span>; ++i, --j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[x][i] == t[j])</span><br><span class="line">                ++cnt;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt != std::<span class="built_in">min</span>(t.<span class="built_in">size</span>(), s[x].<span class="built_in">size</span>()))</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">node</span>(<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span> (cnt == t.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">node</span>(x, <span class="number">1</span>, s[x].<span class="built_in">size</span>() - cnt, u.cost + c[x]);</span><br><span class="line">        <span class="keyword">if</span> (cnt == s[x].<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">node</span>(u.i, u.k, u.j - cnt, u.cost + c[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ll cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">0</span>, j = s[x].<span class="built_in">size</span>() - <span class="number">1</span>; i &lt; t.<span class="built_in">size</span>() &amp;&amp; j &gt;= <span class="number">0</span>; ++i, --j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[x][j] == t[i])</span><br><span class="line">                ++cnt;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt != std::<span class="built_in">min</span>(t.<span class="built_in">size</span>(), s[x].<span class="built_in">size</span>()))</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">node</span>(<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span> (cnt == t.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">node</span>(x, <span class="number">0</span>, s[x].<span class="built_in">size</span>() - cnt, u.cost + c[x]);</span><br><span class="line">        <span class="keyword">if</span> (cnt == s[x].<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">node</span>(u.i, u.k, u.j - cnt, u.cost + c[x]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    std::priority_queue&lt;node&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="built_in">node</span>(i, <span class="number">0</span>, s[i].<span class="built_in">size</span>(), c[i]));</span><br><span class="line">        dis[i][<span class="number">0</span>][s[i].<span class="built_in">size</span>()] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> u = q.<span class="built_in">top</span>();</span><br><span class="line">        <span class="keyword">auto</span> [i, k, j, cost] = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (ed[i][k][j])</span><br><span class="line">            <span class="keyword">return</span> cost;</span><br><span class="line">        <span class="keyword">if</span> (vis[i][k][j])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        vis[i][k][j] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (ll x = <span class="number">1</span>; x &lt;= n; ++x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> v = <span class="built_in">calc</span>(u, x);</span><br><span class="line">            <span class="keyword">if</span> (v.cost != <span class="number">-1</span> &amp;&amp; dis[v.i][v.k][v.j] &gt; v.cost)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v.i][v.k][v.j] = v.cost;</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        std::cin &gt;&gt; s[i] &gt;&gt; c[i];</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (ll k = <span class="number">0</span>; k &lt;= <span class="number">1</span>; ++k)</span><br><span class="line">            <span class="keyword">for</span> (ll j = <span class="number">0</span>; j &lt;= s[i].<span class="built_in">size</span>(); ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                std::string t;</span><br><span class="line">                <span class="keyword">if</span> (k == <span class="number">0</span>)</span><br><span class="line">                    t = std::<span class="built_in">string</span>(s[i].<span class="built_in">begin</span>(), s[i].<span class="built_in">begin</span>() + j);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    t = std::<span class="built_in">string</span>(s[i].<span class="built_in">end</span>() - j, s[i].<span class="built_in">end</span>());</span><br><span class="line">                ed[i][k][j] = <span class="built_in">check</span>(t);</span><br><span class="line">            &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">dijkstra</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ll T = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// std::cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="E-画画的贝贝"><a href="#E-画画的贝贝" class="headerlink" title="E. 画画的贝贝"></a>E. 画画的贝贝</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定一面颜色初始为$1$的长度为$n$的墙<br>进行$m$次操作<br>每次操作将$[l,r]$区间内的墙涂成颜色$c$(会覆盖原有颜色)<br>在每次操作后，输出当前整面墙壁上的颜色种类总数</p>
<h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><p>珂朵莉树<br>数据没有保证随机，复杂度有点玄学</p>
<h3 id="具体代码-4"><a href="#具体代码-4" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    ll l, r;</span><br><span class="line">    ll c;</span><br><span class="line">    <span class="built_in">Node</span>(ll x = <span class="number">0</span>, ll y = <span class="number">0</span>, ll z = <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        l = x, r = y, c = z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(Node a, Node b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.l &lt; b.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">std::set&lt;Node&gt; S;</span><br><span class="line"><span class="keyword">using</span> S_IT = std::set&lt;Node&gt;::iterator;</span><br><span class="line">ll n, m;</span><br><span class="line">ll cnt[N];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function">S_IT <span class="title">split</span><span class="params">(<span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    S_IT it = S.<span class="built_in">lower_bound</span>(<span class="built_in">Node</span>(pos, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">if</span> (it != S.<span class="built_in">end</span>() &amp;&amp; it-&gt;l == pos)</span><br><span class="line">        <span class="keyword">return</span> it;</span><br><span class="line">    --it;</span><br><span class="line">    ll l = it-&gt;l, r = it-&gt;r, c = it-&gt;c;</span><br><span class="line">    S.<span class="built_in">erase</span>(it);</span><br><span class="line">    S.<span class="built_in">insert</span>(<span class="built_in">Node</span>(l, pos - <span class="number">1</span>, c));</span><br><span class="line">    <span class="keyword">return</span> S.<span class="built_in">insert</span>((<span class="built_in">Node</span>(pos, r, c))).first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">assign</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    S_IT it2 = <span class="built_in">split</span>(r + <span class="number">1</span>), it1 = <span class="built_in">split</span>(l);</span><br><span class="line">    <span class="keyword">for</span> (S_IT it = it1; it != it2; ++it)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt[it-&gt;c] -= (it-&gt;r - it-&gt;l + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (cnt[it-&gt;c] == <span class="number">0</span>)</span><br><span class="line">            --ans;</span><br><span class="line">    &#125;</span><br><span class="line">    S.<span class="built_in">erase</span>(it1, it2);</span><br><span class="line">    S.<span class="built_in">insert</span>(<span class="built_in">Node</span>(l, r, c));</span><br><span class="line">    <span class="keyword">if</span> (cnt[c] == <span class="number">0</span>)</span><br><span class="line">        ++ans;</span><br><span class="line">    cnt[c] += r - l + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    S.<span class="built_in">insert</span>(<span class="built_in">Node</span>(<span class="number">1</span>, n, <span class="number">1</span>));</span><br><span class="line">    S.<span class="built_in">insert</span>(<span class="built_in">Node</span>(n + <span class="number">1</span>, n + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    cnt[<span class="number">1</span>] = n;</span><br><span class="line">    ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ll l, r, c;</span><br><span class="line">        std::cin &gt;&gt; l &gt;&gt; r &gt;&gt; c;</span><br><span class="line">        <span class="built_in">assign</span>(l, r, c);</span><br><span class="line">        std::cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// std::cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>XCPC</tag>
      </tags>
  </entry>
  <entry>
    <title>简单对抗搜索博弈</title>
    <url>/2023/04/11/game-theory-blog/</url>
    <content><![CDATA[<h2 id="组合游戏概念"><a href="#组合游戏概念" class="headerlink" title="组合游戏概念"></a>组合游戏概念</h2><p>$1$.两个玩家<br>$2$.一个状态集合<br>$3$.游戏规则是指明玩家在一个状态下可以移动到哪些其他状态<br>$4$.玩家轮流进行移动<br>$5$.若当前处于某个状态，玩家根据规则无法移动，则游戏结束<br>$6$.游戏会在有限步以内结束(有向无环$DAG$)</p>
<h2 id="P-态和-N-态"><a href="#P-态和-N-态" class="headerlink" title="$P$态和$N$态"></a>$P$态和$N$态</h2><p>$P$态：走到这个状态的玩家赢的状态<br>$N$态：从这个状态走的玩家赢的状态<br>至少能走到一个$P$态的状态是$N$态<br>只能走到$N$态的状态是$P$态<br>正常规则：终态是$P$态(无法走的人输)<br>反常规则：终态是$N$态(无法走的人赢)</p>
<span id="more"></span>
<h2 id="P-态和-N-态应用"><a href="#P-态和-N-态应用" class="headerlink" title="$P$态和$N$态应用"></a>$P$态和$N$态应用</h2><p>由$P$态和$N$态的性质可以做出大部分简单的博弈题<br>对小数据题可以记忆化搜索所有状态<br>对大数据题可以先打表小数据，看看有无规律</p>
<h2 id="例题：-Digital-Deletions"><a href="#例题：-Digital-Deletions" class="headerlink" title="例题：$Digital\ Deletions$"></a>例题：$Digital\ Deletions$</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>有一个只含数字$0$到$9$的串$s$，两个人玩游戏，每次当前玩家可以把某一位改为比当前位更小的数字，或者删除一个$0$以及它的右边全部的数字。删除最后一个数字的人赢。求最优策略下，先手必胜还是后手必胜<br>串$s$的长度不超过$6$位</p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>当一个串的开头是$0$的时候，先手一步获胜，将串变成空串<br>已知游戏终止状态，即递归终点<br>那么根据至少能走到一个$P$态的状态是$N$态，只能走到$N$态的状态是$P$态<br>通过递归遍历所有决策去记忆化搜索即可</p>
<h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> dp[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">real_num</span><span class="params">(std::string t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; t.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        res = res * <span class="number">10</span> + t[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(std::string u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> num = <span class="built_in">real_num</span>(u);</span><br><span class="line">    <span class="keyword">if</span> (dp[num] != <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> dp[num];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; u.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> backup = u[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> j = backup - <span class="number">1</span>; j &gt;= <span class="string">&#x27;0&#x27;</span>; --j)</span><br><span class="line">        &#123;</span><br><span class="line">            u[i] = j;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">dfs</span>(u) == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> dp[num] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        u[i] = backup;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; u.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (u[i] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            std::string t = std::<span class="built_in">string</span>(u.<span class="built_in">begin</span>(), u.<span class="built_in">begin</span>() + i);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">dfs</span>(t) == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> dp[num] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[num] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::string str;</span><br><span class="line">    std::cin &gt;&gt; str;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">dfs</span>(str) == <span class="number">1</span>)</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    std::cin &gt;&gt; T;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="例题：-Bash-游戏"><a href="#例题：-Bash-游戏" class="headerlink" title="例题：$Bash$游戏"></a>例题：$Bash$游戏</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p>一堆石子共$n$个，$A$和$B$两人轮流拿，每次最少拿一颗，最多拿$k$颗，最后无法行动的人输<br>$A$先手，问谁必胜</p>
<h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>游戏终止状态是$0$颗石子，此时先手必输，即$P$态<br>由此打表$/$手玩找规律，非常容易发现规律</p>
<h3 id="具体代码-1"><a href="#具体代码-1" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">if</span> (n % (k + <span class="number">1</span>))</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&#x27;A&#x27;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&#x27;B&#x27;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    std::cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="例题：-CF1537D"><a href="#例题：-CF1537D" class="headerlink" title="例题：$CF1537D$"></a>例题：$CF1537D$</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h3><p>$Alice$和$Bob$玩游戏，开始时有一个整数，两者轮流行动<br>每次行动可以在当前的$n$上减去其一个非$1$也非$n$的因子<br>无法行动者输，$Alice$先手，问谁必胜</p>
<h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>注释内容为打表<br>通过打表能很快发现结论为<br>若$n$为奇数，$Bob$必胜<br>若$n$为偶数，当$n$为$2$的奇数次幂时，$Bob$必胜，否则$Alice$必胜</p>
<h3 id="具体代码-2"><a href="#具体代码-2" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// const int N = 1e5 + 10;</span></span><br><span class="line"><span class="comment">// int dp[N];</span></span><br><span class="line"><span class="comment">// int n;</span></span><br><span class="line"><span class="comment">// int dfs(int u)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     if (dp[u] != 0)</span></span><br><span class="line"><span class="comment">//         return dp[u];</span></span><br><span class="line"><span class="comment">//     for (int i = 2; i &lt;= u - 1; ++i)</span></span><br><span class="line"><span class="comment">//         if (u % i == 0)</span></span><br><span class="line"><span class="comment">//            if (dfs(u - i) == -1)</span></span><br><span class="line"><span class="comment">//                return dp[u] = 1;</span></span><br><span class="line"><span class="comment">//     return dp[u] = -1;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// void solve()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     std::cin &gt;&gt; n;</span></span><br><span class="line"><span class="comment">//     for (int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="comment">//         if (dfs(i) == 1)</span></span><br><span class="line"><span class="comment">//             std::cout &lt;&lt; i &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::set&lt;<span class="type">int</span>&gt; two_pow;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (t &lt;= <span class="number">1e9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        two_pow.<span class="built_in">insert</span>(t);</span><br><span class="line">        t *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Bob&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (two_pow.<span class="built_in">count</span>(n))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="type">int</span>)std::<span class="built_in">log2</span>(n) &amp; <span class="number">1</span>)</span><br><span class="line">                std::cout &lt;&lt; <span class="string">&quot;Bob&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                std::cout &lt;&lt; <span class="string">&quot;Alice&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Alice&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    std::cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="例题：-CF1527B2"><a href="#例题：-CF1527B2" class="headerlink" title="例题：$CF1527B2$"></a>例题：$CF1527B2$</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h3><p>$Alice$和$Bob$对一个$01$串做游戏<br>$Alice$先手，每轮可以做两种操作中的一种<br>$1.$任选一个位置的$0$，将其变为$1$，花费代价$1$<br>$2.$若当前串不为回文串，且上一个操作不为操作$2$，那么可以$std::reverse$这个$01$串<br>$01$串变为全$1$时游戏结束，此时花费代价少的人获胜，否则平局<br>问谁必胜</p>
<h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p>串中对称的两个$1$不再有用<br>所以考虑对称的$00$，对称的$01$，长度为奇数的串中间是否为$0$，上一次操作是不是$reverse$这四个维度<br>做记忆化搜索即可</p>
<h3 id="具体代码-3"><a href="#具体代码-3" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">2</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="type">int</span> dp[N][N][M][M];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">std::string s;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> cnt00, <span class="type">int</span> cnt01, <span class="type">int</span> mz, <span class="type">int</span> rev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt00 == <span class="number">0</span> &amp;&amp; cnt01 == <span class="number">0</span> &amp;&amp; mz == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> dp[cnt00][cnt01][mz][rev] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (dp[cnt00][cnt01][mz][rev] != INF)</span><br><span class="line">        <span class="keyword">return</span> dp[cnt00][cnt01][mz][rev];</span><br><span class="line">    <span class="type">int</span> res = INF;</span><br><span class="line">    <span class="keyword">if</span> (cnt00 &gt; <span class="number">0</span>)</span><br><span class="line">        res = std::<span class="built_in">min</span>(res, -<span class="built_in">dfs</span>(cnt00 - <span class="number">1</span>, cnt01 + <span class="number">1</span>, mz, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (cnt01 &gt; <span class="number">0</span>)</span><br><span class="line">        res = std::<span class="built_in">min</span>(res, -<span class="built_in">dfs</span>(cnt00, cnt01 - <span class="number">1</span>, mz, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (mz == <span class="number">1</span>)</span><br><span class="line">        res = std::<span class="built_in">min</span>(res, -<span class="built_in">dfs</span>(cnt00, cnt01, <span class="number">0</span>, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (rev == <span class="number">0</span> &amp;&amp; cnt01 &gt; <span class="number">0</span>)</span><br><span class="line">        res = std::<span class="built_in">min</span>(res, -<span class="built_in">dfs</span>(cnt00, cnt01, mz, <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> dp[cnt00][cnt01][mz][rev] = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    std::cin &gt;&gt; s;</span><br><span class="line">    s = <span class="string">&quot;?&quot;</span> + s;</span><br><span class="line">    <span class="type">int</span> cnt00 = <span class="number">0</span>, cnt01 = <span class="number">0</span>, mz = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n / <span class="number">2</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;0&#x27;</span> &amp;&amp; s[n - i + <span class="number">1</span>] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            ++cnt00;</span><br><span class="line">        <span class="keyword">if</span> (s[i] != s[n - i + <span class="number">1</span>])</span><br><span class="line">            ++cnt01;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((n &amp; <span class="number">1</span>) &amp;&amp; s[(n + <span class="number">1</span>) / <span class="number">2</span>] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        mz = <span class="number">1</span>; </span><br><span class="line">    <span class="type">int</span> ans = <span class="built_in">dfs</span>(cnt00, cnt01, mz, <span class="number">0</span>); </span><br><span class="line">    <span class="keyword">if</span> (ans &gt; <span class="number">0</span>)</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;BOB&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ans &lt; <span class="number">0</span>)</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;ALICE&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;DRAW&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    std::cin &gt;&gt; T;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0x7f</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>XCPC</tag>
      </tags>
  </entry>
  <entry>
    <title>珂朵莉树/颜色段均摊</title>
    <url>/2023/04/30/odt-tree/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>想法的本质是基于数据随机的均摊，不是数据结构</p>
<h2 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h2><p>把值相同的区间合并成一个节点保存在$set$中<br><span id="more"></span></p>
<h2 id="结点"><a href="#结点" class="headerlink" title="结点"></a>结点</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="keyword">mutable</span> <span class="type">int</span> v;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, c = <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        l = a, r = b, v = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(Node a, Node b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.l &lt; b.l; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="珂朵莉树的初始化"><a href="#珂朵莉树的初始化" class="headerlink" title="珂朵莉树的初始化"></a>珂朵莉树的初始化</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::set&lt;Node&gt; S;</span><br></pre></td></tr></table></figure>
<h2 id="珂朵莉树的核心操作"><a href="#珂朵莉树的核心操作" class="headerlink" title="珂朵莉树的核心操作"></a>珂朵莉树的核心操作</h2><h3 id="split"><a href="#split" class="headerlink" title="$split$"></a>$split$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> S_IT = std::set&lt;Node&gt;::iterator;</span><br><span class="line"><span class="function">S_IT <span class="title">split</span><span class="params">(<span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    S_IT it = S.<span class="built_in">lower_bound</span>(<span class="built_in">Node</span>(pos, <span class="number">0</span>, <span class="number">0</span>)); <span class="comment">// 在set中查到左端点位置大于等于pos的结点</span></span><br><span class="line">    <span class="keyword">if</span> (it != S.<span class="built_in">end</span>() &amp;&amp; it-&gt;l == pos) <span class="comment">// 如果这个结点的左端点恰好是pos,无需分裂直接返回</span></span><br><span class="line">        <span class="keyword">return</span> it;</span><br><span class="line">    <span class="comment">// 如果不是pos就一定大于pos,则包含pos的结点是上一个结点</span></span><br><span class="line">    --it;</span><br><span class="line">    ll l = it-&gt;l, r = it-&gt;r, c = it-&gt;c;</span><br><span class="line">    S.<span class="built_in">erase</span>(it);</span><br><span class="line">    S.<span class="built_in">insert</span>(<span class="built_in">Node</span>(l, pos - <span class="number">1</span>, c));</span><br><span class="line">    <span class="keyword">return</span> S.<span class="built_in">insert</span>((<span class="built_in">Node</span>(pos, r, c))).first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>$split$操作将包含$pos$的区间$[l,r]$分裂成$[l,pos-1]$和$[pos,r]$，并返回后者的迭代器<br>有了$split$，任何对于$[l,r]$的区间操作<br>都能转换成$set$上$[split(l),split(r+1))$的操作</p>
<h3 id="assign"><a href="#assign" class="headerlink" title="$assign$"></a>$assign$</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> S_IT = std::set&lt;Node&gt;::iterator;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">assign</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    S_IT it2 = <span class="built_in">split</span>(r + <span class="number">1</span>), it1 = <span class="built_in">split</span>(l);</span><br><span class="line">    <span class="comment">// 如果要顺便遍历区间里的信息做某些操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = it1; it != it2; ++it)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 做操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    S.<span class="built_in">erase</span>(it1, it2);</span><br><span class="line">    S.<span class="built_in">insert</span>(<span class="built_in">Node</span>(l, r, c));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>$assign$用于区间赋值，同时减少$set$中结点个数<br>注意要先$split(r+1)$，否则可能$RE$</p>
<h2 id="例题：-CF896C"><a href="#例题：-CF896C" class="headerlink" title="例题：$CF896C$"></a>例题：$CF896C$</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>长度为$n$的数列$a$<br>维护四种操作<br>$1\ l\ r\ x:$对于$l\leq i\leq r$置$a_i$为$a_i+x$<br>$2\ l\ r\ x:$对于$l\leq i\leq r$置$a_i$为$x$<br>$3\ l\ r\ x:$输出$a_l,a_{l+1},\cdots,a_r$这段区间里第$x$小的数<br>$4\ l\ r\ x\ y:$输出$(\sum_{i=l}^{r}(a_i)^x)mod\ y$</p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>按照模板每一种操作都很容易实现</p>
<h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PLL = std::pair&lt;ll, ll&gt;;</span><br><span class="line"><span class="type">const</span> ll MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> ll N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">ll n, m, seed, vmax;</span><br><span class="line">ll a[N];</span><br><span class="line"><span class="function">ll <span class="title">rnd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = seed;</span><br><span class="line">    seed = (seed * <span class="number">7</span> + <span class="number">13</span>) % MOD;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    ll l, r;</span><br><span class="line">    <span class="keyword">mutable</span> ll v;</span><br><span class="line">    <span class="built_in">Node</span>(ll a = <span class="number">0</span>, ll b = <span class="number">0</span>, ll c = <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        l = a, r = b, v = c;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(Node a, Node b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.l &lt; b.l;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">std::set&lt;Node&gt; ODT;</span><br><span class="line"><span class="keyword">using</span> S_IT = std::set&lt;Node&gt;::iterator;</span><br><span class="line"><span class="function">S_IT <span class="title">split</span><span class="params">(ll pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> it = ODT.<span class="built_in">lower_bound</span>(<span class="built_in">Node</span>(pos, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">if</span> (it != ODT.<span class="built_in">end</span>() &amp;&amp; it-&gt;l == pos)</span><br><span class="line">        <span class="keyword">return</span> it;</span><br><span class="line">    --it;</span><br><span class="line">    ll l = it-&gt;l, r = it-&gt;r, v = it-&gt;v;</span><br><span class="line">    ODT.<span class="built_in">erase</span>(it);</span><br><span class="line">    ODT.<span class="built_in">insert</span>(<span class="built_in">Node</span>(l, pos - <span class="number">1</span>, v));</span><br><span class="line">    <span class="keyword">return</span> ODT.<span class="built_in">insert</span>(<span class="built_in">Node</span>(pos, r, v)).first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addx</span><span class="params">(ll l, ll r, ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> rit = <span class="built_in">split</span>(r + <span class="number">1</span>), lit = <span class="built_in">split</span>(l);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = lit; it != rit; ++it)</span><br><span class="line">        it-&gt;v += x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(ll l, ll r, ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> rit = <span class="built_in">split</span>(r + <span class="number">1</span>), lit = <span class="built_in">split</span>(l);</span><br><span class="line">    ODT.<span class="built_in">erase</span>(lit, rit);</span><br><span class="line">    ODT.<span class="built_in">insert</span>(<span class="built_in">Node</span>(l, r, x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">x_th</span><span class="params">(ll l, ll r, ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> rit = <span class="built_in">split</span>(r + <span class="number">1</span>), lit = <span class="built_in">split</span>(l);</span><br><span class="line">    std::vector&lt;PLL&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = lit; it != rit; ++it)</span><br><span class="line">        t.<span class="built_in">push_back</span>(<span class="built_in">PLL</span>(it-&gt;v, it-&gt;r - it-&gt;l + <span class="number">1</span>));</span><br><span class="line">    std::<span class="built_in">sort</span>(t.<span class="built_in">begin</span>(), t.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">0</span>; i &lt; t.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        <span class="keyword">if</span> (x &gt; t[i].second)</span><br><span class="line">            x -= t[i].second;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> t[i].first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll b, ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span> % p;</span><br><span class="line">    a %= p;</span><br><span class="line">    <span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">            res = (res * a) % p;</span><br><span class="line">        a = (a * a) % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">pow_sum</span><span class="params">(ll l, ll r, ll x, ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> rit = <span class="built_in">split</span>(r + <span class="number">1</span>), lit = <span class="built_in">split</span>(l);</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = lit; it != rit; ++it)</span><br><span class="line">        res = (res + (it-&gt;r - it-&gt;l + <span class="number">1</span>) % y * <span class="built_in">qpow</span>(it-&gt;v, x, y) % y) % y;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; m &gt;&gt; seed &gt;&gt; vmax;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = (<span class="built_in">rnd</span>() % vmax) + <span class="number">1</span>;</span><br><span class="line">        ODT.<span class="built_in">insert</span>(<span class="built_in">Node</span>(i, i, a[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    ODT.<span class="built_in">insert</span>(<span class="built_in">Node</span>(n + <span class="number">1</span>, n + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ll op, l, r, x, y;</span><br><span class="line">        op = (<span class="built_in">rnd</span>() % <span class="number">4</span>) + <span class="number">1</span>;</span><br><span class="line">        l = (<span class="built_in">rnd</span>() % n) + <span class="number">1</span>;</span><br><span class="line">        r = (<span class="built_in">rnd</span>() % n) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &gt; r)</span><br><span class="line">            std::<span class="built_in">swap</span>(l, r);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">3</span>)</span><br><span class="line">            x = (<span class="built_in">rnd</span>() % (r - l + <span class="number">1</span>)) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            x = (<span class="built_in">rnd</span>() % vmax) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">4</span>)</span><br><span class="line">            y = (<span class="built_in">rnd</span>() % vmax) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">addx</span>(l, r, x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>)</span><br><span class="line">            <span class="built_in">modify</span>(l, r, x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>)</span><br><span class="line">            std::cout &lt;&lt; <span class="built_in">x_th</span>(l, r, x) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">4</span>)</span><br><span class="line">            std::cout &lt;&lt; <span class="built_in">pow_sum</span>(l, r, x, y) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ll T = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// std::cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>XCPC</tag>
      </tags>
  </entry>
  <entry>
    <title>KMP</title>
    <url>/2023/06/17/kmp-blog/</url>
    <content><![CDATA[<h2 id="前置概念"><a href="#前置概念" class="headerlink" title="前置概念"></a>前置概念</h2><p>$Border$：如果字符串同长度的前缀与后缀相同，称该前缀(后缀)是一个$Border$(可以指这个前缀也可以指这个前缀的长度)<br>循环周期：对于字符串$S$和正整数$p$，如果有$S_i=S_{i-p}$，对于$p\lt i\leq |S|$成立，称$p$是$S$的一个循环周期<br>循环节：若字符串$S$的周期$p$满足$p\mid |S|$，称$p$是$S$的一个循环节<br><span id="more"></span></p>
<h2 id="重要性质-1-：-p-是-S-的周期-Leftrightarrow-S-p-是-S-的-Border"><a href="#重要性质-1-：-p-是-S-的周期-Leftrightarrow-S-p-是-S-的-Border" class="headerlink" title="重要性质$1$：$p$是$S$的周期$\Leftrightarrow |S| - p$是$S$的$Border$"></a>重要性质$1$：$p$是$S$的周期$\Leftrightarrow |S| - p$是$S$的$Border$</h2><p>因此求$Border$问题与求周期问题等价</p>
<h2 id="重要性质-2-：-S-的-Border-的-Border-也是-S-的-Border"><a href="#重要性质-2-：-S-的-Border-的-Border-也是-S-的-Border" class="headerlink" title="重要性质$2$：$S$的$Border$的$Border$也是$S$的$Border$"></a>重要性质$2$：$S$的$Border$的$Border$也是$S$的$Border$</h2><p>因此求$S$的所有$Border$等价于求最大$Border$(求完最大$Border$变为子问题)</p>
<h2 id="Next-数组"><a href="#Next-数组" class="headerlink" title="$Next$数组"></a>$Next$数组</h2><p>$nxt_i$的值为$prefix_i$的非平凡最大$Border$<br>记$nxt_1=0$<br>考虑$prefix_i$的非平凡最大$Border$，去掉最后一个字符，就是$prefix_{i-1}$的非平凡最大$Border$<br>但反过来，$prefix_{i-1}$的非平凡最大$Border$加上一个字符，不一定是$prefix_i$的非平凡最大$Border$($S_i$与$S_{nxt_{i-1}+1}$不一定相等)<br>因此想求$nxt_i$，需遍历$prefix_{i-1}$的所有非平凡$Border$，结合重要性质$2$，发现这个过程等价于去遍历$nxt_{i-1},nxt_{nxt_{i-1}},\cdots,0$<br>从大到小遍历，如果某一个$Border$加上后一个字符满足相等，就可以及时$break$</p>
<h2 id="求-Next-数组代码"><a href="#求-Next-数组代码" class="headerlink" title="求$Next$数组代码"></a>求$Next$数组代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_nxt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nxt[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[i] == t[nxt[j] + <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                nxt[i] = nxt[j] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            j = nxt[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="求-Next-数组复杂度分析"><a href="#求-Next-数组复杂度分析" class="headerlink" title="求$Next$数组复杂度分析"></a>求$Next$数组复杂度分析</h2><p>考虑势能分析<br>如果$nxt_i=nxt_{i-1}+1$，势能增加$1$<br>否则势能会先减少到某个$nxt_j$，然后有$nxt_i=nxt_j+1$，在寻找$nxt_j$的过程中，势能减少，每次至少减少$1$，寻找结束后势能加$1$<br>如果一直到$j=0$都没有找到满足的$nxt_j$，说明$nxt_i=0$，势能清空<br>综上，势能总量为$O(N)$，时间复杂度就是$O(N)$，常数不超过$2$</p>
<h2 id="KMP-思想"><a href="#KMP-思想" class="headerlink" title="$KMP$思想"></a>$KMP$思想</h2><p>$Next$数组记录了每个位置的前缀的非平凡最大$Border$信息<br>利用这个信息可以加速字符串匹配<br>先看暴力匹配为什么慢</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>; i &lt;= n; )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (s[i] == t[j])</span><br><span class="line">        ++i, ++j;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        i = (i - <span class="number">1</span>) - (j - <span class="number">1</span>) + <span class="number">1</span> + <span class="number">1</span>, j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (j == m + <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; (i - <span class="number">1</span>) - m + <span class="number">1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        i = i - m + <span class="number">2</span>, j = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>暴力匹配的时间瓶颈在于：当遇到匹配失败的字符时，$i$和$j$大量的回溯<br>$KMP$算法首先预处理出模式串$t$的$Next$数组，然后基于这样一个事实节约时间：当遇到匹配失败的字符，$i$指针不需要动，尝试让$j$回溯到$prefix_{j-1}$所有$Border$的长度即可，非$Border$长度一定不会匹配的更“远”<br>“尝试让$j$回溯到$prefix_{j-1}$所有$Border$的长度”这个过程，结合重要性质$2$和已经预处理好的$Next$数组，其实还是一个在$Border$链上跳的过程<br>结合势能分析，复杂度为$O(N+M)$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>; i &lt;= n; )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (s[i] == t[j])</span><br><span class="line">        ++i, ++j;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">// 遇到匹配失败的字符，在Border链上跳</span></span><br><span class="line">        <span class="keyword">while</span> (j != <span class="number">1</span> &amp;&amp; s[i] != t[j]) </span><br><span class="line">            j = nxt[j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (j == <span class="number">1</span> &amp;&amp; s[i] != t[j]) <span class="comment">// 如果到1了还是失败，说明这个位置不可能</span></span><br><span class="line">        ++i;</span><br><span class="line">    <span class="keyword">if</span> (j == m + <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; (i - <span class="number">1</span>) - (j - <span class="number">1</span>) + <span class="number">1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        j = nxt[m] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="KMP-模板"><a href="#KMP-模板" class="headerlink" title="$KMP$模板"></a>$KMP$模板</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">KMP</span> &#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; nxt;</span><br><span class="line">    std::string s, t;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="built_in">KMP</span>(std::string a, std::string b) : <span class="built_in">s</span>(<span class="string">&quot;?&quot;</span> + a), <span class="built_in">t</span>(<span class="string">&quot;?&quot;</span> + b) &#123;</span><br><span class="line">        n = s.<span class="built_in">length</span>() - <span class="number">1</span>, m = t.<span class="built_in">length</span>() - <span class="number">1</span>;</span><br><span class="line">        nxt.<span class="built_in">resize</span>(m + <span class="number">1</span>);</span><br><span class="line">        nxt[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (j != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (t[i] == t[nxt[j] + <span class="number">1</span>]) &#123;</span><br><span class="line">                    nxt[i] = nxt[j] + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                j = nxt[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">get_start_pos</span><span class="params">(<span class="type">bool</span> start_from_zero)</span> </span>&#123;</span><br><span class="line">        std::vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>; i &lt;= n; ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == t[j])</span><br><span class="line">                ++i, ++j;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">while</span> (j != <span class="number">1</span> &amp;&amp; s[i] != t[j]) </span><br><span class="line">                    j = nxt[j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">1</span> &amp;&amp; s[i] != t[j])</span><br><span class="line">                ++i;</span><br><span class="line">            <span class="keyword">if</span> (j == m + <span class="number">1</span>) &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>((i - <span class="number">1</span>) - (j - <span class="number">1</span>) + <span class="number">1</span> + (start_from_zero ? <span class="number">-1</span> : <span class="number">0</span>));</span><br><span class="line">                j = nxt[m] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>XCPC</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenMP实现生产者消费者问题</title>
    <url>/2023/05/06/parallel-homework1/</url>
    <content><![CDATA[<h2 id="作业要求"><a href="#作业要求" class="headerlink" title="作业要求"></a>作业要求</h2><p>使用$OpenMP$实现生产者-消费者程序：多个线程中的一部分线程是生产者，另外一部分线程是消费者。假设有$n$个生成者和$n$个文件集合，每个生产者针对一个文件读取文本，并将读出的文本行插入到一个共享的队列中。消费者从共享队列中取出文本行，并对文本行进行分词。消费者在分词时，发现一个单词就将该单词输出到$stdout$<br>要求：至少$4$个文件集合<br><span id="more"></span></p>
<h2 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;omp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 四个文件集合，四个生产者，四个消费者</span></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">omp_set_num_threads</span>(<span class="number">8</span>);    <span class="comment">// 四个生产者 + 四个消费者</span></span><br><span class="line">    std::queue&lt;std::string&gt; q; <span class="comment">// 共享队列</span></span><br><span class="line">    <span class="type">int</span> ok = <span class="number">0</span>;                <span class="comment">// 记录已经生产完所有消息的生产者的数量</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel shared(q, ok)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> tid = <span class="built_in">omp_get_thread_num</span>();</span><br><span class="line">        <span class="keyword">if</span> (tid &gt;= <span class="number">1</span> &amp;&amp; tid &lt;= <span class="number">4</span>) <span class="comment">// 如果tid在1到4之间，将其作为生产者</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 构造path</span></span><br><span class="line">            std::string path = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            path += <span class="built_in">char</span>(tid + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            path += <span class="string">&quot;.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 打开该生产者对应的文件</span></span><br><span class="line">            std::ifstream fin;</span><br><span class="line">            fin.<span class="built_in">open</span>(path, std::ios::in);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将读出的文本行插入共享队列</span></span><br><span class="line">            std::string str;</span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">getline</span>(fin, str))</span><br><span class="line">            &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp critical</span></span><br><span class="line">                q.<span class="built_in">push</span>(str);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭文件，记录当前生产者已经生产完毕</span></span><br><span class="line">            fin.<span class="built_in">close</span>();</span><br><span class="line">            ++ok;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">// 消费者</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (q.<span class="built_in">size</span>() || ok != <span class="number">4</span>) <span class="comment">// 当共享队列中还有东西，或者还有生产者没有生产完毕，消费者就不能停下</span></span><br><span class="line">            &#123;</span><br><span class="line">                std::string res;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp critical</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (q.<span class="built_in">size</span>()) <span class="comment">// 从共享队列中取出文本行</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        res = q.<span class="built_in">front</span>();</span><br><span class="line">                        q.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 分词过程，发现一个单词就将该单词输出到stdout</span></span><br><span class="line">                std::string word = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); ++i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (res[i] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 如果输出单词不加锁，会有单词粘黏在一起的风险</span></span><br><span class="line">                        <span class="comment">// 但是加了锁感觉这个并行程序就毫无意义了</span></span><br><span class="line">                        <span class="comment">// #pragma omp critical</span></span><br><span class="line">                        std::cout &lt;&lt; word &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                        word = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        word += res[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行方式"><a href="#运行方式" class="headerlink" title="运行方式"></a>运行方式</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">g++ -o homework -fopenmp homework.cpp</span><br><span class="line">./homework.exe</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>选修</tag>
      </tags>
  </entry>
  <entry>
    <title>MPI实现奇偶排序</title>
    <url>/2023/05/29/parallel-homework2/</url>
    <content><![CDATA[<h2 id="作业要求"><a href="#作业要求" class="headerlink" title="作业要求"></a>作业要求</h2><p>使用$MPI$实现奇偶排序:$0$号进程获得待排序序列并输出排序好的序列<br><span id="more"></span></p>
<h2 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mpi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_low</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b, <span class="type">int</span> lengthA, <span class="type">int</span> lengthB)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> tempLength = lengthA &lt; lengthB ? lengthA : lengthB;</span><br><span class="line">    <span class="type">int</span> *temp = (<span class="type">int</span> *)<span class="built_in">calloc</span>(tempLength, <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">while</span> (k &lt; tempLength)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt;= b[j])</span><br><span class="line">        &#123;</span><br><span class="line">            temp[k] = a[i];</span><br><span class="line">            ++k, ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            temp[k] = b[j];</span><br><span class="line">            ++k, ++j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(a, temp, tempLength * <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_high</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b, <span class="type">int</span> lengthA, <span class="type">int</span> lengthB)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tempLength = lengthA &gt; lengthB ? lengthA : lengthB;</span><br><span class="line">    <span class="type">int</span> i = lengthA - <span class="number">1</span>, j = lengthB - <span class="number">1</span>, k = tempLength - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> *temp = (<span class="type">int</span> *)<span class="built_in">calloc</span>(tempLength, <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">while</span> (k &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt;= b[j])</span><br><span class="line">        &#123;</span><br><span class="line">            temp[k] = a[i];</span><br><span class="line">            --k, --i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            temp[k] = b[j];</span><br><span class="line">            --k, --j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(a, temp, tempLength * <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_partner</span><span class="params">(<span class="type">int</span> rank, <span class="type">int</span> phase, <span class="type">int</span> nrProcesses)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> partner;</span><br><span class="line">    <span class="keyword">if</span> (phase &amp; <span class="number">1</span>)</span><br><span class="line">        partner = rank % <span class="number">2</span> == <span class="number">0</span> ? --rank : ++rank;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        partner = rank % <span class="number">2</span> == <span class="number">0</span> ? ++rank : --rank;</span><br><span class="line">    <span class="keyword">return</span> (partner &gt; nrProcesses - <span class="number">1</span> || partner &lt;= <span class="number">0</span>) ? <span class="number">-1</span> : partner;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">odd_even_sort</span><span class="params">(<span class="type">int</span> *localArray, <span class="type">int</span> sliceLength, <span class="type">int</span> rank, <span class="type">int</span> nrProcesses, <span class="type">int</span> globalLength)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> phase;</span><br><span class="line">    std::<span class="built_in">sort</span>(localArray, localArray + sliceLength); <span class="comment">// 把localarray先排好序</span></span><br><span class="line">    <span class="keyword">for</span> (phase = <span class="number">0</span>; phase &lt; nrProcesses; ++phase)    <span class="comment">// 按书上定理，有p个进程就只需p个阶段</span></span><br><span class="line">    &#123;</span><br><span class="line">        MPI_Status status;</span><br><span class="line">        <span class="type">int</span> partner = <span class="built_in">find_partner</span>(rank, phase, nrProcesses);</span><br><span class="line">        <span class="type">int</span> partnerLength = globalLength / (nrProcesses - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (partner == nrProcesses - <span class="number">1</span>)</span><br><span class="line">            partnerLength = globalLength - (partner - <span class="number">1</span>) * partnerLength;</span><br><span class="line">        <span class="type">int</span> *partnerArray = (<span class="type">int</span> *)<span class="built_in">calloc</span>(partnerLength, <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">        <span class="keyword">if</span> (partner != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (phase &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">MPI_Send</span>(localArray, sliceLength, MPI_INT, partner, <span class="number">0</span>, MPI_COMM_WORLD);</span><br><span class="line">                <span class="built_in">MPI_Recv</span>(partnerArray, partnerLength, MPI_INT, partner, <span class="number">0</span>, MPI_COMM_WORLD, &amp;status);</span><br><span class="line">                <span class="keyword">if</span> (rank % <span class="number">2</span> != <span class="number">0</span>)</span><br><span class="line">                    <span class="built_in">merge_low</span>(localArray, partnerArray, sliceLength, partnerLength);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">merge_high</span>(localArray, partnerArray, sliceLength, partnerLength);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">MPI_Send</span>(localArray, sliceLength, MPI_INT, partner, <span class="number">0</span>, MPI_COMM_WORLD);</span><br><span class="line">                <span class="built_in">MPI_Recv</span>(partnerArray, partnerLength, MPI_INT, partner, <span class="number">0</span>, MPI_COMM_WORLD, &amp;status);</span><br><span class="line">                <span class="keyword">if</span> (rank % <span class="number">2</span> != <span class="number">0</span>)</span><br><span class="line">                    <span class="built_in">merge_high</span>(localArray, partnerArray, sliceLength, partnerLength);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">merge_low</span>(localArray, partnerArray, sliceLength, partnerLength);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> nrProcesses, rank;</span><br><span class="line">    <span class="type">int</span> *initialArray;</span><br><span class="line">    <span class="built_in">MPI_Init</span>(&amp;argc, &amp;argv);</span><br><span class="line">    <span class="built_in">MPI_Comm_size</span>(MPI_COMM_WORLD, &amp;nrProcesses);</span><br><span class="line">    <span class="built_in">MPI_Comm_rank</span>(MPI_COMM_WORLD, &amp;rank);</span><br><span class="line">    <span class="keyword">if</span> (rank == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> arrayLength = <span class="number">0</span>, currentOffset = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 主进程把数组读入</span></span><br><span class="line">        <span class="function">std::ifstream <span class="title">fin</span><span class="params">(<span class="string">&quot;input.txt&quot;</span>)</span></span>;</span><br><span class="line">        fin &gt;&gt; arrayLength;</span><br><span class="line">        initialArray = <span class="keyword">new</span> <span class="type">int</span>[arrayLength];</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arrayLength; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            fin &gt;&gt; x;</span><br><span class="line">            initialArray[i] = x;</span><br><span class="line">        &#125;</span><br><span class="line">        fin.<span class="built_in">close</span>();</span><br><span class="line">        <span class="type">int</span> *sortedArray = (<span class="type">int</span> *)<span class="built_in">calloc</span>(arrayLength, <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; nrProcesses; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> sliceLength = arrayLength / (nrProcesses - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (i == nrProcesses - <span class="number">1</span>) <span class="comment">// 对于最后一个进程，特别处理一下它分到的sliceLength</span></span><br><span class="line">                sliceLength = arrayLength - (i - <span class="number">1</span>) * sliceLength;</span><br><span class="line">            <span class="comment">// 把每个localArray处理出来，发给工作进程</span></span><br><span class="line">            <span class="type">int</span> *localArray = (<span class="type">int</span> *)<span class="built_in">calloc</span>(sliceLength, <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">            <span class="built_in">memcpy</span>(localArray, initialArray + currentOffset, sliceLength * <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">            currentOffset += sliceLength;</span><br><span class="line">            <span class="built_in">MPI_Send</span>(&amp;arrayLength, <span class="number">1</span>, MPI_INT, i, <span class="number">0</span>, MPI_COMM_WORLD);</span><br><span class="line">            <span class="built_in">MPI_Send</span>(&amp;sliceLength, <span class="number">1</span>, MPI_INT, i, <span class="number">0</span>, MPI_COMM_WORLD);</span><br><span class="line">            <span class="built_in">MPI_Send</span>(localArray, sliceLength, MPI_INT, i, <span class="number">0</span>, MPI_COMM_WORLD);</span><br><span class="line">            <span class="built_in">free</span>(localArray);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 接受发回来的数组，把它们组装起来</span></span><br><span class="line">        currentOffset = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; nrProcesses; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> sliceLength = arrayLength / (nrProcesses - <span class="number">1</span>);</span><br><span class="line">            MPI_Status status;</span><br><span class="line">            <span class="keyword">if</span> (i == nrProcesses - <span class="number">1</span>)</span><br><span class="line">                sliceLength = arrayLength - (i - <span class="number">1</span>) * sliceLength;</span><br><span class="line">            <span class="type">int</span> *receivedArray = (<span class="type">int</span> *)<span class="built_in">calloc</span>(arrayLength, <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">            <span class="built_in">MPI_Recv</span>(receivedArray, sliceLength, MPI_INT, i, <span class="number">0</span>, MPI_COMM_WORLD, &amp;status);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sliceLength; i++)</span><br><span class="line">                sortedArray[currentOffset + i] = receivedArray[i];</span><br><span class="line">            currentOffset += sliceLength;</span><br><span class="line">            <span class="built_in">free</span>(receivedArray);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 打印结果数组</span></span><br><span class="line">        <span class="function">std::ofstream <span class="title">fout</span><span class="params">(<span class="string">&quot;output.txt&quot;</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arrayLength; i++)</span><br><span class="line">            fout &lt;&lt; sortedArray[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        fout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        fout.<span class="built_in">close</span>();</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;排序完毕, 请查看output.txt&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 工作进程</span></span><br><span class="line">        <span class="type">int</span> arrayLength, sliceLength;</span><br><span class="line">        <span class="comment">// 接受主进程发过来的待处理数组</span></span><br><span class="line">        MPI_Status status;</span><br><span class="line">        <span class="built_in">MPI_Recv</span>(&amp;arrayLength, <span class="number">1</span>, MPI_INT, <span class="number">0</span>, <span class="number">0</span>, MPI_COMM_WORLD, &amp;status);</span><br><span class="line">        <span class="built_in">MPI_Recv</span>(&amp;sliceLength, <span class="number">1</span>, MPI_INT, <span class="number">0</span>, <span class="number">0</span>, MPI_COMM_WORLD, &amp;status);</span><br><span class="line">        <span class="type">int</span> *receivedArray = (<span class="type">int</span> *)<span class="built_in">calloc</span>(sliceLength, <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">        <span class="built_in">MPI_Recv</span>(receivedArray, sliceLength, MPI_INT, <span class="number">0</span>, <span class="number">0</span>, MPI_COMM_WORLD, &amp;status);</span><br><span class="line">        <span class="comment">// 工作，实现奇偶排序具体算法</span></span><br><span class="line">        <span class="built_in">odd_even_sort</span>(receivedArray, sliceLength, rank, nrProcesses, arrayLength);</span><br><span class="line">        <span class="comment">// 发回给主进程</span></span><br><span class="line">        <span class="built_in">MPI_Send</span>(receivedArray, sliceLength, MPI_INT, <span class="number">0</span>, <span class="number">0</span>, MPI_COMM_WORLD);</span><br><span class="line">        <span class="built_in">free</span>(receivedArray);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">MPI_Finalize</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行方式"><a href="#运行方式" class="headerlink" title="运行方式"></a>运行方式</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">运行环境：wsl2(Ubuntu <span class="number">20</span>.<span class="number">04</span>)</span><br><span class="line">编辑器：vscode</span><br><span class="line">编译命令：mpicxx homework.cpp -o homework  (需先sudo apt install mpich)</span><br><span class="line">运行命令：mpiexec -n <span class="number">8</span> ./homework (-n用于指定进程数，<span class="number">8</span>代表分配了<span class="number">8</span>个进程)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>选修</tag>
      </tags>
  </entry>
  <entry>
    <title>XCPC Template</title>
    <url>/2023/09/16/template/</url>
    <content><![CDATA[<h2 id="Template-for-XCPC"><a href="#Template-for-XCPC" class="headerlink" title="Template for XCPC"></a>Template for XCPC</h2><span id="more"></span>
<h3 id="Discretization"><a href="#Discretization" class="headerlink" title="Discretization"></a>Discretization</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; c;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    std::cin &gt;&gt; a[i];</span><br><span class="line">    c.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">&#125;</span><br><span class="line">std::<span class="built_in">sort</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>());</span><br><span class="line"><span class="type">int</span> k = std::<span class="built_in">unique</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>()) - c.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    a[i] = std::<span class="built_in">lower_bound</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">begin</span>() + k, a[i]) - c.<span class="built_in">begin</span>() + <span class="number">1</span>; <span class="comment">// 1-indexed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Base-conversion"><a href="#Base-conversion" class="headerlink" title="Base_conversion"></a>Base_conversion</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">i64 x, base;</span><br><span class="line">std::cin &gt;&gt; x &gt;&gt; base;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"><span class="keyword">auto</span> get = [&amp;](<span class="keyword">auto</span> self, i64 x) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (x / base &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">self</span>(self, x / base);</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="built_in">push_back</span>(x % base);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">get</span>(get, x);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">    std::cout &lt;&lt; res[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> i64 Mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">constexpr</span> i64 N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">std::vector&lt;i64&gt; <span class="title">fact</span><span class="params">(N + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">std::vector&lt;i64&gt; <span class="title">infact</span><span class="params">(N + <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">i64 <span class="title">qpow</span><span class="params">(i64 a, i64 b, i64 mod)</span> </span>&#123;</span><br><span class="line">    i64 res = <span class="number">1</span> % mod;</span><br><span class="line">    <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = res * a % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">i64 <span class="title">inv</span><span class="params">(i64 x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">qpow</span>(x, Mod - <span class="number">2</span>, Mod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">i64 <span class="title">C</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b || b &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> fact[a] * infact[b] % Mod * infact[a - b] % Mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">precalc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fact[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    infact[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        fact[i] = fact[i - <span class="number">1</span>] * i % Mod;</span><br><span class="line">        infact[i] = infact[i - <span class="number">1</span>] * <span class="built_in">inv</span>(i) % Mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> i64 INF = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line">std::vector&lt;std::vector&lt;std::pair&lt;<span class="type">int</span>, i64&gt;&gt;&gt; <span class="built_in">e</span>(n + <span class="number">1</span>);</span><br><span class="line"><span class="function">std::vector&lt;i64&gt; <span class="title">d</span><span class="params">(n + <span class="number">1</span>, INF)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> dijkstra = [&amp;](std::vector&lt;std::vector&lt;std::pair&lt;<span class="type">int</span>, i64&gt;&gt;&gt;&amp; e, std::vector&lt;i64&gt;&amp; d, <span class="type">int</span> s) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">    std::vector&lt;<span class="type">bool</span>&gt; <span class="built_in">vis</span>(n + <span class="number">1</span>);</span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    std::priority_queue&lt;std::pair&lt;i64, <span class="type">int</span>&gt;, std::vector&lt;std::pair&lt;i64, <span class="type">int</span>&gt;&gt;, std::greater&lt;std::pair&lt;i64, <span class="type">int</span>&gt;&gt;&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;<span class="number">0</span>, s&#125;);</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> [dist, u] = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> [v, w] : e[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (d[v] &gt; d[u] + w) &#123;</span><br><span class="line">                d[v] = d[u] + w;</span><br><span class="line">                q.<span class="built_in">push</span>(&#123;d[v], v&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="DSU"><a href="#DSU" class="headerlink" title="DSU"></a>DSU</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DSU</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; p;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; sz;</span><br><span class="line">    <span class="built_in">DSU</span>(<span class="type">int</span> n = <span class="number">0</span>) : <span class="built_in">n</span>(n), <span class="built_in">p</span>(n + <span class="number">1</span>, <span class="number">0</span>), <span class="built_in">sz</span>(n + <span class="number">1</span>, <span class="number">1</span>) &#123;</span><br><span class="line">        std::<span class="built_in">iota</span>(p.<span class="built_in">begin</span>() + <span class="number">1</span>, p.<span class="built_in">end</span>(), <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">same</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(u) == <span class="built_in">find</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> pu = <span class="built_in">find</span>(u), pv = <span class="built_in">find</span>(v);</span><br><span class="line">        <span class="keyword">if</span> (pu == pv) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        sz[pu] += sz[pv];</span><br><span class="line">        p[pv] = pu;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sz[<span class="built_in">find</span>(x)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Fenwick-tree"><a href="#Fenwick-tree" class="headerlink" title="Fenwick tree"></a>Fenwick tree</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Fenwick</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;i64&gt; c;</span><br><span class="line">    <span class="built_in">Fenwick</span>(<span class="type">int</span> n = <span class="number">0</span>) : <span class="built_in">n</span>(n), <span class="built_in">c</span>(n + <span class="number">1</span>, <span class="number">0</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, i64 t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span> (; x &lt;= n; x += x &amp; -x) &#123;</span><br><span class="line">            c[x] += t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> i64 <span class="title">sum</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        i64 res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; x &gt; <span class="number">0</span>; x -= x &amp; -x) &#123;</span><br><span class="line">            res += c[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">KMP</span> &#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; nxt;</span><br><span class="line">    std::string s, t;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="built_in">KMP</span>(std::string a, std::string b) : <span class="built_in">s</span>(<span class="string">&quot;?&quot;</span> + a), <span class="built_in">t</span>(<span class="string">&quot;?&quot;</span> + b) &#123;</span><br><span class="line">        n = s.<span class="built_in">length</span>() - <span class="number">1</span>, m = t.<span class="built_in">length</span>() - <span class="number">1</span>;</span><br><span class="line">        nxt.<span class="built_in">resize</span>(m + <span class="number">1</span>);</span><br><span class="line">        nxt[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (j != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (t[i] == t[nxt[j] + <span class="number">1</span>]) &#123;</span><br><span class="line">                    nxt[i] = nxt[j] + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                j = nxt[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">get_start_pos</span><span class="params">(<span class="type">bool</span> start_from_zero)</span> </span>&#123;</span><br><span class="line">        std::vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>; i &lt;= n; ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == t[j])</span><br><span class="line">                ++i, ++j;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">while</span> (j != <span class="number">1</span> &amp;&amp; s[i] != t[j]) </span><br><span class="line">                    j = nxt[j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">1</span> &amp;&amp; s[i] != t[j])</span><br><span class="line">                ++i;</span><br><span class="line">            <span class="keyword">if</span> (j == m + <span class="number">1</span>) &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>((i - <span class="number">1</span>) - (j - <span class="number">1</span>) + <span class="number">1</span> + (start_from_zero ? <span class="number">-1</span> : <span class="number">0</span>));</span><br><span class="line">                j = nxt[m] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="LCA-binary-lifting"><a href="#LCA-binary-lifting" class="headerlink" title="LCA (binary lifting)"></a>LCA (binary lifting)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;std::vector&lt;std::pair&lt;i64, i64&gt;&gt;&gt; <span class="built_in">e</span>(n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (i64 i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">    i64 u, v, w;</span><br><span class="line">    std::cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">    e[u].<span class="built_in">push_back</span>(&#123;v, w&#125;);</span><br><span class="line">    e[v].<span class="built_in">push_back</span>(&#123;u, w&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">std::vector&lt;i64&gt; <span class="title">dis</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">std::vector&lt;i64&gt; <span class="title">dep</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">std::vector&lt;std::vector&lt;i64&gt;&gt; <span class="built_in">f</span>(n + <span class="number">1</span>, std::<span class="built_in">vector</span>&lt;i64&gt;(<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> dfs = [&amp;](<span class="keyword">auto</span> self, i64 u, i64 fa) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">    dep[u] = dep[fa] + <span class="number">1</span>;</span><br><span class="line">    f[u][<span class="number">0</span>] = fa;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= dep[u]; ++i) &#123;</span><br><span class="line">        f[u][i] = f[f[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> [v, w] : e[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dis[v] = dis[u] + w;</span><br><span class="line">        <span class="built_in">self</span>(self, v, u);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">dfs</span>(dfs, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> lca = [&amp;](<span class="type">int</span> u, <span class="type">int</span> v) -&gt; <span class="type">int</span> &#123; </span><br><span class="line">    <span class="keyword">if</span> (dep[u] &lt; dep[v]) std::<span class="built_in">swap</span>(u, v);</span><br><span class="line">    <span class="type">int</span> temp = dep[u] - dep[v]; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= temp; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="number">1</span> &lt;&lt; i) &amp; temp) &#123;</span><br><span class="line">            u = f[u][i]; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (u == v) <span class="keyword">return</span> u; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = (<span class="type">int</span>)std::<span class="built_in">log2</span>(n); i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (f[u][i] != f[v][i]) &#123;</span><br><span class="line">            u = f[u][i]; </span><br><span class="line">            v = f[v][i]; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[u][<span class="number">0</span>];   </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Max-flow"><a href="#Max-flow" class="headerlink" title="Max flow"></a>Max flow</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Flow</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> to, cap;</span><br><span class="line">        <span class="built_in">Edge</span>(<span class="type">int</span> to, <span class="type">int</span> cap) : <span class="built_in">to</span>(to), <span class="built_in">cap</span>(cap) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    std::vector&lt;Edge&gt; e;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; g;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; cur, h;</span><br><span class="line">    <span class="built_in">Flow</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">g</span>(n) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        h.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        std::queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        h[s] = <span class="number">0</span>;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i : g[u]) &#123;</span><br><span class="line">                <span class="type">int</span> v = e[i].to;</span><br><span class="line">                <span class="type">int</span> c = e[i].cap;</span><br><span class="line">                <span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    h[v] = h[u] + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (v == t) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    que.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t) <span class="keyword">return</span> f;</span><br><span class="line">        <span class="type">int</span> r = f;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i &lt; <span class="built_in">int</span>(g[u].<span class="built_in">size</span>()); ++i) &#123;</span><br><span class="line">            <span class="type">int</span> j = g[u][i];</span><br><span class="line">            <span class="type">int</span> v = e[j].to;</span><br><span class="line">            <span class="type">int</span> c = e[j].cap;</span><br><span class="line">            <span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == h[u] + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">int</span> a = <span class="built_in">dfs</span>(v, t, std::<span class="built_in">min</span>(r, c));</span><br><span class="line">                e[j].cap -= a;</span><br><span class="line">                e[j ^ <span class="number">1</span>].cap += a;</span><br><span class="line">                r -= a;</span><br><span class="line">                <span class="keyword">if</span> (r == <span class="number">0</span>) <span class="keyword">return</span> f;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f - r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">        e.<span class="built_in">emplace_back</span>(v, c);</span><br><span class="line">        g[v].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">        e.<span class="built_in">emplace_back</span>(u, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxFlow</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">bfs</span>(s, t)) &#123;</span><br><span class="line">            cur.<span class="built_in">assign</span>(n, <span class="number">0</span>);</span><br><span class="line">            ans += <span class="built_in">dfs</span>(s, t, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Mono-queue"><a href="#Mono-queue" class="headerlink" title="Mono queue"></a>Mono queue</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">maxv_in_window_length_k_end_at_i</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">std::deque&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>() &amp;&amp; q.<span class="built_in">back</span>() &lt; a[i]) q.<span class="built_in">pop_back</span>();</span><br><span class="line">    q.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">    <span class="keyword">if</span> (i - k &gt;= <span class="number">1</span> &amp;&amp; q.<span class="built_in">front</span>() == a[i - k]) q.<span class="built_in">pop_front</span>();</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= k) maxv_in_window_length_k_end_at_i[i] = q.<span class="built_in">front</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = k; i &lt;= n; ++i) &#123;</span><br><span class="line">    std::cout &lt;&lt; maxv_in_window_length_k_end_at_i[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Mono-stack"><a href="#Mono-stack" class="headerlink" title="Mono stack"></a>Mono stack</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">l</span><span class="params">(n + <span class="number">1</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line">std::stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">while</span> (s.<span class="built_in">size</span>() &amp;&amp; s.<span class="built_in">top</span>() &lt;= a[i]) s.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">size</span>()) l[i] = s.<span class="built_in">top</span>();</span><br><span class="line">    s.<span class="built_in">push</span>(a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    std::cout &lt;&lt; l[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Seg-merge"><a href="#Seg-merge" class="headerlink" title="Seg merge"></a>Seg merge</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;std::array&lt;<span class="type">int</span>, 2&gt;&gt; <span class="built_in">seg</span>(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    std::cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">    seg[i] = &#123;l, r&#125;;</span><br><span class="line">&#125;</span><br><span class="line">std::<span class="built_in">sort</span>(seg.<span class="built_in">begin</span>(), seg.<span class="built_in">end</span>());</span><br><span class="line">std::vector&lt;std::array&lt;<span class="type">int</span>, 2&gt;&gt; a;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> [l, r] : seg) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!a.<span class="built_in">empty</span>() &amp;&amp; l &lt;= a.<span class="built_in">back</span>()[<span class="number">1</span>]) &#123;</span><br><span class="line">        a.<span class="built_in">back</span>()[<span class="number">1</span>] = std::<span class="built_in">max</span>(a.<span class="built_in">back</span>()[<span class="number">1</span>], r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        a.<span class="built_in">push_back</span>(&#123;l, r&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Segement-tree"><a href="#Segement-tree" class="headerlink" title="Segement tree"></a>Segement tree</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    <span class="type">int</span> len; </span><br><span class="line">    i64 sum;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tag</span> &#123;</span><br><span class="line">    i64 add;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Info <span class="keyword">operator</span> + (<span class="type">const</span> Info&amp; l, <span class="type">const</span> Info&amp; r) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;l.len + r.len, l.sum + r.sum&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Info <span class="keyword">operator</span> + (<span class="type">const</span> Info&amp; v, <span class="type">const</span> Tag&amp; t) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;v.len, v.sum + t.add * v.len&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Tag <span class="keyword">operator</span> + (<span class="type">const</span> Tag&amp; t1, <span class="type">const</span> Tag&amp; t2) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;t1.add + t2.add&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    Tag t;</span><br><span class="line">    Info val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Segment_tree</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;Node&gt; seg;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; a;</span><br><span class="line">    <span class="built_in">Segment_tree</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">seg</span>(n * <span class="number">4</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">        seg[id].val = seg[id &lt;&lt; <span class="number">1</span>].val + seg[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">settag</span><span class="params">(<span class="type">int</span> id, Tag t)</span> </span>&#123;</span><br><span class="line">        seg[id].val = seg[id].val + t;</span><br><span class="line">        seg[id].t = seg[id].t  + t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (seg[id].t.add != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">settag</span>(id &lt;&lt; <span class="number">1</span>, seg[id].t);</span><br><span class="line">            <span class="built_in">settag</span>(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, seg[id].t);</span><br><span class="line">            seg[id].t.add = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt;&amp; b)</span> </span>&#123;</span><br><span class="line">        a = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            seg[id].val = &#123;<span class="number">1</span>, a[l]&#125;;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(id &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">        <span class="built_in">build</span>(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr, Tag t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == ql &amp;&amp; r == qr) &#123;</span><br><span class="line">            <span class="built_in">settag</span>(id, t);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (qr &lt;= mid) <span class="built_in">modify</span>(id &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, t);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt;= mid + <span class="number">1</span>) <span class="built_in">modify</span>(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, t);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">modify</span>(id &lt;&lt; <span class="number">1</span>, l, mid, ql, mid, t), <span class="built_in">modify</span>(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, qr, t);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Info <span class="title">query</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == ql &amp;&amp; r == qr) <span class="keyword">return</span> seg[id].val;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (qr &lt;= mid) <span class="keyword">return</span> <span class="built_in">query</span>(id &lt;&lt; <span class="number">1</span>, l, mid, ql, qr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt;= mid + <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">query</span>(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(id &lt;&lt; <span class="number">1</span>, l, mid, ql, mid) + <span class="built_in">query</span>(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, qr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="SPFA"><a href="#SPFA" class="headerlink" title="SPFA"></a>SPFA</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> i64 INF = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line">std::vector&lt;std::vector&lt;std::pair&lt;<span class="type">int</span>, i64&gt;&gt;&gt; <span class="built_in">e</span>(n + <span class="number">1</span>);</span><br><span class="line"><span class="function">std::vector&lt;i64&gt; <span class="title">d</span><span class="params">(n + <span class="number">1</span>, INF)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> spfa = [&amp;](std::vector&lt;std::vector&lt;std::pair&lt;<span class="type">int</span>, i64&gt;&gt;&gt;&amp; e, std::vector&lt;i64&gt;&amp; d, <span class="type">int</span> s) -&gt; <span class="type">bool</span> &#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; <span class="built_in">vis</span>(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">bool</span>&gt; <span class="title">st</span><span class="params">(n + <span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    std::queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    ++vis[s];</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        st[u] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (vis[u] &gt; n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> [v, w] : e[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (d[u] + w &lt; d[v]) &#123;</span><br><span class="line">                d[v] = d[u] + w;</span><br><span class="line">                <span class="keyword">if</span> (!st[v]) &#123;</span><br><span class="line">                    st[v] = <span class="literal">true</span>;</span><br><span class="line">                    ++vis[v];</span><br><span class="line">                    q.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="ST-table"><a href="#ST-table" class="headerlink" title="ST table"></a>ST table</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ST</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; fmin;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; fmax;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; Log2;</span><br><span class="line">    <span class="built_in">ST</span>(<span class="type">int</span> n = <span class="number">0</span>) : <span class="built_in">n</span>(n), <span class="built_in">fmin</span>(n + <span class="number">1</span>, std::<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">21</span>)), <span class="built_in">fmax</span>(n + <span class="number">1</span>, std::<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">21</span>)), <span class="built_in">Log2</span>(n + <span class="number">1</span>, <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            Log2[i] = Log2[i / <span class="number">2</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            fmin[i][<span class="number">0</span>] = a[i];</span><br><span class="line">            fmax[i][<span class="number">0</span>] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j + (<span class="number">1</span> &lt;&lt; i) - <span class="number">1</span> &lt;= n; ++j) &#123;</span><br><span class="line">                fmax[j][i] = std::<span class="built_in">max</span>(fmax[j][i - <span class="number">1</span>], fmax[j + (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>))][i - <span class="number">1</span>]);</span><br><span class="line">                fmin[j][i] = std::<span class="built_in">min</span>(fmin[j][i - <span class="number">1</span>], fmin[j + (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>))][i - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query_max</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> s = Log2[r - l + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> std::<span class="built_in">max</span>(fmax[l][s], fmax[r - (<span class="number">1</span> &lt;&lt; s) + <span class="number">1</span>][s]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query_min</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> s = Log2[r - l + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> std::<span class="built_in">min</span>(fmin[l][s], fmin[r - (<span class="number">1</span> &lt;&lt; s) + <span class="number">1</span>][s]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="ST-table-two-dimension"><a href="#ST-table-two-dimension" class="headerlink" title="ST table (two dimension)"></a>ST table (two dimension)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ST_two_dimension</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    std::vector&lt;std::vector&lt;std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt;&gt;&gt; fmin;</span><br><span class="line">    std::vector&lt;std::vector&lt;std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt;&gt;&gt; fmax;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; Log2;</span><br><span class="line">    <span class="built_in">ST_two_dimension</span>(<span class="type">int</span> n = <span class="number">0</span>, <span class="type">int</span> m = <span class="number">0</span>) : <span class="built_in">n</span>(n), <span class="built_in">m</span>(m), <span class="built_in">fmin</span>(n + <span class="number">1</span>, std::vector&lt;std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt;&gt;(m + <span class="number">1</span>, std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt;(<span class="number">11</span>, std::<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">11</span>)))), <span class="built_in">fmax</span>(n + <span class="number">1</span>, std::vector&lt;std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt;&gt;(m + <span class="number">1</span>, std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt;(<span class="number">11</span>, std::<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">11</span>)))), <span class="built_in">Log2</span>(std::<span class="built_in">max</span>(n, m) + <span class="number">1</span>, <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= std::<span class="built_in">max</span>(n, m); ++i) &#123;</span><br><span class="line">            Log2[i] = Log2[i / <span class="number">2</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">                fmin[i][j][<span class="number">0</span>][<span class="number">0</span>] = a[i][j];</span><br><span class="line">                fmax[i][j][<span class="number">0</span>][<span class="number">0</span>] = a[i][j];  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> t = Log2[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= t; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= t; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> r = <span class="number">1</span>; r + (<span class="number">1</span> &lt;&lt; i) - <span class="number">1</span> &lt;= n; ++r) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">1</span>; c + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= m; ++c) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (i) &#123;</span><br><span class="line">                            fmin[r][c][i][j] = std::<span class="built_in">min</span>(fmin[r][c][i - <span class="number">1</span>][j], fmin[r + (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>))][c][i - <span class="number">1</span>][j]);</span><br><span class="line">                            fmax[r][c][i][j] = std::<span class="built_in">max</span>(fmax[r][c][i - <span class="number">1</span>][j], fmax[r + (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>))][c][i - <span class="number">1</span>][j]);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            fmin[r][c][i][j] = std::<span class="built_in">min</span>(fmin[r][c][i][j - <span class="number">1</span>], fmin[r][c + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][i][j - <span class="number">1</span>]);</span><br><span class="line">                            fmax[r][c][i][j] = std::<span class="built_in">max</span>(fmax[r][c][i][j - <span class="number">1</span>], fmax[r][c + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][i][j - <span class="number">1</span>]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query_max</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> k1 = Log2[x2 - x1 + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> k2 = Log2[y2 - y1 + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> m1 = fmax[x1][y1][k1][k2];</span><br><span class="line">        <span class="type">int</span> m2 = fmax[x2 - (<span class="number">1</span> &lt;&lt; k1) + <span class="number">1</span>][y1][k1][k2];</span><br><span class="line">        <span class="type">int</span> m3 = fmax[x1][y2 - (<span class="number">1</span> &lt;&lt; k2) + <span class="number">1</span>][k1][k2];</span><br><span class="line">        <span class="type">int</span> m4 = fmax[x2 - (<span class="number">1</span> &lt;&lt; k1) + <span class="number">1</span>][y2 - (<span class="number">1</span> &lt;&lt; k2) + <span class="number">1</span>][k1][k2];</span><br><span class="line">        <span class="keyword">return</span> std::<span class="built_in">max</span>(&#123;m1, m2, m3, m4&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query_min</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> k1 = Log2[x2 - x1 + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> k2 = Log2[y2 - y1 + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> m1 = fmin[x1][y1][k1][k2];</span><br><span class="line">        <span class="type">int</span> m2 = fmin[x2 - (<span class="number">1</span> &lt;&lt; k1) + <span class="number">1</span>][y1][k1][k2];</span><br><span class="line">        <span class="type">int</span> m3 = fmin[x1][y2 - (<span class="number">1</span> &lt;&lt; k2) + <span class="number">1</span>][k1][k2];</span><br><span class="line">        <span class="type">int</span> m4 = fmin[x2 - (<span class="number">1</span> &lt;&lt; k1) + <span class="number">1</span>][y2 - (<span class="number">1</span> &lt;&lt; k2) + <span class="number">1</span>][k1][k2];</span><br><span class="line">        <span class="keyword">return</span> std::<span class="built_in">min</span>(&#123;m1, m2, m3, m4&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>XCPC</tag>
      </tags>
  </entry>
  <entry>
    <title>西方教育史</title>
    <url>/2023/09/11/western-education/</url>
    <content><![CDATA[<h2 id="记录一些西方教育史的知识"><a href="#记录一些西方教育史的知识" class="headerlink" title="记录一些西方教育史的知识"></a>记录一些西方教育史的知识</h2><span id="more"></span>
<h3 id="《理想国》"><a href="#《理想国》" class="headerlink" title="《理想国》"></a>《理想国》</h3><p>吴献书 首次翻译 《理想国》书名<br>《理想国》：对话录， 柏拉图记载的苏格拉底说出来的话<br>古希腊三杰：柏拉图，苏格拉底，亚里士多德<br>柏拉图三启蒙老师：文法奥尼西亚斯，葛老孔，亚里斯敦<br>苏格拉底的教育目的：造就治国人才<br>柏拉图的教育目的：培养哲学王<br>雅典民主弊端：苏格拉底审判<br>影响成长的因素：遗传、环境(可能性)、教育(主导)、主观能动性(动力)<br>第一个提出考试选拔人才的人：柏拉图</p>
<h3 id="《普通教育学》"><a href="#《普通教育学》" class="headerlink" title="《普通教育学》"></a>《普通教育学》</h3><p>赫尔巴特是19世纪德国哲学家、心理学家、教育家，被誉为“现代教育学之父”，“科学教育学的奠基人”，提出了“科学教育学”基本学说<br>教育学最早诞生于西方，中国的教育学是舶来品</p>
<h4 id="世界教育学发展"><a href="#世界教育学发展" class="headerlink" title="世界教育学发展"></a>世界教育学发展</h4><p>萌芽：柏拉图《理想国》<br>教育学成为学科：夸美纽斯《大教学论》<br>教育学成为科学：赫尔巴特《普通教育学》</p>
<h4 id="中国教育学发展"><a href="#中国教育学发展" class="headerlink" title="中国教育学发展"></a>中国教育学发展</h4><p>第一阶段：20世纪初，从日本学习赫尔巴特教育学<br>第二阶段：1919年至1949年，学习欧美教育学，主要学习杜威的实用主义教育思想<br>第三阶段：1949年至20世纪50年，学习苏联，凯洛夫教育学</p>
<p>王国维《教育世界》翻译了很多赫尔巴特的著作<br>《普通教育学》发表于1806年</p>
<p>“科学教育学”主要由儿童的管理论，教学论和道德论三个部分组成</p>
<p>中小学：教学、管理、训育<br>大学：教学、科研、服务</p>
<h3 id="《民主主义与教育》"><a href="#《民主主义与教育》" class="headerlink" title="《民主主义与教育》"></a>《民主主义与教育》</h3><p>杜威 美国人 内向喜欢读书 佛蒙特大学</p>
<p>五四来中国 讲学两年</p>
<h3 id="《大教学论》"><a href="#《大教学论》" class="headerlink" title="《大教学论》"></a>《大教学论》</h3><p>夸美纽斯 捷克教育家</p>
<p>重要作品：《语言入门》、《世界图解》(最早的有插图的百科全书)</p>
<p>三种住所：母亲的子宫、世上和天堂</p>
<p>教育目的：为永生做好准备</p>
<p>马丁路德：义务教育之父</p>
<p>班级授课制的设想：古罗马昆体良</p>
<p>班级授课制最早系统化论述：夸美纽斯</p>
<h3 id="《爱弥儿》"><a href="#《爱弥儿》" class="headerlink" title="《爱弥儿》"></a>《爱弥儿》</h3><p>卢梭: “归于自然”思想</p>
<p>自然的教育、事物的教育、人的教育</p>
<p>自然教育四阶段：婴儿期(0-2)、儿童期(2-12)、少年期(12-15)、青年期(15-20)</p>
]]></content>
      <tags>
        <tag>选修</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串Hash</title>
    <url>/2023/07/02/str-hash-blog/</url>
    <content><![CDATA[<h2 id="多项式Hash"><a href="#多项式Hash" class="headerlink" title="多项式Hash"></a>多项式Hash</h2><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>将字符串看作是某个进制($Base$)下的数字串<br><span id="more"></span><br>$H(S)=H(S[1,|S|-1])\times Base+S[|S|]$<br>$=S[1]\times Base^{|S|-1}+S[2]\times Base^{|S|-2}+\cdots +S[|S|]\times Base^{0}$<br>例：字符集$\sum =\lbrace a,b,\cdots,o\rbrace$,字符串就可看作$16$进制数字串<br>其中$a$对应$1$，$b$对应$2$，$\cdots$，$o$对应$15$<br>若$|S|=adenoo$，有$H(S)=145EFF_{(16)}=1335039_{(10)}$</p>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点：不考虑计算机对整形变量的值域限制，在数学上，对于多项式哈希，字符串和$Hash$值一一对应，一定不会发生$Hash$冲突<br>缺点：产生的数字很可能过大爆$i64$</p>
<h2 id="多项式取模Hash-模哈"><a href="#多项式取模Hash-模哈" class="headerlink" title="多项式取模Hash(模哈)"></a>多项式取模Hash(模哈)</h2><h3 id="思想-1"><a href="#思想-1" class="headerlink" title="思想"></a>思想</h3><p>选择一个模数$M$，解决多项式$Hash$的缺点，增加冲突率，减小值域<br>$H(S)=(S[1]\times Base^{|S|-1}+S[2]\times Base^{|S|-2}+\cdots +S[|S|]\times Base^{0})\% M$</p>
<h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点：值域缩小，方便了计算机的存储<br>缺点：增加$Hash$冲突可能性</p>
<h3 id="模哈的冲突概率"><a href="#模哈的冲突概率" class="headerlink" title="模哈的冲突概率"></a>模哈的冲突概率</h3><p>当$H(S)\neq H(T)$但$H(S)\% M=H(T)\% M$时我们称发生了模哈冲突<br>模运算可以看作是一个均匀随机散列，即每个$H(S)$会被随机映射成$[0,M-1]$内的整数<br>原来无限的值域被压缩成了一个有限值域，根据鸽巢原理，冲突一定存在<br>不妨先回顾一下生日问题：<br>$n$个人，一年$365$天，存在有人同天生日的概率<br>若$n\gt 365$，根据鸽巢原理，一定有人生日相同<br>若$n\leq 365$，则没有人生日相同的概率为$\frac{A(365,n)}{365^n}$<br>当$n=23$时，上述结果约为$0.5$，即有$0.5$的概率有人生日相同<br>将$365$看作$M$，$n$看作随机检验次数<br>可以认为随机检验次数超过$\sqrt{Mod}$时，就会有较大概率发生错误<br><strong>因此模哈中使用的$M$最好超过$Hash$检验次数的平方</strong></p>
<h3 id="Hash模数"><a href="#Hash模数" class="headerlink" title="Hash模数"></a>Hash模数</h3><p>根据前面对冲突概率的分析，<strong>优秀的$Hash$模数应该尽量大</strong><br>因此一个策略是用$ULL$保存$Hash$值，使$Hash$值自然溢出，相当于对$2^{64}$取模，但这很容易构造$Hash$冲突($BZOJ3097$)<br><strong>优秀的$Hash$模数还应该是一个质数</strong>，因为选一个大合数作模数相当于选了很多小模数<br>回顾$Hash$冲突的定义，当$H(S)\% M=H(T)\% M$而$H(S)\neq H(T)$时称哈希发生冲突<br>其中$H(S)\% M=H(T)\% M$又可以写成$(H(S)-H(T))\% M=0$<br>若$M=6$，$(H(S)-H(T))\% 6=0$蕴含了$(H(S)-H(T))\% 2=0$和$(H(S)-H(T))\% 3=0$<br>因此，如果选了一个因子很多的合数，$Hash$冲突的概率会翻非常多倍</p>
<h3 id="实际策略"><a href="#实际策略" class="headerlink" title="实际策略"></a>实际策略</h3><p>单模：选取$10^9$到$10^{10}$范围的大质数作为$Hash$模数。但也有广为人知的方法构造冲突<br>双模(甚至多模)：进行多次不同质数的单模哈希，有效降低冲突概率。在不泄露模数的前提下，没有已知方法可以构造冲突</p>
<h3 id="快速计算子串-Hash"><a href="#快速计算子串-Hash" class="headerlink" title="快速计算子串$Hash$"></a>快速计算子串$Hash$</h3><p>$H(S[l,r])=(S[l]\times Base^{r-l}+S[l+1]\times Base^{r-l-1}+\cdots +S[r]\times Base^{0})\% M$<br>令$F(i)=H(Prefix(i))$<br>$F(l-1)=(S[1]\times Base^{l-2}+S[2]\times Base^{l-3}+\cdots +S[l-1]\times Base^{0})\% M$<br>$F(r)=(S[1]\times Base^{r-1}+S[2]\times Base^{r-2}+\cdots +S[r]\times Base^{0})\% M$<br>有$H(S[l,r])=(F(r)-(F(l-1)\times Base^{r-l+1}\% M)+M)\% M$<br>直观上可以这样想，有一个数字串$12345$，我要提取出子串$345$，是通过$12345-12\times 1000$做到的<br>因此我们预处理出每一个前缀的$Hash$即可</p>
<h2 id="单模哈模板"><a href="#单模哈模板" class="headerlink" title="单模哈模板"></a>单模哈模板</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> ULL = <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Hash</span></span><br><span class="line">&#123;</span><br><span class="line">    ULL Base, Mod;</span><br><span class="line">    ULL pow[N];</span><br><span class="line">    ULL f[N];</span><br><span class="line">    std::string str;</span><br><span class="line">    <span class="built_in">Hash</span>(ULL Base, ULL Mod, std::string s) : <span class="built_in">Base</span>(Base), <span class="built_in">Mod</span>(Mod), <span class="built_in">str</span>(<span class="string">&quot;?&quot;</span> + s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n = str.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        pow[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            pow[i] = pow[i - <span class="number">1</span>] * Base % Mod;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            f[i] = (f[i - <span class="number">1</span>] * Base % Mod + str[i]) % Mod; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ULL <span class="title">getHash</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (f[r] - f[l - <span class="number">1</span>] * pow[r - l + <span class="number">1</span>] % Mod + Mod) % Mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>XCPC</tag>
      </tags>
  </entry>
  <entry>
    <title>记XCPC END</title>
    <url>/2023/12/15/xcpcend/</url>
    <content><![CDATA[<h2 id="Foreword"><a href="#Foreword" class="headerlink" title="Foreword"></a>Foreword</h2><p>虽然很失败，但还是想潦草地记录一下，为两年时紧凑时摆烂的训练画上句号<br><span id="more"></span></p>
<h2 id="西安"><a href="#西安" class="headerlink" title="西安"></a>西安</h2><p>最黑暗的一集</p>
<p>由于网络赛shit一样的发挥，起初以为ICPC只能打这一场，便寄希望于上半年来过的西安</p>
<p>可惜被南外附中的OI爷教育了数论的重要性，两个队友似乎都阳了(我为什么没阳还是个未解之谜</p>
<p>遂铁</p>
<p>一瞬间感觉暑假的多校都白打了</p>
<p>真的太黑暗了，图都不想放</p>
<p>完全道心破碎的一场比赛</p>
<h2 id="深圳"><a href="#深圳" class="headerlink" title="深圳"></a>深圳</h2><p>最堵车的一集</p>
<p>即使是上海的中环，在工作日晚上八九点这个时候也是几乎无阻的</p>
<p>这由我的回家之路便可证明</p>
<p>然而深圳就是能堵得动都动不了，周日返程时甚至更夸张</p>
<p>吃了一个已经忘掉叫什么的饭，除了鸡腿都还挺好吃</p>
<p><img src="https://s2.loli.net/2023/12/15/jPVewszvi1UIhbt.jpg"></p>
<p>还竟然住上了单人间</p>
<p><img src="https://s2.loli.net/2023/12/15/HsgGbc28LzSw5oq.jpg"></p>
<p>赛时被一道期望题卡死，三人全部宕机</p>
<p>遂铜</p>
<p><img src="https://s2.loli.net/2023/12/15/AtcTBrpMG1RKzSg.jpg"></p>
<p>这场离银线差了好像两题，没什么好遗憾的，实力差距吧</p>
<h2 id="杭州"><a href="#杭州" class="headerlink" title="杭州"></a>杭州</h2><p>最释然的一集</p>
<p>本来没料到还能来杭州，经历完前面失败的两场，其实已经在心理上觉得就这样了，就当旅个游</p>
<p>这次还住上了双层单人间</p>
<p><img src="https://s2.loli.net/2023/12/15/ZLWnl8aCVHJsEFp.jpg"></p>
<p><img src="https://s2.loli.net/2023/12/15/w5D2mUFeLafGApI.jpg"></p>
<p>看到了一个离谱翻译</p>
<p><img src="https://s2.loli.net/2023/12/15/zkwPoygMcN4HFOY.jpg"></p>
<p>开局真的很完美，光速三题，本来以为稳了</p>
<p>可惜一道正解是$Dijkstra$的题死活调不出来，队友似乎写的确实就是正解，但就是调不对</p>
<p>我从头到尾都在写一道逆天大模拟，但太菜了，也没调出来，赛后发现这个分类讨论竟然是金牌题，但感觉要是不慌还是能写的</p>
<p>另一个队友最后开出了一道期望题，但好像对结局没有改变</p>
<p>又铜</p>
<p><img src="https://s2.loli.net/2023/12/15/7acshmzoLFEj4lG.jpg"></p>
<h2 id="Endword"><a href="#Endword" class="headerlink" title="Endword"></a>Endword</h2><p>很遗憾，三场区域赛没有遇到一场有可做的计算几何题，做了很多无谓的训练</p>
<p>甚至好像没遇到可做的动态规划题，可惜了，感觉两个队友都挺擅长动态规划的</p>
]]></content>
      <tags>
        <tag>XCPC</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>CS106B Assignment1</title>
    <url>/2023/12/19/cs106b-assignment1/</url>
    <content><![CDATA[<h2 id="Foreword"><a href="#Foreword" class="headerlink" title="Foreword"></a>Foreword</h2><p>记录2022 winter的CS106B Assignment1<br><span id="more"></span></p>
<h2 id="StackOverflow"><a href="#StackOverflow" class="headerlink" title="StackOverflow"></a>StackOverflow</h2><p>熟悉栈溢出，观察Cycle是137 164 685 203 327 549</p>
<h2 id="Only-Connect"><a href="#Only-Connect" class="headerlink" title="Only Connect"></a>Only Connect</h2><p>用递归方式去掉元音</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">onlyConnectize</span><span class="params">(string phrase)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (phrase.<span class="built_in">length</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">isalpha</span>(phrase[<span class="number">0</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span> (phrase.<span class="built_in">length</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">onlyConnectize</span>(phrase.<span class="built_in">substr</span>(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    phrase[<span class="number">0</span>] = <span class="built_in">toUpperCase</span>(phrase[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> (phrase[<span class="number">0</span>] == <span class="string">&#x27;A&#x27;</span> || phrase[<span class="number">0</span>] == <span class="string">&#x27;E&#x27;</span> || phrase[<span class="number">0</span>] == <span class="string">&#x27;I&#x27;</span> || phrase[<span class="number">0</span>] == <span class="string">&#x27;O&#x27;</span> || phrase[<span class="number">0</span>] == <span class="string">&#x27;U&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (phrase.<span class="built_in">length</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">onlyConnectize</span>(phrase.<span class="built_in">substr</span>(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (phrase.<span class="built_in">length</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">        string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        res += phrase[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        res += phrase[<span class="number">0</span>];</span><br><span class="line">        res += <span class="built_in">onlyConnectize</span>(phrase.<span class="built_in">substr</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Playing-Fair"><a href="#Playing-Fair" class="headerlink" title="Playing Fair"></a>Playing Fair</h2><p>还是递归小练习，对于负数要抛出异常</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">aSequenceOfOrder</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">error</span>(<span class="string">&quot;n should be greater than or equal zero.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">aSequenceOfOrder</span>(n - <span class="number">1</span>) + <span class="built_in">bSequenceOfOrder</span>(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">bSequenceOfOrder</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;B&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">error</span>(<span class="string">&quot;n should be greater than or equal zero.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bSequenceOfOrder</span>(n - <span class="number">1</span>) + <span class="built_in">aSequenceOfOrder</span>(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Sandpiles"><a href="#Sandpiles" class="headerlink" title="Sandpiles"></a>Sandpiles</h2><p>递归练习，模拟丢沙子</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> dx[] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dy[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dropSandOn</span><span class="params">(Grid&lt;<span class="type">int</span>&gt;&amp; world, <span class="type">int</span> row, <span class="type">int</span> col)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!world.<span class="built_in">inBounds</span>(row, col)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (world[row][col] &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">        world[row][col] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        world[row][col] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> nrow = row + dx[i], ncol = col + dy[i];</span><br><span class="line">            <span class="keyword">if</span> (!world.<span class="built_in">inBounds</span>(nrow, ncol)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">dropSandOn</span>(world, nrow, ncol);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Plotter"><a href="#Plotter" class="headerlink" title="Plotter"></a>Plotter</h2><p>模拟绘图仪，熟悉Stanford的库</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">runPlotterScript</span><span class="params">(istream&amp; input)</span> </span>&#123;</span><br><span class="line">    PenStyle style = &#123;<span class="number">1</span>, <span class="string">&quot;black&quot;</span>&#125;;</span><br><span class="line">    <span class="type">bool</span> is_up = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">double</span> curx = <span class="number">0.0</span>, cury = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (string line; <span class="built_in">getline</span>(input, line); ) &#123;</span><br><span class="line">        Vector&lt;string&gt; opt = <span class="built_in">stringSplit</span>(line, <span class="string">&quot; &quot;</span>);</span><br><span class="line">        opt[<span class="number">0</span>] = <span class="built_in">toUpperCase</span>(opt[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">startsWith</span>(opt[<span class="number">0</span>], <span class="string">&quot;PEND&quot;</span>)) &#123;</span><br><span class="line">            is_up = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">startsWith</span>(opt[<span class="number">0</span>], <span class="string">&quot;PENU&quot;</span>)) &#123;</span><br><span class="line">            is_up = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">startsWith</span>(opt[<span class="number">0</span>], <span class="string">&quot;MOVEA&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!is_up) &#123;</span><br><span class="line">                <span class="built_in">drawLine</span>(curx, cury, <span class="built_in">stringToReal</span>(opt[<span class="number">1</span>]), <span class="built_in">stringToReal</span>(opt[<span class="number">2</span>]), style);</span><br><span class="line">            &#125;</span><br><span class="line">            curx = <span class="built_in">stringToReal</span>(opt[<span class="number">1</span>]), cury = <span class="built_in">stringToReal</span>(opt[<span class="number">2</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">startsWith</span>(opt[<span class="number">0</span>], <span class="string">&quot;MOVER&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!is_up) &#123;</span><br><span class="line">                <span class="built_in">drawLine</span>(curx, cury, curx + <span class="built_in">stringToReal</span>(opt[<span class="number">1</span>]), cury + <span class="built_in">stringToReal</span>(opt[<span class="number">2</span>]), style);</span><br><span class="line">            &#125;</span><br><span class="line">            curx = curx + <span class="built_in">stringToReal</span>(opt[<span class="number">1</span>]), cury = cury + <span class="built_in">stringToReal</span>(opt[<span class="number">2</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">startsWith</span>(opt[<span class="number">0</span>], <span class="string">&quot;PENC&quot;</span>)) &#123;</span><br><span class="line">            style.color = opt[<span class="number">1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            style.width = <span class="built_in">stringToReal</span>(opt[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://s2.loli.net/2023/12/26/XzGy5bhHq94aYsk.png" alt="丢沙子"></p>
<p><img src="https://s2.loli.net/2023/12/26/zCaemqoEv7FjYSG.png" alt="绘图仪"></p>
]]></content>
      <tags>
        <tag>CS106B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS106B Assignment2</title>
    <url>/2023/12/19/cs106b-assignment2/</url>
    <content><![CDATA[<h2 id="Foreword"><a href="#Foreword" class="headerlink" title="Foreword"></a>Foreword</h2><p>记录2022 winter的CS106B Assignment2<br><span id="more"></span></p>
<h2 id="Rosetta-Stone"><a href="#Rosetta-Stone" class="headerlink" title="Rosetta Stone"></a>Rosetta Stone</h2><p>利用trigram来判断一段文本属于哪种语言</p>
<p>算是对decomposition的训练</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Map&lt;string, <span class="type">double</span>&gt; <span class="title">kGramsIn</span><span class="params">(<span class="type">const</span> string&amp; str, <span class="type">int</span> kGramLength)</span> </span>&#123;</span><br><span class="line">    Map&lt;string, <span class="type">double</span>&gt; res;</span><br><span class="line">    <span class="keyword">if</span> (kGramLength &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">error</span>(<span class="string">&quot;kGramLength should be greater than zero.&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i + kGramLength - <span class="number">1</span> &lt; str.<span class="built_in">length</span>(); ++i) &#123;</span><br><span class="line">            string tmp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; kGramLength; ++j) &#123;</span><br><span class="line">                tmp += str[i + j];</span><br><span class="line">            &#125;</span><br><span class="line">            res[tmp] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Map&lt;string, <span class="type">double</span>&gt; <span class="title">normalize</span><span class="params">(<span class="type">const</span> Map&lt;string, <span class="type">double</span>&gt;&amp; input)</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> squareSum = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> key : input) &#123;</span><br><span class="line">        <span class="type">double</span> v = input[key];</span><br><span class="line">        squareSum += v * v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (squareSum == <span class="number">0.0</span>) &#123;</span><br><span class="line">        <span class="built_in">error</span>(<span class="string">&quot;The input map is meaningless.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;string, <span class="type">double</span>&gt; res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> key : input) &#123;</span><br><span class="line">        res[key] = input[key] / <span class="built_in">sqrt</span>(squareSum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Map&lt;string, <span class="type">double</span>&gt; <span class="title">topKGramsIn</span><span class="params">(<span class="type">const</span> Map&lt;string, <span class="type">double</span>&gt;&amp; source, <span class="type">int</span> numToKeep)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (numToKeep &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">error</span>(<span class="string">&quot;numToKeep should be positive.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    PriorityQueue&lt;string&gt; pq;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> key : source) &#123;</span><br><span class="line">        pq.<span class="built_in">enqueue</span>(key, source[key]);</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;string, <span class="type">double</span>&gt; res;</span><br><span class="line">    <span class="type">int</span> numToDiscard = source.<span class="built_in">size</span>() - numToKeep;</span><br><span class="line">    <span class="keyword">while</span> (pq.<span class="built_in">size</span>() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        string gram = pq.<span class="built_in">dequeue</span>();</span><br><span class="line">        <span class="keyword">if</span> (numToDiscard &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            res[gram] = source[gram];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            --numToDiscard;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">cosineSimilarityOf</span><span class="params">(<span class="type">const</span> Map&lt;string, <span class="type">double</span>&gt;&amp; lhs, <span class="type">const</span> Map&lt;string, <span class="type">double</span>&gt;&amp; rhs)</span> </span>&#123;</span><br><span class="line">    Set&lt;string&gt; both;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> key : lhs) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rhs.<span class="built_in">containsKey</span>(key)) &#123;</span><br><span class="line">            both.<span class="built_in">add</span>(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> res = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> key : both) &#123;</span><br><span class="line">        res += lhs[key] * rhs[key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">guessLanguageOf</span><span class="params">(<span class="type">const</span> Map&lt;string, <span class="type">double</span>&gt;&amp; textProfile,</span></span></span><br><span class="line"><span class="params"><span class="function">                       <span class="type">const</span> Set&lt;Corpus&gt;&amp; corpora)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (corpora.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">error</span>(<span class="string">&quot;We need more corpus.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    string ans;</span><br><span class="line">    <span class="type">double</span> curSimilarity = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> corpus : corpora) &#123;</span><br><span class="line">        <span class="type">double</span> similarity = <span class="built_in">cosineSimilarityOf</span>(textProfile, corpus.profile);</span><br><span class="line">        <span class="keyword">if</span> (curSimilarity &lt; similarity) &#123;</span><br><span class="line">            ans = corpus.name;</span><br><span class="line">            curSimilarity = similarity;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Rising-Tides"><a href="#Rising-Tides" class="headerlink" title="Rising Tides"></a>Rising Tides</h2><p>实现Flood Fill算法</p>
<p>Qt里这个作业的可视化真的满有意思</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Grid&lt;<span class="type">bool</span>&gt; <span class="title">floodedRegionsIn</span><span class="params">(<span class="type">const</span> Grid&lt;<span class="type">double</span>&gt;&amp; terrain,</span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="type">const</span> Vector&lt;GridLocation&gt;&amp; sources,</span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="type">double</span> height)</span> </span>&#123;</span><br><span class="line">    <span class="function">Grid&lt;<span class="type">bool</span>&gt; <span class="title">res</span><span class="params">(terrain.numRows(), terrain.numCols())</span></span>;</span><br><span class="line">    res.<span class="built_in">fill</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> dx[] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> dy[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">auto</span> bfs = [&amp;](<span class="type">int</span> row, <span class="type">int</span> col) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">        Queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line">        <span class="keyword">if</span> (height &gt;= terrain[row][col]) &#123;</span><br><span class="line">            q.<span class="built_in">enqueue</span>(&#123;row, col&#125;);</span><br><span class="line">            res[row][col] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [r, c] = q.<span class="built_in">dequeue</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">                <span class="type">int</span> nr = r + dx[i], nc = c + dy[i];</span><br><span class="line">                <span class="keyword">if</span> (nr &lt; <span class="number">0</span> || nr &gt;= terrain.<span class="built_in">numRows</span>() || nc &lt; <span class="number">0</span> || nc &gt;= terrain.<span class="built_in">numCols</span>()) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res[nr][nc] == <span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (terrain[nr][nc] &gt; height) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res[nr][nc] = <span class="literal">true</span>;</span><br><span class="line">                    q.<span class="built_in">enqueue</span>(&#123;nr, nc&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> source : sources) &#123;</span><br><span class="line">        <span class="type">int</span> row = source.row;</span><br><span class="line">        <span class="type">int</span> col = source.col;</span><br><span class="line">        <span class="built_in">bfs</span>(row, col);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://s2.loli.net/2023/12/26/bHvI2rmNY36dkuj.png" alt="输文本猜语言"></p>
<p><img src="https://s2.loli.net/2023/12/26/GNEr49UPnltc3H6.png" alt="海平面上升的湾区"></p>
]]></content>
      <tags>
        <tag>CS106B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS106B Assignment3</title>
    <url>/2023/12/26/cs106b-assignment3/</url>
    <content><![CDATA[<h2 id="Foreword"><a href="#Foreword" class="headerlink" title="Foreword"></a>Foreword</h2><p>记录2022 winter的CS106B Assignment3<br><span id="more"></span></p>
<h2 id="The-Sierpinski-Triangle"><a href="#The-Sierpinski-Triangle" class="headerlink" title="The Sierpinski Triangle"></a>The Sierpinski Triangle</h2><p>递归画出分形</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawSierpinskiTriangle</span><span class="params">(GWindow&amp; window,</span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="type">double</span> x0, <span class="type">double</span> y0,</span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="type">double</span> x1, <span class="type">double</span> y1,</span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="type">double</span> x2, <span class="type">double</span> y2,</span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="type">int</span> order)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (order &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">error</span> (<span class="string">&quot;The order should be greater than or equal to zero.&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (order == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">drawTriangle</span>(window, x0, y0, x1, y1, x2, y2);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">drawSierpinskiTriangle</span>(window, x0, y0, (x0 + x1) / <span class="number">2</span>, (y0 + y1) / <span class="number">2</span>, (x0 + x2) / <span class="number">2</span>, (y0 + y2) / <span class="number">2</span>, order - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">drawSierpinskiTriangle</span>(window, (x1 + x0) / <span class="number">2</span>, (y1 + y0) / <span class="number">2</span>, x1, y1, (x1 + x2) / <span class="number">2</span>, (y1 + y2) / <span class="number">2</span>, order - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">drawSierpinskiTriangle</span>(window, (x2 + x0) / <span class="number">2</span>, (y2 + y0) / <span class="number">2</span>, (x2 + x1) / <span class="number">2</span>, (y2 + y1) / <span class="number">2</span>, x2, y2, order - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Human-Pyramids"><a href="#Human-Pyramids" class="headerlink" title="Human Pyramids"></a>Human Pyramids</h2><p>需要记忆化的递归</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Map&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, <span class="type">int</span>&gt; memo;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">weightOnBackOf</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col, <span class="type">int</span> pyramidHeight)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (row &lt; <span class="number">0</span> || col &lt; <span class="number">0</span> || col &gt; row || row &gt;= pyramidHeight || pyramidHeight &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">error</span>(<span class="string">&quot;out of bounds&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (row == <span class="number">0</span> &amp;&amp; col == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (memo.<span class="built_in">containsKey</span>(&#123;row, col&#125;)) &#123;</span><br><span class="line">        <span class="keyword">return</span> memo[&#123;row, col&#125;];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">double</span> up = <span class="number">0.0</span>, upLeft = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">if</span> (row - <span class="number">1</span> &gt;= col) &#123;</span><br><span class="line">            up = <span class="number">160</span> + <span class="built_in">weightOnBackOf</span>(row - <span class="number">1</span>, col, pyramidHeight);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (row &gt;= col &amp;&amp; col &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            upLeft = <span class="number">160</span> + <span class="built_in">weightOnBackOf</span>(row - <span class="number">1</span>, col - <span class="number">1</span>, pyramidHeight);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> memo[&#123;row, col&#125;] = (up + upLeft) / <span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="What-Are-YOU-Doing"><a href="#What-Are-YOU-Doing" class="headerlink" title="What Are YOU Doing?"></a>What Are YOU Doing?</h2><p>枚举子集的递归</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Set&lt;string&gt; <span class="title">allEmphasesOf</span><span class="params">(<span class="type">const</span> string&amp; sentence)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> words = <span class="built_in">tokenize</span>(sentence);</span><br><span class="line">    Set&lt;string&gt; res;</span><br><span class="line">    <span class="keyword">auto</span> dfs = [&amp;](<span class="keyword">auto</span> self, <span class="type">int</span> u, string cur) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (u == words.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            res.<span class="built_in">add</span>(cur);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> word = words[u];</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isalpha</span>(word[<span class="number">0</span>])) &#123;</span><br><span class="line">            <span class="built_in">self</span>(self, u + <span class="number">1</span>, cur + word);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">self</span>(self, u + <span class="number">1</span>, cur + <span class="built_in">toLowerCase</span>(word));</span><br><span class="line">            <span class="built_in">self</span>(self, u + <span class="number">1</span>, cur + <span class="built_in">toUpperCase</span>(word));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">dfs</span>(dfs, <span class="number">0</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Shift-Scheduling"><a href="#Shift-Scheduling" class="headerlink" title="Shift Scheduling"></a>Shift Scheduling</h2><p>递归找最佳排班方案，需要边递归边对时间限制和重叠限制进行剪枝不然大Case会卡死</p>
<p>写的有点丑，不是很懂为什么参数里$shifts$要用$Set$存</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Set&lt;Shift&gt; <span class="title">highestValueScheduleFor</span><span class="params">(<span class="type">const</span> Set&lt;Shift&gt;&amp; shifts, <span class="type">int</span> maxHours)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (maxHours &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">error</span>(<span class="string">&quot;The maxHour should be greater than or equal to zero.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Vector&lt;Shift&gt; shiftsList;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> shift : shifts) &#123;</span><br><span class="line">        shiftsList.<span class="built_in">add</span>(shift);</span><br><span class="line">    &#125;</span><br><span class="line">    Set&lt;Shift&gt; res;</span><br><span class="line">    Vector&lt;Shift&gt; tmp;</span><br><span class="line">    <span class="type">int</span> best = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">auto</span> dfs = [&amp;](<span class="keyword">auto</span> self, <span class="type">int</span> u, <span class="type">int</span> curTime) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (u == shiftsList.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> val = <span class="number">0</span>, time = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tmp.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">                val += <span class="built_in">valueOf</span>(tmp[i]);</span><br><span class="line">                time += <span class="built_in">lengthOf</span>(tmp[i]);</span><br><span class="line">                <span class="keyword">if</span> (time &gt; maxHours) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (val &gt; best) &#123;</span><br><span class="line">                best = val;</span><br><span class="line">                res.<span class="built_in">clear</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> shift : tmp) &#123;</span><br><span class="line">                    res.<span class="built_in">add</span>(shift);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">self</span>(self, u + <span class="number">1</span>, curTime);</span><br><span class="line">        <span class="type">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tmp.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">overlapsWith</span>(shiftsList[u], tmp[i])) &#123;</span><br><span class="line">                ok = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ok &amp;&amp; curTime + <span class="built_in">lengthOf</span>(shiftsList[u]) &lt;= maxHours) &#123;</span><br><span class="line">            tmp.<span class="built_in">add</span>(shiftsList[u]);</span><br><span class="line">            <span class="built_in">self</span>(self, u + <span class="number">1</span>, curTime + <span class="built_in">lengthOf</span>(shiftsList[u]));</span><br><span class="line">            tmp.<span class="built_in">remove</span>(tmp.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">dfs</span>(dfs, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://s2.loli.net/2023/12/26/mSKC9PvpIQT3jHB.png" alt="谢尔宾斯基三角形"></p>
<p><img src="https://s2.loli.net/2023/12/26/Y7RBovXqSHpfLrZ.png" alt="人肉金字塔"></p>
<p><img src="https://s2.loli.net/2023/12/26/3TRSWlYtsCGKL9I.png" alt="你什么意思!"></p>
<p><img src="https://s2.loli.net/2023/12/26/h4swOCfUycR6aTj.png" alt="排班"></p>
]]></content>
      <tags>
        <tag>CS106B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS106B Assignment4</title>
    <url>/2024/02/01/cs106b-assignment4/</url>
    <content><![CDATA[<h2 id="Foreword"><a href="#Foreword" class="headerlink" title="Foreword"></a>Foreword</h2><p>记录2022 winter的CS106B Assignment4<br><span id="more"></span></p>
<h2 id="Debugging-Pratice"><a href="#Debugging-Pratice" class="headerlink" title="Debugging Pratice"></a>Debugging Pratice</h2><p>可视化汉诺塔过程并调试一个broken的排列程序</p>
<p>其实就是一个地方把+=改成+就好了</p>
<h2 id="Matchmaker"><a href="#Matchmaker" class="headerlink" title="Matchmaker"></a>Matchmaker</h2><h3 id="Perfect-match"><a href="#Perfect-match" class="headerlink" title="Perfect match"></a>Perfect match</h3><p>大概就是有若干个人，每个人都有几个心仪的匹配者，问是否有完美匹配使得每个人都匹配到一个自己的心仪者</p>
<p>递归去解决小问题，对当前问题挑一个人，枚举他和谁配对，然后摘出这两个人对子问题看是否有完美匹配</p>
<p>如果最后的子问题是空集，就说明找到了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">hasPerfectMatching</span><span class="params">(<span class="type">const</span> Map&lt;string, Set&lt;string&gt;&gt;&amp; possibleLinks, Set&lt;Pair&gt;&amp; matching)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (possibleLinks.<span class="built_in">isEmpty</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    string person = possibleLinks.<span class="built_in">firstKey</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> another : possibleLinks[person]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!possibleLinks.<span class="built_in">containsKey</span>(another)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : matching) &#123;</span><br><span class="line">            <span class="keyword">if</span> (another == x.<span class="built_in">first</span>() || another == x.<span class="built_in">second</span>()) &#123;</span><br><span class="line">                ok = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">            Pair newPair = &#123;person, another&#125;;</span><br><span class="line">            <span class="keyword">auto</span> subPossibleLinks = possibleLinks;</span><br><span class="line">            Set&lt;Pair&gt; subMatching;</span><br><span class="line">            subMatching = matching + newPair;</span><br><span class="line">            subPossibleLinks.<span class="built_in">remove</span>(person);</span><br><span class="line">            subPossibleLinks.<span class="built_in">remove</span>(another);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">hasPerfectMatching</span>(subPossibleLinks, subMatching)) &#123;</span><br><span class="line">                matching = subMatching;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Maximum-weight-match"><a href="#Maximum-weight-match" class="headerlink" title="Maximum weight match"></a>Maximum weight match</h3><p>赋上边权，求最大权的匹配，不要求是完美匹配</p>
<p>用惯了STL好难习惯斯坦福这个库</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">maximumWeightMatchingAux</span><span class="params">(<span class="type">const</span> Map&lt;string, Map&lt;string, <span class="type">int</span>&gt;&gt;&amp; possibleLinks, <span class="type">const</span> Set&lt;string&gt;&amp; people, Set&lt;Pair&gt;&amp; res, <span class="type">const</span> Set&lt;Pair&gt;&amp; matching, <span class="type">int</span>&amp; maxValue, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (people.<span class="built_in">size</span>() &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value &gt; maxValue) &#123;</span><br><span class="line">            maxValue = value;</span><br><span class="line">            res = matching;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    string person = people.<span class="built_in">first</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> another : possibleLinks[person]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (people.<span class="built_in">contains</span>(another)) &#123;</span><br><span class="line">            <span class="function">Pair <span class="title">partner</span><span class="params">(person, another)</span></span>;</span><br><span class="line">            <span class="built_in">maximumWeightMatchingAux</span>(possibleLinks, people - person - another, res, matching + partner, maxValue, value + possibleLinks[person][another]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">maximumWeightMatchingAux</span>(possibleLinks, people - person, res, matching, maxValue, value);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Set&lt;Pair&gt; <span class="title">maximumWeightMatching</span><span class="params">(<span class="type">const</span> Map&lt;string, Map&lt;string, <span class="type">int</span>&gt;&gt;&amp; possibleLinks)</span> </span>&#123;</span><br><span class="line">    Set&lt;Pair&gt; res;</span><br><span class="line">    Set&lt;string&gt; people;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> person : possibleLinks) &#123;</span><br><span class="line">        people.<span class="built_in">add</span>(person);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> maxValue = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">maximumWeightMatchingAux</span>(possibleLinks, people, res, &#123;&#125;, maxValue, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Disater-Planning"><a href="#Disater-Planning" class="headerlink" title="Disater Planning"></a>Disater Planning</h2><p>几座城市由道路连接起来，选几座城市放应急物资使得灾难来临时每个城市都是安全的</p>
<p>一个城市是安全的当且仅当这座城市自身或邻居有应急物资</p>
<p>限制选择城市的个数，问有没有这样的合法方案</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">canBeMadeDisasterReadyAux</span><span class="params">(<span class="type">const</span> Map&lt;string, Set&lt;string&gt;&gt;&amp; roadNetwork, <span class="type">int</span> numCities, Set&lt;string&gt;&amp; supplyLocations, Set&lt;string&gt;&amp; unsafe)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (numCities == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.<span class="built_in">isEmpty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (unsafe.<span class="built_in">isEmpty</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> city = unsafe.<span class="built_in">first</span>();</span><br><span class="line">    Set&lt;string&gt; tmp = unsafe - city - roadNetwork[city];</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">canBeMadeDisasterReadyAux</span>(roadNetwork, numCities - <span class="number">1</span>, supplyLocations, tmp)) &#123;</span><br><span class="line">        supplyLocations.<span class="built_in">add</span>(city);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> neigh : roadNetwork[city]) &#123;</span><br><span class="line">        tmp = unsafe - neigh - roadNetwork[neigh];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">canBeMadeDisasterReadyAux</span>(roadNetwork, numCities - <span class="number">1</span>, supplyLocations, tmp)) &#123;</span><br><span class="line">            supplyLocations.<span class="built_in">add</span>(neigh);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">canBeMadeDisasterReady</span><span class="params">(<span class="type">const</span> Map&lt;string, Set&lt;string&gt;&gt;&amp; roadNetwork,</span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="type">int</span> numCities,</span></span></span><br><span class="line"><span class="params"><span class="function">                            Set&lt;string&gt;&amp; supplyLocations)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (numCities &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">error</span>(<span class="string">&quot;numCities should be greater than zero.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Set&lt;string&gt; unsafe;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> city : roadNetwork) &#123;</span><br><span class="line">        unsafe.<span class="built_in">add</span>(city);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">canBeMadeDisasterReadyAux</span>(roadNetwork, numCities, supplyLocations, unsafe);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://s2.loli.net/2024/03/01/OgUueb6TJm7lkGa.png" alt="匹配制造者"></p>
<p><img src="https://s2.loli.net/2024/03/01/8RYxV9Kd2tkj3ov.png" alt="灾难计划"></p>
]]></content>
      <tags>
        <tag>CS106B</tag>
      </tags>
  </entry>
  <entry>
    <title>跑步</title>
    <url>/2024/02/27/runlife/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><del>在4.21上海半马前，将持续记录跑步情况</del></p>
<p>很好，错过了报名</p>
<p>就当没有中签，那就先记录到能一口气$10km$</p>
<span id="more"></span>
<h3 id="2-26"><a href="#2-26" class="headerlink" title="2.26"></a>2.26</h3><p><img src="https://s2.loli.net/2024/03/01/Slm5cyQqBkJKjTG.jpg" alt="过完年首跑，拉中拉"></p>
<h3 id="2-27"><a href="#2-27" class="headerlink" title="2.27"></a>2.27</h3><p><img src="https://s2.loli.net/2024/03/01/Uc5oJgiGTQKneyX.jpg" alt="康复还挺快，一口气三公里了"></p>
<h3 id="2-28-2-29"><a href="#2-28-2-29" class="headerlink" title="2.28 / 2.29"></a>2.28 / 2.29</h3><p>下雨，休息</p>
<h3 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h3><p><img src="https://s2.loli.net/2024/03/01/xpKDfvkeMW4I3a7.jpg" alt="忘记拿衣服回家了，冷死，1+1+1.5km"></p>
<h3 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h3><p><img src="https://s2.loli.net/2024/03/02/wS7CO8KUdfulRbc.jpg" alt="1.25+1.25+1.5km"></p>
<h3 id="3-3"><a href="#3-3" class="headerlink" title="3.3"></a>3.3</h3><p><img src="https://s2.loli.net/2024/03/04/zxmGVOepsT4E2L9.jpg" alt="有点疲软，中间跑岔气了"></p>
<h3 id="3-4-3-5"><a href="#3-4-3-5" class="headerlink" title="3.4 / 3.5"></a>3.4 / 3.5</h3><p>下雨，休息</p>
<h3 id="3-6"><a href="#3-6" class="headerlink" title="3.6"></a>3.6</h3><p><img src="https://s2.loli.net/2024/03/06/folTa2ZkU6xsDGK.jpg" alt="休息两天脚感相当好，1+1.5+2.5km"></p>
<h3 id="3-7"><a href="#3-7" class="headerlink" title="3.7"></a>3.7</h3><p>打了篮球，打完随便跑了1km</p>
<h3 id="3-8"><a href="#3-8" class="headerlink" title="3.8"></a>3.8</h3><p><img src="https://s2.loli.net/2024/03/09/pIcPBrFNfMODUtG.jpg" alt="五组间歇，现在的目标是稳住跑量提速度"></p>
<h3 id="3-9"><a href="#3-9" class="headerlink" title="3.9"></a>3.9</h3><p>打篮球把脚崴了，完犊子了</p>
<h3 id="3-10-3-17"><a href="#3-10-3-17" class="headerlink" title="3.10 - 3.17"></a>3.10 - 3.17</h3><p>预计起码休息一周再慢慢开始康复训练</p>
<h3 id="3-18"><a href="#3-18" class="headerlink" title="3.18"></a>3.18</h3><p>走路基本正常，脚上淤青还没消完，但是好想跑，看情况再休几天</p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>CS106B Assignment5</title>
    <url>/2024/03/02/cs106b-assignment5/</url>
    <content><![CDATA[<h2 id="Foreword"><a href="#Foreword" class="headerlink" title="Foreword"></a>Foreword</h2><p>记录2022 winter的CS106B Assignment5<br><span id="more"></span></p>
<h2 id="Big-O-Analysis"><a href="#Big-O-Analysis" class="headerlink" title="Big-O Analysis"></a>Big-O Analysis</h2><p>分析一下几个函数的时间复杂度</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">The big-O time complexity of the function...</span><br><span class="line"></span><br><span class="line">... printH is O(n^2),</span><br><span class="line">... printC is O(n),</span><br><span class="line">... printI is O(n^2),</span><br><span class="line">... printP is O(n^2),</span><br><span class="line">... printChip is O(n^2),</span><br><span class="line">... countTriples is O(n^3),</span><br><span class="line">... printCycle_v1 is O(n^2),</span><br><span class="line">... printCycle_v2 is O(n^2),</span><br><span class="line">... printCycle_v3 is O(n),</span><br><span class="line">... recursivePuzzle is O(n),</span><br><span class="line">... recursiveEnigma is O(logn),</span><br><span class="line">... maximumSingleSellProfit_v1 is O(n^2), and</span><br><span class="line">... maximumSingleSellProfit_v2 is O(nlogn)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Matchmaker-Revisited"><a href="#Matchmaker-Revisited" class="headerlink" title="Matchmaker Revisited"></a>Matchmaker Revisited</h2><p>对于上一个Assignment的最大权匹配有个带花树算法(OIWIKI上甚至有)</p>
<p>让估计它的复杂度</p>
<p>估计出来大概是$O(n^3)$，假设我的电脑一秒能有$10^8$的运算量的话</p>
<p>和OIWIKI上写的复杂度也差不多</p>
<h2 id="On-Efficiency"><a href="#On-Efficiency" class="headerlink" title="On Efficiency"></a>On Efficiency</h2><p>讲了一个IBM的故事..告诫学生对于一个算法除了时间复杂度还要考察很多方面..</p>
<h2 id="Combine"><a href="#Combine" class="headerlink" title="Combine"></a>Combine</h2><p>有$k$个有序的，长短可能不一的数组，怎么把它们有序的合并成一个数组</p>
<p>要求用$O(nlogk)$的算法，思想大概是$k$层递归，每层把当前$k$个数组分成前一半和后一半</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Vector&lt;DataPoint&gt; <span class="title">combineTwoSequences</span><span class="params">(Vector&lt;DataPoint&gt; s1, Vector&lt;DataPoint&gt; s2)</span> </span>&#123;</span><br><span class="line">    Vector&lt;DataPoint&gt; res;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; s1.<span class="built_in">size</span>() || j &lt; s2.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == s1.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            res.<span class="built_in">add</span>(s2[j++]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == s2.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            res.<span class="built_in">add</span>(s1[i++]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="built_in">add</span>((s1[i].weight &lt; s2[j].weight ? s1[i++] : s2[j++]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Vector&lt;DataPoint&gt; <span class="title">combine</span><span class="params">(<span class="type">const</span> Vector&lt;Vector&lt;DataPoint&gt;&gt;&amp; sequences)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sequences.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sequences.<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> sequences[<span class="number">0</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sequences.<span class="built_in">size</span>() == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">combineTwoSequences</span>(sequences[<span class="number">0</span>], sequences[<span class="number">1</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> k = sequences.<span class="built_in">size</span>();</span><br><span class="line">        Vector&lt;Vector&lt;DataPoint&gt;&gt; sequencesLeft, sequencesRight;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; k / <span class="number">2</span>) &#123;</span><br><span class="line">                sequencesLeft.<span class="built_in">add</span>(sequences[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sequencesRight.<span class="built_in">add</span>(sequences[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Vector&lt;DataPoint&gt; left = <span class="built_in">combine</span>(sequencesLeft);</span><br><span class="line">        Vector&lt;DataPoint&gt; right = <span class="built_in">combine</span>(sequencesRight);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">combineTwoSequences</span>(left, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://s2.loli.net/2024/03/02/ZAb1NnLIKedrEGX.png" alt="数组合并的时间复杂度验证"></p>
]]></content>
      <tags>
        <tag>CS106B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS106B Assignment6</title>
    <url>/2024/03/04/cs106b-assignment6/</url>
    <content><![CDATA[<h2 id="Foreword"><a href="#Foreword" class="headerlink" title="Foreword"></a>Foreword</h2><p>记录2022 winter的CS106B Assignment6<br><span id="more"></span></p>
<h2 id="Beyond-the-Bounds-of-Arrays"><a href="#Beyond-the-Bounds-of-Arrays" class="headerlink" title="Beyond the Bounds of Arrays"></a>Beyond the Bounds of Arrays</h2><p>练习一下怎么用debugger看指针指向的数组</p>
<h2 id="Priority-Queues-and-Binary-Heaps"><a href="#Priority-Queues-and-Binary-Heaps" class="headerlink" title="Priority Queues and Binary Heaps"></a>Priority Queues and Binary Heaps</h2><p>用二叉堆实现一个优先队列</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;HeapPQueue.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">HeapPQueue::<span class="built_in">HeapPQueue</span>() &#123;</span><br><span class="line">    elems = <span class="keyword">new</span> DataPoint[INITIAL_SIZE];</span><br><span class="line">    logicalSize = <span class="number">0</span>;</span><br><span class="line">    allocatedSize = INITIAL_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HeapPQueue::~<span class="built_in">HeapPQueue</span>() &#123;</span><br><span class="line">    <span class="keyword">delete</span>[] elems;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">HeapPQueue::size</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> logicalSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">HeapPQueue::isEmpty</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> logicalSize == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HeapPQueue::enqueue</span><span class="params">(<span class="type">const</span> DataPoint&amp; data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (logicalSize + <span class="number">1</span> &gt;= allocatedSize) &#123;</span><br><span class="line">        allocatedSize *= <span class="number">2</span>;</span><br><span class="line">        DataPoint* tmp = <span class="keyword">new</span> DataPoint[allocatedSize];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= logicalSize; ++i) &#123;</span><br><span class="line">            tmp[i] = elems[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[] elems;</span><br><span class="line">        elems = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    elems[++logicalSize] = data;</span><br><span class="line">    <span class="type">int</span> cur = logicalSize;</span><br><span class="line">    <span class="keyword">while</span> (cur &gt; <span class="number">1</span> &amp;&amp; elems[cur].weight &lt; elems[cur / <span class="number">2</span>].weight) &#123;</span><br><span class="line">        std::<span class="built_in">swap</span>(elems[cur], elems[cur / <span class="number">2</span>]);</span><br><span class="line">        cur /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DataPoint <span class="title">HeapPQueue::peek</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isEmpty</span>()) &#123;</span><br><span class="line">        <span class="built_in">error</span>(<span class="string">&quot;The HeapPQueue is empty.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> elems[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DataPoint <span class="title">HeapPQueue::dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isEmpty</span>()) &#123;</span><br><span class="line">        <span class="built_in">error</span>(<span class="string">&quot;The HeapPQueue is empty.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    DataPoint res = elems[<span class="number">1</span>];</span><br><span class="line">    std::<span class="built_in">swap</span>(elems[<span class="number">1</span>], elems[logicalSize--]);</span><br><span class="line">    <span class="type">int</span> cur = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> lson = cur * <span class="number">2</span>, rson = cur * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (lson &lt;= logicalSize &amp;&amp; rson &lt;= logicalSize) &#123;</span><br><span class="line">            <span class="keyword">if</span> (elems[lson].weight &lt; elems[rson].weight) &#123;</span><br><span class="line">                <span class="keyword">if</span> (elems[lson].weight &lt; elems[cur].weight) &#123;</span><br><span class="line">                    std::<span class="built_in">swap</span>(elems[lson], elems[cur]);</span><br><span class="line">                    cur = lson;</span><br><span class="line">                    lson = cur * <span class="number">2</span>, rson = cur * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (elems[rson].weight &lt; elems[cur].weight) &#123;</span><br><span class="line">                    std::<span class="built_in">swap</span>(elems[rson], elems[cur]);</span><br><span class="line">                    cur = rson;</span><br><span class="line">                    lson = cur * <span class="number">2</span>, rson = cur * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lson &lt;= logicalSize) &#123;</span><br><span class="line">            <span class="keyword">if</span> (elems[lson].weight &lt; elems[cur].weight) &#123;</span><br><span class="line">                std::<span class="built_in">swap</span>(elems[lson], elems[cur]);</span><br><span class="line">                cur = lson;</span><br><span class="line">                lson = cur * <span class="number">2</span>, rson = cur * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rson &lt;= logicalSize) &#123;</span><br><span class="line">            <span class="keyword">if</span> (elems[rson].weight &lt; elems[cur].weight) &#123;</span><br><span class="line">                std::<span class="built_in">swap</span>(elems[rson], elems[cur]);</span><br><span class="line">                cur = rson;</span><br><span class="line">                lson = cur * <span class="number">2</span>, rson = cur * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Apportionment"><a href="#Apportionment" class="headerlink" title="Apportionment"></a>Apportionment</h2><p>利用自己实现的HeapPQueue实现美国分配给每个州不同议会席位的算法</p>
<p>利用负数转换小根堆与大根堆</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Map&lt;string, <span class="type">int</span>&gt; <span class="title">apportion</span><span class="params">(<span class="type">const</span> Map&lt;string, <span class="type">int</span>&gt;&amp; populations, <span class="type">int</span> numSeats)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (populations.<span class="built_in">size</span>() &gt; numSeats) &#123;</span><br><span class="line">        <span class="built_in">error</span>(<span class="string">&quot;There are less seats than states.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;string, <span class="type">int</span>&gt; res;</span><br><span class="line">    HeapPQueue hpq;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> state : populations) &#123;</span><br><span class="line">        res[state] = <span class="number">1</span>;</span><br><span class="line">        hpq.<span class="built_in">enqueue</span>(&#123;state, (-populations[state] / <span class="built_in">sqrt</span>(<span class="number">2.0</span>))&#125;);</span><br><span class="line">        --numSeats;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (numSeats--) &#123;</span><br><span class="line">        <span class="keyword">auto</span> u = hpq.<span class="built_in">dequeue</span>();</span><br><span class="line">        res[u.name] += <span class="number">1</span>;</span><br><span class="line">        hpq.<span class="built_in">enqueue</span>(&#123;u.name, (-populations[u.name] / <span class="built_in">sqrt</span>(res[u.name] * (res[u.name] + <span class="number">1</span>)))&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://s2.loli.net/2024/03/04/VXkARiF45qwKIrv.png" alt="HeapPQueue"></p>
<p><img src="https://s2.loli.net/2024/03/04/nd7zcHt1fUAm4aC.png" alt="议会席位"></p>
]]></content>
      <tags>
        <tag>CS106B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS106B Assignment7</title>
    <url>/2024/03/05/cs106b-assignment7/</url>
    <content><![CDATA[<h2 id="Foreword"><a href="#Foreword" class="headerlink" title="Foreword"></a>Foreword</h2><p>记录2022 winter的CS106B Assignment7<br><span id="more"></span></p>
<h2 id="Enumerations-Warmup"><a href="#Enumerations-Warmup" class="headerlink" title="Enumerations Warmup"></a>Enumerations Warmup</h2><p>熟悉一下枚举类型</p>
<h2 id="Linear-Probing-Warmup"><a href="#Linear-Probing-Warmup" class="headerlink" title="Linear Probing Warmup"></a>Linear Probing Warmup</h2><p>熟悉一下线性探测哈希</p>
<h2 id="Implementing-Linear-Probing"><a href="#Implementing-Linear-Probing" class="headerlink" title="Implementing Linear Probing"></a>Implementing Linear Probing</h2><p>实现LinearProbingHashTable.h</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;LinearProbingHashTable.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">LinearProbingHashTable::<span class="built_in">LinearProbingHashTable</span>(HashFunction&lt;string&gt; hashFn) &#123;</span><br><span class="line">    myHash = hashFn;</span><br><span class="line">    allocatedSize = hashFn.<span class="built_in">numSlots</span>();</span><br><span class="line">    elems = <span class="keyword">new</span> Slot[allocatedSize];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; allocatedSize; ++i) &#123;</span><br><span class="line">        elems[i].type = SlotType::EMPTY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LinearProbingHashTable::~<span class="built_in">LinearProbingHashTable</span>() &#123;</span><br><span class="line">    <span class="keyword">delete</span>[] elems;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LinearProbingHashTable::size</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> logicalSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">LinearProbingHashTable::isEmpty</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> logicalSize == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">LinearProbingHashTable::insert</span><span class="params">(<span class="type">const</span> string&amp; elem)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> hash = <span class="built_in">myHash</span>(elem) % allocatedSize;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logicalSize == allocatedSize) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elems[hash].type == SlotType::EMPTY) &#123;</span><br><span class="line">            elems[hash].value = elem;</span><br><span class="line">            elems[hash].type = SlotType::FILLED;</span><br><span class="line">            ++logicalSize;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elems[hash].type == SlotType::FILLED) &#123;</span><br><span class="line">            <span class="keyword">if</span> (elems[hash].value == elem) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elems[hash].type == SlotType::TOMBSTONE) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">contains</span>(elem)) &#123;</span><br><span class="line">                elems[hash].value = elem;</span><br><span class="line">                elems[hash].type = SlotType::FILLED;</span><br><span class="line">                ++logicalSize;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        hash = (hash + <span class="number">1</span>) % allocatedSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">LinearProbingHashTable::contains</span><span class="params">(<span class="type">const</span> string&amp; elem)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> hash = <span class="built_in">myHash</span>(elem) % allocatedSize;</span><br><span class="line">    <span class="type">int</span> T = logicalSize;</span><br><span class="line">    <span class="keyword">while</span> (T) &#123;</span><br><span class="line">        <span class="keyword">if</span> (elems[hash].type == SlotType::FILLED &amp;&amp; elems[hash].value == elem) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elems[hash].type == SlotType::EMPTY) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elems[hash].type == SlotType::FILLED) &#123;</span><br><span class="line">            --T;</span><br><span class="line">        &#125;</span><br><span class="line">        hash = (hash + <span class="number">1</span>) % allocatedSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">LinearProbingHashTable::remove</span><span class="params">(<span class="type">const</span> string&amp; elem)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">contains</span>(elem)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> hash = <span class="built_in">myHash</span>(elem) % allocatedSize;</span><br><span class="line">    <span class="type">int</span> T = logicalSize;</span><br><span class="line">    <span class="keyword">while</span> (T) &#123;</span><br><span class="line">        <span class="keyword">if</span> (elems[hash].type == SlotType::EMPTY) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elems[hash].type == SlotType::FILLED) &#123;</span><br><span class="line">            <span class="keyword">if</span> (elems[hash].value == elem) &#123;</span><br><span class="line">                --logicalSize;</span><br><span class="line">                elems[hash].value.<span class="built_in">clear</span>();</span><br><span class="line">                elems[hash].type = SlotType::TOMBSTONE;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            --T;</span><br><span class="line">        &#125;</span><br><span class="line">        hash = (hash + <span class="number">1</span>) % allocatedSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Robin-Hood-Warmup"><a href="#Robin-Hood-Warmup" class="headerlink" title="Robin Hood Warmup"></a>Robin Hood Warmup</h2><p>熟悉一下Robin Hood哈希</p>
<p>主要思想是让每个key离它的home slot尽量近</p>
<h2 id="Robin-Hood-Hashing"><a href="#Robin-Hood-Hashing" class="headerlink" title="Robin Hood Hashing"></a>Robin Hood Hashing</h2><p>实现RobinHoodHashTable.h</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;RobinHoodHashTable.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">RobinHoodHashTable::<span class="built_in">RobinHoodHashTable</span>(HashFunction&lt;string&gt; hashFn) &#123;</span><br><span class="line">    myHash = hashFn;</span><br><span class="line">    allocatedSize = hashFn.<span class="built_in">numSlots</span>();</span><br><span class="line">    elems = <span class="keyword">new</span> Slot[allocatedSize];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; allocatedSize; ++i) &#123;</span><br><span class="line">        elems[i].distance = EMPTY_SLOT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RobinHoodHashTable::~<span class="built_in">RobinHoodHashTable</span>() &#123;</span><br><span class="line">    <span class="keyword">delete</span>[] elems;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RobinHoodHashTable::size</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> logicalSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">RobinHoodHashTable::isEmpty</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> logicalSize == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">RobinHoodHashTable::insert</span><span class="params">(<span class="type">const</span> string&amp; elem)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">contains</span>(elem) || logicalSize == allocatedSize) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> hash = <span class="built_in">myHash</span>(elem) % allocatedSize;</span><br><span class="line">    <span class="type">int</span> dis = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (elems[hash].distance == EMPTY_SLOT) &#123;</span><br><span class="line">            ++logicalSize;</span><br><span class="line">            elems[hash].value = elem;</span><br><span class="line">            elems[hash].distance = dis;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elems[hash].distance &lt; dis) &#123;</span><br><span class="line">            <span class="keyword">auto</span> hostage = elems[hash].value;</span><br><span class="line">            elems[hash].value = elem;</span><br><span class="line">            elems[hash].distance = dis;</span><br><span class="line">            <span class="built_in">insert</span>(hostage);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ++dis;</span><br><span class="line">        hash = (hash + <span class="number">1</span>) % allocatedSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">RobinHoodHashTable::contains</span><span class="params">(<span class="type">const</span> string&amp; elem)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (logicalSize == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> hash = <span class="built_in">myHash</span>(elem) % allocatedSize;</span><br><span class="line">    <span class="type">int</span> dis = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (elems[hash].distance == EMPTY_SLOT) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elems[hash].value == elem) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elems[hash].distance &lt; dis) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ++dis;</span><br><span class="line">        hash = (hash + <span class="number">1</span>) % allocatedSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">RobinHoodHashTable::remove</span><span class="params">(<span class="type">const</span> string&amp; elem)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">contains</span>(elem) || logicalSize == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> hash = <span class="built_in">myHash</span>(elem) % allocatedSize;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (elems[hash].value == elem) &#123;</span><br><span class="line">            elems[hash].distance = EMPTY_SLOT;</span><br><span class="line">            elems[hash].value.<span class="built_in">clear</span>();</span><br><span class="line">            --logicalSize;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">int</span> nxt = (hash + <span class="number">1</span>) % allocatedSize;</span><br><span class="line">                <span class="keyword">if</span> (elems[nxt].distance == EMPTY_SLOT || elems[nxt].distance == <span class="number">0</span>) &#123;</span><br><span class="line">                    elems[hash].distance = EMPTY_SLOT;</span><br><span class="line">                    elems[hash].value.<span class="built_in">clear</span>();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                elems[hash].value = elems[nxt].value;</span><br><span class="line">                elems[hash].distance = elems[nxt].distance - <span class="number">1</span>;</span><br><span class="line">                hash = nxt;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        hash = (hash + <span class="number">1</span>) % allocatedSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://s2.loli.net/2024/03/05/ENqmQ8i1u46Zx3U.png" alt="性能分析"></p>
]]></content>
      <tags>
        <tag>CS106B</tag>
      </tags>
  </entry>
  <entry>
    <title>MapReduce</title>
    <url>/2024/03/06/mapreduce/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><a href="http://nil.csail.mit.edu/6.824/2020/papers/mapreduce.pdf">MapReduce</a>旨在提供抽象，让没有并行编程基础的人也能利用分布式系统的资源</p>
<span id="more"></span>
<h2 id="Programming-Model"><a href="#Programming-Model" class="headerlink" title="Programming Model"></a>Programming Model</h2><p>map    (k1, v1)       -&gt; list(k2, v2)</p>
<p>reduce (k2, list(v2)) -&gt; list(v2)</p>
<p>e.g. 单词记数</p>
<p>map    (文档名，文档内容)      -&gt; list(单词， 出现次数)</p>
<p>reduce (单词， list(出现次数)) -&gt; list(出现次数)</p>
<p>思想核心是经过谷歌大量重复的编写数据处理类的程序,发现所有数据处理的程序都有类似的过程:</p>
<p>将一组输入的数据应用map函数返回一个k/v对的结构作为中间数据集,并将具有相同key的数据输入到一个reduce函数中执行,最终返回处理后的结果</p>
<p>这个计算模型抽象出来就是MapReduce，而且由于map的过程可在多台机器上互无依赖地并行执行，有利于并行化，reduce过程同理</p>
<p>reduce过程要在map过程全部结束后开始执行</p>
<p><img src="https://s2.loli.net/2024/03/07/aYgd4TPZtpRofDy.png" alt="来自油管上感觉很清晰的图"></p>
<p><img src="https://s2.loli.net/2024/03/07/EtA9JGWXqV4DuLm.png" alt="倒排索引的MapReduce过程"></p>
<h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><h3 id="OverView"><a href="#OverView" class="headerlink" title="OverView"></a>OverView</h3><ol>
<li><p>输入文件会被分成M份，每份大小可由user调参</p>
</li>
<li><p>是主从式并行，主节点给工作节点分配任务，有M个map任务和R个reduce任务</p>
</li>
<li><p>分配到map任务的工作节点会把输入数据里的KV对解析出来，传入Map函数，得到的中间数据集在内存中缓存</p>
</li>
<li><p>周期性地，缓存中的KV对会被写入本地磁盘，在磁盘上被分成R块(根据partition函数，每个map工作节点都输出R个文件，每个对应一个reduce任务)，这些KV对的地址会被传回给主节点</p>
</li>
<li><p>当一个reduce工作节点被主节点告知了KV对的地址，会通过RPC去读这些数据，然后读完以后，按key给这些KV排序，这样相同key的数据就挨着了；如果中间数据集量太大，不能全部放入内存，会用外部排序</p>
</li>
<li><p>reduce工作节点遍历排序好的数据，每遇到一个key就将这组传给Reduce函数，输出会写到该reduce分区最终文件末尾(最后会有R个输出文件)</p>
</li>
<li><p>所有工作节点结束工作以后，主节点唤醒用户程序，MapReduce调用返回值给用户程序</p>
</li>
</ol>
<p>关于5中要用RPC来读数据的原因(from gpt 4.0)：Map阶段处理的数据被存储在map工作节点的本地磁盘上。当Reduce阶段开始时，reduce工作节点需要从多个map工作节点读取这些数据以进行进一步处理。这里涉及的是跨网络的数据访问，即reduce工作节点需要远程访问map工作节点的数据。RPC在这个场景中被用作一种高效(抽象了底部细节)、可靠(RPC有自动重试机制等)的远程数据访问机制</p>
<h3 id="Master-Data-Structures"><a href="#Master-Data-Structures" class="headerlink" title="Master Data Structures"></a>Master Data Structures</h3><p>主节点要维护每个map和reduce任务的状态(空闲，进行中，完成)，正在工作的机器的ID，map任务完成产生的R个中间文件的位置和大小</p>
<h3 id="Fault-Tolerance"><a href="#Fault-Tolerance" class="headerlink" title="Fault Tolerance"></a>Fault Tolerance</h3><h4 id="Worker-Failure"><a href="#Worker-Failure" class="headerlink" title="Worker Failure"></a>Worker Failure</h4><p>主节点会周期性地ping工作节点，如果其没有及时应答就视作失效</p>
<p>然后以下任务会重新执行：这个坏掉的工作的节点正在进行的map/reduce任务，已经完成的map任务</p>
<p>需要重做已完成的map任务是因为map任务的输出在该工作节点的本地磁盘上，现在这个节点坏了，之前的输出也拿不到了，而已完成的reduce任务不用重新做因为输出文件在全局文件系统里</p>
<h4 id="Master-Failure"><a href="#Master-Failure" class="headerlink" title="Master Failure"></a>Master Failure</h4><p>直接结束MapReduce，让客户端决定要不要重试</p>
<h4 id="Semantics-in-the-Presence-of-Failures"><a href="#Semantics-in-the-Presence-of-Failures" class="headerlink" title="Semantics in the Presence of Failures"></a>Semantics in the Presence of Failures</h4><p>MapReduce对确定性操作提供强语义保证</p>
<h3 id="Locality"><a href="#Locality" class="headerlink" title="Locality"></a>Locality</h3><p>网络带宽很珍贵，所以一些局部性措施会用来减少网络带宽的使用</p>
<p>如主节点会尽量把map任务分配给本来就有一份输入文件的节点上</p>
<p>一个map任务结束通知主节点后，主节点可以立即通知一个reduce任务拉取文件，不必等所有map任务结束</p>
<h3 id="Task-Granularity"><a href="#Task-Granularity" class="headerlink" title="Task Granularity"></a>Task Granularity</h3><p>M和R应远大于工作节点数</p>
<h3 id="Backup-Tasks"><a href="#Backup-Tasks" class="headerlink" title="Backup Tasks"></a>Backup Tasks</h3><p>为了避免某些工作节点拉跨，在所有任务快结束时，会为还在进行中的任务启动备份任务，两者中谁先完成都算该任务完成</p>
<h2 id="Refinement"><a href="#Refinement" class="headerlink" title="Refinement"></a>Refinement</h2><h3 id="Partitioning-Function"><a href="#Partitioning-Function" class="headerlink" title="Partitioning Function"></a>Partitioning Function</h3><p>默认划分函数为 hash(key) mod R</p>
<p>如果中间数据集的key是URLs，用hash(Hostname(urlkey)) mod R</p>
<h3 id="Ordering-Guarantees"><a href="#Ordering-Guarantees" class="headerlink" title="Ordering Guarantees"></a>Ordering Guarantees</h3><p>为了减少reduce任务的负担，输出的每个map任务的中间文件都是保证按key递增有序的</p>
<h3 id="Combiner-Function"><a href="#Combiner-Function" class="headerlink" title="Combiner Function"></a>Combiner Function</h3><p>Combiner函数是运行在map节点上的，功能和Reduce函数一样</p>
<p>是为了防止出现如单词记数中the这个单词过多导致(the, 1)过多，很占网络带宽</p>
<p>所以Combiner会先预处理成如(the, 10000)</p>
<h3 id="Input-and-Output-Types"><a href="#Input-and-Output-Types" class="headerlink" title="Input and Output Types"></a>Input and Output Types</h3><p>有预制的输入模式，用户也可以自定义reader接口</p>
<h3 id="Skipping-Bad-Records"><a href="#Skipping-Bad-Records" class="headerlink" title="Skipping Bad Records"></a>Skipping Bad Records</h3><p>对于某些会导致MapReduce崩溃的坏记录，一个option是直接跳过</p>
<h3 id="Local-Execution"><a href="#Local-Execution" class="headerlink" title="Local Execution"></a>Local Execution</h3><p>为了方便debug，MapReduce也可以在单个机器上运行</p>
<h3 id="Status-Information"><a href="#Status-Information" class="headerlink" title="Status Information"></a>Status Information</h3><p>主节点会运行一个内置HTTP服务器，展示MapReduce任务的一系列状态信息</p>
<h3 id="Counters"><a href="#Counters" class="headerlink" title="Counters"></a>Counters</h3><p>如果用户想记录某些事件的出现次数，可以用Counter对象</p>
<h2 id="顺便记忆"><a href="#顺便记忆" class="headerlink" title="顺便记忆"></a>顺便记忆</h2><p>derived data 派生数据</p>
<p>inverted index 倒排索引</p>
<p>conspire to obscure A with B 图谋用B掩盖A</p>
<p>conduit 管道，渠道</p>
<p>resilient 有弹性的</p>
<p>straggler 掉队者</p>
<p>a whole host of 一大堆</p>
<p>idempotent 幂等的</p>
]]></content>
      <tags>
        <tag>MIT6.824</tag>
      </tags>
  </entry>
  <entry>
    <title>Lab1 MapReduce</title>
    <url>/2024/03/11/Lab1-MapReduce/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记录2020 spring的MIT6.824 Lab1</p>
<p>实现一个简化的MapReduce框架<br><span id="more"></span></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>看懂wc.go和mrsequential.go</p>
<h3 id="wc-go"><a href="#wc-go" class="headerlink" title="wc.go"></a>wc.go</h3><p>实现了WordCount需要用到的Map和Reduce函数</p>
<p>作为Go Plugin编译为wc.so后其他Go程序就可加载使用</p>
<h3 id="mrsequential-go"><a href="#mrsequential-go" class="headerlink" title="mrsequential.go"></a>mrsequential.go</h3><p>实现了一个串行的MapReduce</p>
<p>先加载wc.go的Map和Reduce函数，然后读取输入，执行Map，对于中间数据集，按Key排序，最后Reduce</p>
<p>初学Go值得注意的点：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Interface <span class="keyword">interface</span> &#123;</span><br><span class="line">	<span class="comment">// Len is the number of elements in the collection.</span></span><br><span class="line">	Len() <span class="type">int</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Less reports whether the element with index i</span></span><br><span class="line">	<span class="comment">// must sort before the element with index j.</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">// If both Less(i, j) and Less(j, i) are false,</span></span><br><span class="line">	<span class="comment">// then the elements at index i and j are considered equal.</span></span><br><span class="line">	<span class="comment">// Sort may place equal elements in any order in the final result,</span></span><br><span class="line">	<span class="comment">// while Stable preserves the original input order of equal elements.</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">// Less must describe a transitive ordering:</span></span><br><span class="line">	<span class="comment">//  - if both Less(i, j) and Less(j, k) are true, then Less(i, k) must be true as well.</span></span><br><span class="line">	<span class="comment">//  - if both Less(i, j) and Less(j, k) are false, then Less(i, k) must be false as well.</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">// Note that floating-point comparison (the &lt; operator on float32 or float64 values)</span></span><br><span class="line">	<span class="comment">// is not a transitive ordering when not-a-number (NaN) values are involved.</span></span><br><span class="line">	<span class="comment">// See Float64Slice.Less for a correct implementation for floating-point values.</span></span><br><span class="line">	Less(i, j <span class="type">int</span>) <span class="type">bool</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Swap swaps the elements with indexes i and j.</span></span><br><span class="line">	Swap(i, j <span class="type">int</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sort sorts data in ascending order as determined by the Less method.</span></span><br><span class="line"><span class="comment">// It makes one call to data.Len to determine n and O(n*log(n)) calls to</span></span><br><span class="line"><span class="comment">// data.Less and data.Swap. The sort is not guaranteed to be stable.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Note: in many situations, the newer [slices.SortFunc] function is more</span></span><br><span class="line"><span class="comment">// ergonomic and runs faster.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sort</span><span class="params">(data Interface)</span></span> &#123;</span><br><span class="line">	n := data.Len()</span><br><span class="line">	<span class="keyword">if</span> n &lt;= <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	limit := bits.Len(<span class="type">uint</span>(n))</span><br><span class="line">	pdqsort(data, <span class="number">0</span>, n, limit)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上为Go的sort包源码</p>
<p>调用sort.Sort需要实现sort.Interface的三个方法，所以mrsequential.go定义了ByKey</p>
<p>加载插件函数中的xmapf和xreducef是通过Lookup方法返回的interface{}类型</p>
<p>为了使用这些函数，需要将它们断言为正确的函数签名</p>
<p>对xmapf的断言是(func(string, string)[]mr.KeyValue)，对xreducef的断言是(func(string, []string)string)</p>
<h3 id="RPC入门"><a href="#RPC入门" class="headerlink" title="RPC入门"></a>RPC入门</h3><p>照B站上一个<a href="https://www.bilibili.com/video/BV1ov4y1p75S/?spm_id_from=333.999.0.0&amp;vd_source=b10e499f380347a5fd56c178a294e0fd">视频</a>跟着敲了一下，熟悉Go语言的RPC</p>
<h4 id="server-go"><a href="#server-go" class="headerlink" title="server.go"></a>server.go</h4><p>服务器可以登记几个对象</p>
<p>登记了以后这些对象的外部方法就能被远程调用</p>
<p>因为要求外部所以这些方法名首字母要大写，一开始没注意肉眼查了很久</p>
<p>基本上外部函数签名都要长这样</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span></span> MethodName(argType T1, replyType *T2) <span class="type">error</span></span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;net/rpc&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Args <span class="keyword">struct</span> &#123;</span><br><span class="line">	A <span class="type">int</span></span><br><span class="line">	B <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AddService <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *AddService)</span></span> Add(args Args, reply *<span class="type">int</span>) <span class="type">error</span> &#123;</span><br><span class="line">	*reply = args.A + args.B</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SubService <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SubService)</span></span> Sub(args Args, reply *<span class="type">int</span>) <span class="type">error</span> &#123;</span><br><span class="line">	*reply = args.A - args.B</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	addService := <span class="built_in">new</span>(AddService)</span><br><span class="line">	subService := <span class="built_in">new</span>(SubService)</span><br><span class="line">	rpc.Register(addService)</span><br><span class="line">	rpc.Register(subService)</span><br><span class="line">	rpc.HandleHTTP()</span><br><span class="line">	listener, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:1234&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(<span class="string">&quot;listen error: &quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	http.Serve(listener, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="client-go"><a href="#client-go" class="headerlink" title="client.go"></a>client.go</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/rpc&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Args <span class="keyword">struct</span> &#123;</span><br><span class="line">	A <span class="type">int</span></span><br><span class="line">	B <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	client, err := rpc.DialHTTP(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;localhost:1234&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(<span class="string">&quot;dialing:&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> client.Close()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Synchronous call</span></span><br><span class="line">	args := Args&#123;<span class="number">7</span>, <span class="number">4</span>&#125;</span><br><span class="line">	<span class="keyword">var</span> reply1 <span class="type">int</span></span><br><span class="line">	err = client.Call(<span class="string">&quot;AddService.Add&quot;</span>, args, &amp;reply1)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(<span class="string">&quot;AddService error:&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;AddService: %d + %d = %d\n&quot;</span>, args.A, args.B, reply1)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Asynchronous call</span></span><br><span class="line">	<span class="keyword">var</span> reply2 <span class="type">int</span></span><br><span class="line">	divCall := client.Go(<span class="string">&quot;SubService.Sub&quot;</span>, args, &amp;reply2, <span class="literal">nil</span>)</span><br><span class="line">	replyCall := &lt;-divCall.Done</span><br><span class="line">	fmt.Printf(<span class="string">&quot;SubService.sub error: %v\n&quot;</span>, replyCall.Error)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;SubService: %d - %d = %d\n&quot;</span>, args.A, args.B, reply2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><p>To be continued..</p>
]]></content>
      <tags>
        <tag>MIT6.824</tag>
      </tags>
  </entry>
  <entry>
    <title>Cambridge IELTS Listening</title>
    <url>/2024/03/18/ielts-listening/</url>
    <content><![CDATA[<h2 id="C18T1"><a href="#C18T1" class="headerlink" title="C18T1"></a>C18T1</h2><p>It was a bit harsh, though! 不过，这有些苛刻</p>
<p>have to differ on that issue 不得不对该事产生分歧</p>
<span id="more"></span>
<p>be realistic about 对..保持现实态度</p>
<p>somebody’s account of something 某人对某事的叙述</p>
<p>pick oneself up 振作起来</p>
<p>garment 衣服</p>
<p>poacher 偷猎者</p>
<p>ivory 象牙</p>
<p>look further afield 寻找更多选择或机会</p>
<p>park ranger 公园管理员</p>
<p>dart 飞镖</p>
<p>immobilize 使固定不动</p>
<p>manoeuvre 策略</p>
<p>select the right dose of tranquiliser 选择合适剂量的镇定剂</p>
<p>suffocation 窒息</p>
<p>matriarch 女族长</p>
<p>tusk 长牙</p>
<h2 id="C18T2"><a href="#C18T2" class="headerlink" title="C18T2"></a>C18T2</h2><p>provide references 提供推荐信</p>
<p>etc(读作et cetera) 等等</p>
<p>housing development 住宅开发</p>
<p>blend in well with the natural features of the landscape 和自然景观特征融合得好</p>
<p>blend 混合(v.)/混合物(n.)</p>
<p>provision 提供，条款(n.)</p>
<p>It’s bounded on the south side by the main road. 它在南边被主路包围</p>
<p>at the corner of the second turning to the left 在第二个向左拐弯处</p>
<p>the road that branches off from London Road 从伦敦路分叉出来的路</p>
<p>adjoin 毗邻</p>
<p>terminology 术语</p>
<p>give a pretty consistent account of what happened 对发生的事情给出相当一致的描述</p>
<p>haze 雾霾</p>
<p>pre-industrial times 前工业时代</p>
<p>sulphur-smelling fog 硫磺味的烟</p>
<p>this wasn’t the sort of fog they were used to 这不是他们习惯的那种雾</p>
<p>reports from the period 这一时期的报告</p>
<p>respiratory issues 呼吸系统疾病</p>
<p>asthma attacks 哮喘发作</p>
<p>be credited with 被认为对..有功</p>
<p>beat him to it 先他一步</p>
<p>drift 漂流</p>
<p>swiftly 敏捷地</p>
<p>be contaminated with fluorine 被氟污染</p>
<p>the mortality rate 死亡率</p>
<p>snowbound 被雪困住的</p>
<p>briefcase 公文包</p>
<p>plainer 更朴素的</p>
<p>medical instruments 医疗器械</p>
<p>pickpocket 扒手</p>
<p>embroidery 刺绣技法</p>
<p>bulky 笨重的，大块的</p>
]]></content>
      <tags>
        <tag>IELTS</tag>
      </tags>
  </entry>
</search>
